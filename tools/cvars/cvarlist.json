{
    "+alt1": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+alt2": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+attack": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+attack2": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+attack3": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+back": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+break": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+camdistance": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+camin": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+cammousemove": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+camout": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+campitchdown": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+campitchup": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+camyawleft": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+camyawright": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+commandermousemove": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+context_action": {
        "desc": "Use the item in the action slot.",
        "tags": [],
        "value": "cmd"
    },
    "+demoui2": {
        "desc": "Bring the advanced demo player UI (demoui2) to foreground.",
        "tags": [],
        "value": "cmd"
    },
    "+duck": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+forward": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+graph": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+grenade1": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+grenade2": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+jlook": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+jump": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+klook": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+left": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+lookdown": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+lookup": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+mat_texture_list": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+movedown": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+moveleft": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+moveright": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+moveup": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+posedebug": {
        "desc": "Turn on pose debugger or add ents to pose debugger UI",
        "tags": [],
        "value": "cmd"
    },
    "+quickswitch": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+reload": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+right": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+score": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+showbudget": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+showbudget_texture": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+showbudget_texture_global": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+showscores": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+showvprof": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+sixense_left_point_gesture": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+sixense_ratchet": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+sixense_right_point_gesture": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+speed": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+strafe": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+use": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+use_action_slot_item": {
        "desc": "Use the item in the action slot.",
        "tags": [],
        "value": "cmd"
    },
    "+vgui_drawtree": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+voicerecord": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+walk": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "+zoom": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-alt1": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-alt2": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-attack": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-attack2": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-attack3": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-back": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-break": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-camdistance": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-camin": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-cammousemove": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-camout": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-campitchdown": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-campitchup": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-camyawleft": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-camyawright": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-commandermousemove": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-context_action": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-demoui2": {
        "desc": "Send the advanced demo player UI (demoui2) to background.",
        "tags": [],
        "value": "cmd"
    },
    "-duck": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-forward": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-graph": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-grenade1": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-grenade2": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-jlook": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-jump": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-klook": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-left": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-lookdown": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-lookup": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-mat_texture_list": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-movedown": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-moveleft": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-moveright": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-moveup": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-posedebug": {
        "desc": "Turn off pose debugger or hide ents from pose debugger UI",
        "tags": [],
        "value": "cmd"
    },
    "-quickswitch": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-reload": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-right": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-score": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-showbudget": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-showbudget_texture": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-showbudget_texture_global": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-showscores": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-showvprof": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-sixense_left_point_gesture": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-sixense_ratchet": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-sixense_right_point_gesture": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-speed": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-strafe": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-use": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-use_action_slot_item": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-vgui_drawtree": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-voicerecord": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-walk": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "-zoom": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "BindToggle": {
        "desc": "Performs a bind <key> 'increment var <cvar> 0 1 1'",
        "tags": [],
        "value": "cmd"
    },
    "CreateHairball": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "OpenMatchmakingLobby": {
        "desc": "Activates the matchmaking lobby.",
        "tags": [],
        "value": "cmd"
    },
    "OpenQuickplayDialog": {
        "desc": "Displays the quickplay dialog.",
        "tags": [],
        "value": "cmd"
    },
    "OpenSteamWorkshopDialog": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "RefreshMatchmakingLobby": {
        "desc": "Refreshes the matchmaking lobby.",
        "tags": [],
        "value": "cmd"
    },
    "Test_CreateEntity": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "Test_EHandle": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "Test_InitRandomEntitySpawner": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "Test_ProxyToggle_EnableProxy": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "Test_ProxyToggle_EnsureValue": {
        "desc": "Test_ProxyToggle_EnsureValue",
        "tags": [],
        "value": "cmd"
    },
    "Test_ProxyToggle_SetValue": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "Test_RandomPlayerPosition": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "Test_RandomizeInPVS": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "Test_RemoveAllRandomEntities": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "Test_SpawnRandomEntities": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "TrackerAnim": {
        "desc": "Test animation of the achievement tracker. Parameter is achievement number on HUD to flash",
        "tags": [],
        "value": "cmd"
    },
    "_autosave": {
        "desc": "Autosave",
        "tags": [],
        "value": "cmd"
    },
    "_autosavedangerous": {
        "desc": "AutoSaveDangerous",
        "tags": [],
        "value": "cmd"
    },
    "_bugreporter_restart": {
        "desc": "Restarts bug reporter .dll",
        "tags": [],
        "value": "cmd"
    },
    "_cl_classmenuopen": {
        "desc": "internal cvar used to tell server when class menu is open",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "_fov": {
        "desc": "Automates fov command to server.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "_resetgamestats": {
        "desc": "Erases current game stats and writes out a blank stats file",
        "tags": [],
        "value": "cmd"
    },
    "_restart": {
        "desc": "Shutdown and restart the engine.",
        "tags": [],
        "value": "cmd"
    },
    "abuse_report_queue": {
        "desc": "Capture data for abuse report and queue for submission.  Use abose_report_submit to activate UI to submit the report",
        "tags": [],
        "value": "cmd"
    },
    "abuse_report_submit": {
        "desc": "Activate UI to submit queued report.  Use abuse_report_queue to capture data for the report the report",
        "tags": [],
        "value": "cmd"
    },
    "achievement_debug": {
        "desc": "Turn on achievement debug msgs.",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "0"
    },
    "addip": {
        "desc": "Add an IP address to the ban list.",
        "tags": [],
        "value": "cmd"
    },
    "adsp_alley_min": {
        "desc": "",
        "tags": [],
        "value": "122"
    },
    "adsp_courtyard_min": {
        "desc": "",
        "tags": [],
        "value": "126"
    },
    "adsp_debug": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "adsp_door_height": {
        "desc": "",
        "tags": [],
        "value": "112"
    },
    "adsp_duct_min": {
        "desc": "",
        "tags": [],
        "value": "106"
    },
    "adsp_hall_min": {
        "desc": "",
        "tags": [],
        "value": "110"
    },
    "adsp_low_ceiling": {
        "desc": "",
        "tags": [],
        "value": "108"
    },
    "adsp_opencourtyard_min": {
        "desc": "",
        "tags": [],
        "value": "126"
    },
    "adsp_openspace_min": {
        "desc": "",
        "tags": [],
        "value": "130"
    },
    "adsp_openstreet_min": {
        "desc": "",
        "tags": [],
        "value": "118"
    },
    "adsp_openwall_min": {
        "desc": "",
        "tags": [],
        "value": "130"
    },
    "adsp_room_min": {
        "desc": "",
        "tags": [],
        "value": "102"
    },
    "adsp_street_min": {
        "desc": "",
        "tags": [],
        "value": "118"
    },
    "adsp_tunnel_min": {
        "desc": "",
        "tags": [],
        "value": "114"
    },
    "adsp_wall_height": {
        "desc": "",
        "tags": [],
        "value": "128"
    },
    "ai_LOS_mode": {
        "desc": "",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "0"
    },
    "ai_auto_contact_solver": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "ai_block_damage": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_debug_assault": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_debug_avoidancebounds": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_debug_directnavprobe": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_debug_doors": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_debug_dyninteractions": {
        "desc": "Debug the NPC dynamic interaction system.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_debug_efficiency": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_debug_enemies": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_debug_expressions": {
        "desc": "Show random expression decisions for NPCs.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_debug_follow": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_debug_loners": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_debug_looktargets": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_debug_los": {
        "desc": "NPC Line-Of-Sight debug mode. If 1, solid entities that block NPC LOC will be highlighted with white bounding boxes. If 2, it'l",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "ai_debug_nav": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_debug_node_connect": {
        "desc": "Debug the attempted connection between two nodes",
        "tags": [],
        "value": "cmd"
    },
    "ai_debug_ragdoll_magnets": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_debug_shoot_positions": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "0"
    },
    "ai_debug_speech": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_debug_squads": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_debug_think_ticks": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_debugscriptconditions": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_default_efficient": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_drawbattlelines": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "ai_drop_hint": {
        "desc": "Drop an ai_hint at the player's current eye position.",
        "tags": [],
        "value": "cmd"
    },
    "ai_dump_hints": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "ai_efficiency_override": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_enable_fear_behavior": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "ai_expression_frametime": {
        "desc": "Maximum frametime to still play background expressions.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_expression_optimization": {
        "desc": "Disable npc background expressions when you can't see them.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_fear_player_dist": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "720"
    },
    "ai_find_lateral_cover": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "ai_find_lateral_los": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "ai_follow_use_points": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "ai_follow_use_points_when_moving": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "ai_force_serverside_ragdoll": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_frametime_limit": {
        "desc": "frametime limit for min efficiency AIE_NORMAL (in sec's).",
        "tags": [
            "sv"
        ],
        "value": "50"
    },
    "ai_inhibit_spawners": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "ai_lead_time": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_moveprobe_debug": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_moveprobe_jump_debug": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_moveprobe_usetracelist": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_navigator_generate_spikes": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_navigator_generate_spikes_strength": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "8"
    },
    "ai_no_local_paths": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_no_node_cache": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_no_select_box": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_no_steer": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_no_talk_delay": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_norebuildgraph": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_path_adjust_speed_on_immediate_turns": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "ai_path_insert_pause_at_est_end": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "ai_path_insert_pause_at_obstruction": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "ai_post_frame_navigation": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_radial_max_link_dist": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "512"
    },
    "ai_reaction_delay_alert": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_reaction_delay_idle": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_rebalance_thinks": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "ai_report_task_timings_on_limit": {
        "desc": "",
        "tags": [
            "a",
            "sv"
        ],
        "value": "0"
    },
    "ai_sequence_debug": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_set_move_height_epsilon": {
        "desc": "Set how high AI bumps up ground walkers when checking steps",
        "tags": [],
        "value": "cmd"
    },
    "ai_setupbones_debug": {
        "desc": "Shows that bones that are setup every think",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_shot_bias": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "ai_shot_bias_max": {
        "desc": "",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "ai_shot_bias_min": {
        "desc": "",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "-1"
    },
    "ai_shot_stats": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_shot_stats_term": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1000"
    },
    "ai_show_hull_attacks": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_show_think_tolerance": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_simulate_task_overtime": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_spread_cone_focus_time": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_spread_defocused_cone_multiplier": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "3"
    },
    "ai_spread_pattern_focus_time": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_strong_optimizations": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_strong_optimizations_no_checkstand": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_task_pre_script": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_test_moveprobe_ignoresmall": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ai_think_limit_label": {
        "desc": "",
        "tags": [
            "a",
            "sv"
        ],
        "value": "0"
    },
    "ai_use_clipped_paths": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "ai_use_efficiency": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "ai_use_frame_think_limits": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "ai_use_think_optimizations": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "ai_use_visibility_cache": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "ai_vehicle_avoidance": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "air_density": {
        "desc": "Changes the density of air for drag computations.",
        "tags": [],
        "value": "cmd"
    },
    "alias": {
        "desc": "Alias a command.",
        "tags": [],
        "value": "cmd"
    },
    "ammo_max": {
        "desc": "",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "5000"
    },
    "anim_3wayblend": {
        "desc": "Toggle the 3-way animation blending code.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "anim_showmainactivity": {
        "desc": "Show the idle, walk, run, and/or sprint activities.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "askconnect_accept": {
        "desc": "Accept a redirect request by the server.",
        "tags": [],
        "value": "cmd"
    },
    "async_allow_held_files": {
        "desc": "Allow AsyncBegin/EndRead()",
        "tags": [],
        "value": "1"
    },
    "async_mode": {
        "desc": "Set the async filesystem mode (0 = async, 1 = synchronous)",
        "tags": [],
        "value": "0"
    },
    "async_resume": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "async_serialize": {
        "desc": "Force async reads to serialize for profiling",
        "tags": [],
        "value": "0"
    },
    "async_simulate_delay": {
        "desc": "Simulate a delay of up to a set msec per file operation",
        "tags": [],
        "value": "0"
    },
    "async_suspend": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "audit_save_in_memory": {
        "desc": "Audit the memory usage and files in the save-to-memory system",
        "tags": [],
        "value": "cmd"
    },
    "autoaim_max_deflect": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "autoaim_max_dist": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "2160"
    },
    "autosave": {
        "desc": "Autosave",
        "tags": [],
        "value": "cmd"
    },
    "autosavedangerous": {
        "desc": "AutoSaveDangerous",
        "tags": [],
        "value": "cmd"
    },
    "autosavedangerousissafe": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "banid": {
        "desc": "Add a user ID to the ban list.",
        "tags": [],
        "value": "cmd"
    },
    "banip": {
        "desc": "Add an IP address to the ban list.",
        "tags": [],
        "value": "cmd"
    },
    "bench_end": {
        "desc": "Ends gathering of info.",
        "tags": [],
        "value": "cmd"
    },
    "bench_showstatsdialog": {
        "desc": "Shows a dialog displaying the most recent benchmark results.",
        "tags": [],
        "value": "cmd"
    },
    "bench_start": {
        "desc": "Starts gathering of info. Arguments: filename to write results into",
        "tags": [],
        "value": "cmd"
    },
    "bench_upload": {
        "desc": "Uploads most recent benchmark stats to the Valve servers.",
        "tags": [],
        "value": "cmd"
    },
    "benchframe": {
        "desc": "Takes a snapshot of a particular frame in a time demo.",
        "tags": [],
        "value": "cmd"
    },
    "bind": {
        "desc": "Bind a key.",
        "tags": [],
        "value": "cmd"
    },
    "bind_mac": {
        "desc": "Bind this key but only on Mac, not win32",
        "tags": [],
        "value": "cmd"
    },
    "binds_per_command": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "blink_duration": {
        "desc": "How many seconds an eye blink will last.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "bloodspray": {
        "desc": "blood",
        "tags": [],
        "value": "cmd"
    },
    "bot": {
        "desc": "Add a bot.",
        "tags": [],
        "value": "cmd"
    },
    "bot_changeclass": {
        "desc": "Force all bots to change to the specified class.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "bot_changeteams": {
        "desc": "Make all bots change teams",
        "tags": [],
        "value": "cmd"
    },
    "bot_com_meleerange": {
        "desc": "Distance to a target that a melee bot wants to be within to attack.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "80"
    },
    "bot_com_viewrange": {
        "desc": "Distance within which bots looking for any enemies will find them.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "2000"
    },
    "bot_com_wpnrange": {
        "desc": "Distance to a target that a ranged bot wants to be within to attack.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "400"
    },
    "bot_command": {
        "desc": "<bot id> <command string...>.  Sends specified command on behalf of specified bot",
        "tags": [],
        "value": "cmd"
    },
    "bot_crouch": {
        "desc": "Force all bots to crouch.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "bot_debug": {
        "desc": "Bot debugging.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "bot_dontmove": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "bot_drop": {
        "desc": "Force the specified bot to drop his active weapon. Usage: bot_drop <bot name>",
        "tags": [],
        "value": "cmd"
    },
    "bot_forceattack": {
        "desc": "When on, all bots fire their guns.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "bot_forceattack2": {
        "desc": "When firing, use attack2.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "bot_forceattack_down": {
        "desc": "When firing, don't tap fire, hold it down.",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "bot_forcefireweapon": {
        "desc": "Force bots with the specified weapon to fire.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "bot_hurt": {
        "desc": "Hurt a bot by team, or all bots ('all').",
        "tags": [],
        "value": "cmd"
    },
    "bot_jump": {
        "desc": "Force all bots to repeatedly jump.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "bot_kick": {
        "desc": "Remove a bot by name, or an entire team ('red' or 'blue'), or all bots ('all').",
        "tags": [],
        "value": "cmd"
    },
    "bot_kill": {
        "desc": "Kills a bot. Usage: bot_kill <bot name>",
        "tags": [],
        "value": "cmd"
    },
    "bot_mimic": {
        "desc": "Bot uses usercmd of player by index.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "bot_mimic_inverse": {
        "desc": "Bot uses usercmd of player by index.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "bot_mimic_yaw_offset": {
        "desc": "Offsets the bot yaw.",
        "tags": [
            "sv"
        ],
        "value": "180"
    },
    "bot_mirror": {
        "desc": "Forces the specified bot to be the same class, and use the same items, as you.",
        "tags": [],
        "value": "cmd"
    },
    "bot_moveto": {
        "desc": "Force the specified bot to move to the point under your crosshair. Usage: bot_moveto <bot name>",
        "tags": [],
        "value": "cmd"
    },
    "bot_nav_offsetpathinset": {
        "desc": "Distance into an area that waypoints should be generated when pathfinding through portals.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "20"
    },
    "bot_nav_recomputetime": {
        "desc": "Delay before bots recompute their path to targets that have moved when moving to them.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "bot_nav_simplifypaths": {
        "desc": "If set, bots will skip waypoints if they already see the waypoint post.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "bot_nav_turnspeed": {
        "desc": "Rate at which bots turn to face their targets.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "5"
    },
    "bot_nav_usefeelers": {
        "desc": "If set, bots will extend feelers to their sides to find & avoid upcoming collisions.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "bot_nav_useoffsetpaths": {
        "desc": "If set, bots will generate waypoints on both sides of portals between waypoints when building paths.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "bot_nav_wpdeceldistance": {
        "desc": "Distance to a waypoint to which a bot starts to decelerate to reach it.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "128"
    },
    "bot_nav_wpdistance": {
        "desc": "Distance to a waypoint within which a bot considers as having reached it.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "16"
    },
    "bot_randomnames": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "bot_refill": {
        "desc": "Refill all bot ammo counts",
        "tags": [],
        "value": "cmd"
    },
    "bot_saveme": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "bot_selectweaponslot": {
        "desc": "set to weapon slot that bot should switch to.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "-1"
    },
    "bot_teleport": {
        "desc": "Teleport the specified bot to the specified position & angles.  Format: bot_teleport <bot name> <X> <Y> <Z> <Pitch> <Yaw> <Roll",
        "tags": [],
        "value": "cmd"
    },
    "bot_whack": {
        "desc": "Deliver lethal damage from player to specified bot. Usage: bot_whack <bot name>",
        "tags": [],
        "value": "cmd"
    },
    "box": {
        "desc": "Draw a debug box.",
        "tags": [],
        "value": "cmd"
    },
    "breakable_disable_gib_limit": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "breakable_multiplayer": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "buddha": {
        "desc": "Toggle.  Player takes damage but won't die. (Shows red cross when health is zero)",
        "tags": [],
        "value": "cmd"
    },
    "budget_averages_window": {
        "desc": "number of frames to look at when figuring out average frametimes",
        "tags": [
            "a"
        ],
        "value": "30"
    },
    "budget_background_alpha": {
        "desc": "how translucent the budget panel is",
        "tags": [
            "a"
        ],
        "value": "128"
    },
    "budget_bargraph_background_alpha": {
        "desc": "how translucent the budget panel is",
        "tags": [
            "a"
        ],
        "value": "128"
    },
    "budget_bargraph_range_ms": {
        "desc": "budget bargraph range in milliseconds",
        "tags": [
            "a"
        ],
        "value": "16"
    },
    "budget_history_numsamplesvisible": {
        "desc": "number of samples to draw in the budget history window.  The lower the better as far as rendering overhead of the budget panel",
        "tags": [
            "a"
        ],
        "value": "100"
    },
    "budget_history_range_ms": {
        "desc": "budget history range in milliseconds",
        "tags": [
            "a"
        ],
        "value": "66"
    },
    "budget_panel_bottom_of_history_fraction": {
        "desc": "number between 0 and 1",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "budget_panel_height": {
        "desc": "height in pixels of the budget panel",
        "tags": [
            "a"
        ],
        "value": "384"
    },
    "budget_panel_width": {
        "desc": "width in pixels of the budget panel",
        "tags": [
            "a"
        ],
        "value": "512"
    },
    "budget_panel_x": {
        "desc": "number of pixels from the left side of the game screen to draw the budget panel",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "budget_panel_y": {
        "desc": "number of pixels from the top side of the game screen to draw the budget panel",
        "tags": [
            "a"
        ],
        "value": "50"
    },
    "budget_peaks_window": {
        "desc": "number of frames to look at when figuring out peak frametimes",
        "tags": [
            "a"
        ],
        "value": "30"
    },
    "budget_show_averages": {
        "desc": "enable/disable averages in the budget panel",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "budget_show_history": {
        "desc": "turn history graph off and on. . good to turn off on low end",
        "tags": [
            "a"
        ],
        "value": "1"
    },
    "budget_show_peaks": {
        "desc": "enable/disable peaks in the budget panel",
        "tags": [
            "a"
        ],
        "value": "1"
    },
    "budget_toggle_group": {
        "desc": "Turn a budget group on/off",
        "tags": [],
        "value": "cmd"
    },
    "bug": {
        "desc": "Show/hide the bug reporting UI.",
        "tags": [],
        "value": "cmd"
    },
    "bug_swap": {
        "desc": "Automatically swaps the current weapon for the bug bait and back again.",
        "tags": [],
        "value": "cmd"
    },
    "bugreporter_includebsp": {
        "desc": "Include .bsp for internal bug submissions.",
        "tags": [],
        "value": "1"
    },
    "bugreporter_uploadasync": {
        "desc": "Upload attachments asynchronously",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "buildcubemaps": {
        "desc": "Rebuild cubemaps.",
        "tags": [],
        "value": "cmd"
    },
    "building_cubemaps": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "c_maxdistance": {
        "desc": "",
        "tags": [
            "a",
            "cheat",
            "cl"
        ],
        "value": "200"
    },
    "c_maxpitch": {
        "desc": "",
        "tags": [
            "a",
            "cheat",
            "cl"
        ],
        "value": "90"
    },
    "c_maxyaw": {
        "desc": "",
        "tags": [
            "a",
            "cheat",
            "cl"
        ],
        "value": "135"
    },
    "c_mindistance": {
        "desc": "",
        "tags": [
            "a",
            "cheat",
            "cl"
        ],
        "value": "30"
    },
    "c_minpitch": {
        "desc": "",
        "tags": [
            "a",
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "c_minyaw": {
        "desc": "",
        "tags": [
            "a",
            "cheat",
            "cl"
        ],
        "value": "-135"
    },
    "c_orthoheight": {
        "desc": "",
        "tags": [
            "a",
            "cheat",
            "cl"
        ],
        "value": "100"
    },
    "c_orthowidth": {
        "desc": "",
        "tags": [
            "a",
            "cheat",
            "cl"
        ],
        "value": "100"
    },
    "cache_print": {
        "desc": "cache_print [section] Print out contents of cache memory.",
        "tags": [],
        "value": "cmd"
    },
    "cache_print_lru": {
        "desc": "cache_print_lru [section] Print out contents of cache memory.",
        "tags": [],
        "value": "cmd"
    },
    "cache_print_summary": {
        "desc": "cache_print_summary [section] Print out a summary contents of cache memory.",
        "tags": [],
        "value": "cmd"
    },
    "callvote": {
        "desc": "Start a vote on an issue.",
        "tags": [],
        "value": "cmd"
    },
    "cam_collision": {
        "desc": "When in thirdperson and cam_collision is set to 1, an attempt is made to keep the camera from passing though walls.",
        "tags": [
            "a",
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "cam_command": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cam_idealdelta": {
        "desc": "Controls the speed when matching offset to ideal angles in thirdperson view",
        "tags": [
            "a",
            "cheat",
            "cl"
        ],
        "value": "4"
    },
    "cam_idealdist": {
        "desc": "",
        "tags": [
            "a",
            "cheat",
            "cl"
        ],
        "value": "150"
    },
    "cam_idealdistright": {
        "desc": "",
        "tags": [
            "a",
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cam_idealdistup": {
        "desc": "",
        "tags": [
            "a",
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cam_ideallag": {
        "desc": "Amount of lag used when matching offset to ideal angles in thirdperson view",
        "tags": [
            "a",
            "cheat",
            "cl"
        ],
        "value": "4"
    },
    "cam_idealpitch": {
        "desc": "",
        "tags": [
            "a",
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cam_idealyaw": {
        "desc": "",
        "tags": [
            "a",
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cam_showangles": {
        "desc": "When in thirdperson, print viewangles/idealangles/cameraoffsets to the console.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cam_snapto": {
        "desc": "",
        "tags": [
            "a",
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "camortho": {
        "desc": "Switch to orthographic camera.",
        "tags": [],
        "value": "cmd"
    },
    "cancelselect": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "cast_hull": {
        "desc": "Tests hull collision detection",
        "tags": [],
        "value": "cmd"
    },
    "cast_ray": {
        "desc": "Tests collision detection",
        "tags": [],
        "value": "cmd"
    },
    "cc_bot_selectweapon": {
        "desc": "Force a bot to select a weapon in a slot. Usage: bot_selectweapon <bot name> <weapon slot>",
        "tags": [],
        "value": "cmd"
    },
    "cc_captiontrace": {
        "desc": "Show missing closecaptions (0 = no, 1 = devconsole, 2 = show in hud)",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cc_emit": {
        "desc": "Emits a closed caption",
        "tags": [],
        "value": "cmd"
    },
    "cc_findsound": {
        "desc": "Searches for soundname which emits specified text.",
        "tags": [],
        "value": "cmd"
    },
    "cc_flush": {
        "desc": "Flushes async'd captions.",
        "tags": [],
        "value": "cmd"
    },
    "cc_lang": {
        "desc": "Current close caption language (emtpy = use game UI language)",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "cc_linger_time": {
        "desc": "Close caption linger time.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "cc_minvisibleitems": {
        "desc": "Minimum number of caption items to show.",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "cc_predisplay_time": {
        "desc": "Close caption delay before showing caption.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "cc_random": {
        "desc": "Emits a random caption",
        "tags": [],
        "value": "cmd"
    },
    "cc_sentencecaptionnorepeat": {
        "desc": "How often a sentence can repeat.",
        "tags": [
            "cl"
        ],
        "value": "4"
    },
    "cc_showblocks": {
        "desc": "Toggles showing which blocks are pending/loaded async.",
        "tags": [],
        "value": "cmd"
    },
    "cc_smallfontlength": {
        "desc": "If text stream is this long, force usage of small font size.",
        "tags": [
            "cl"
        ],
        "value": "300"
    },
    "cc_spawn_merasmus_at_level": {
        "desc": "Force Merasmus to spawn at a specific difficulty level",
        "tags": [],
        "value": "cmd"
    },
    "cc_subtitles": {
        "desc": "If set, don't show sound effect captions, just voice overs (i.e., won't help hearing impaired players).",
        "tags": [
            "a",
            "cl"
        ],
        "value": "2"
    },
    "ccs_create_convars_from_hwconfig": {
        "desc": "Create convars from the current hardware config, useful for diffing purposes",
        "tags": [],
        "value": "cmd"
    },
    "centerview": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "ch_createairboat": {
        "desc": "Spawn airboat in front of the player.",
        "tags": [],
        "value": "cmd"
    },
    "ch_createjeep": {
        "desc": "Spawn jeep in front of the player.",
        "tags": [],
        "value": "cmd"
    },
    "changeclass": {
        "desc": "Choose a new class",
        "tags": [],
        "value": "cmd"
    },
    "changelevel": {
        "desc": "Change server to the specified map",
        "tags": [],
        "value": "cmd"
    },
    "changelevel2": {
        "desc": "Transition to the specified map in single player",
        "tags": [],
        "value": "cmd"
    },
    "changelevel_next": {
        "desc": "Immediately changes to the next map in the map rotation for the server.",
        "tags": [],
        "value": "cmd"
    },
    "changeteam": {
        "desc": "Choose a new team",
        "tags": [],
        "value": "cmd"
    },
    "cl_SetupAllBones": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_ShowBoneSetupEnts": {
        "desc": "Show which entities are having their bones setup each frame.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_ShowSunVectors": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_allowdownload": {
        "desc": "Client downloads customization files",
        "tags": [
            "a"
        ],
        "value": "1"
    },
    "cl_allowupload": {
        "desc": "Client uploads customization files",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "cl_anglespeedkey": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_animationinfo": {
        "desc": "Hud element to examine.",
        "tags": [],
        "value": "cmd"
    },
    "cl_ask_bigpicture_controller_opt_out": {
        "desc": "Whether the user has opted out of being prompted for controller support in Big Picture.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "cl_ask_blacklist_for_any_server": {
        "desc": "If nonzero, auto-ask for local/LAN servers (for debugging)",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_ask_blacklist_max_session_duration": {
        "desc": "If player stays on a server for less than this time (in seconds) prompt to add server to blacklist",
        "tags": [
            "cl"
        ],
        "value": "60"
    },
    "cl_ask_blacklist_opt_out": {
        "desc": "If nonzero, don't auto-ask to blacklist servers",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "cl_ask_favorite_for_any_server": {
        "desc": "If nonzero, auto-ask for local/LAN servers (for debugging)",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_ask_favorite_min_session_duration": {
        "desc": "If player stays on a server for longer than this time (in seconds) prompt to add server to favorites",
        "tags": [
            "cl"
        ],
        "value": "600"
    },
    "cl_ask_favorite_opt_out": {
        "desc": "If nonzero, don't auto-ask to favorite servers",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "cl_autoreload": {
        "desc": "When set to 1, clip-using weapons will automatically be reloaded whenever they're not being fired.",
        "tags": [
            "a",
            "user",
            "cl"
        ],
        "value": "1"
    },
    "cl_autorezoom": {
        "desc": "When set to 1, sniper rifle will re-zoom after firing a zoomed shot.",
        "tags": [
            "a",
            "user",
            "cl"
        ],
        "value": "0"
    },
    "cl_backspeed": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "450"
    },
    "cl_blobbyshadows": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_bobcycle": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cl_bobup": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cl_burninggibs": {
        "desc": "A burning player that gibs has burning gibs.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_chatfilters": {
        "desc": "Stores the chat filter settings",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "cl_class": {
        "desc": "Default class when joining a game",
        "tags": [
            "a",
            "user",
            "cl"
        ],
        "value": "0"
    },
    "cl_clearhinthistory": {
        "desc": "Clear memory of client side hints displayed to the player.",
        "tags": [],
        "value": "cmd"
    },
    "cl_clock_correction": {
        "desc": "Enable/disable clock correction on the client.",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "cl_clock_correction_adjustment_max_amount": {
        "desc": "Sets the maximum number of milliseconds per second it is allowed to correct the client clock. It will only correct this amount",
        "tags": [
            "cheat"
        ],
        "value": "200"
    },
    "cl_clock_correction_adjustment_max_offset": {
        "desc": "As the clock offset goes from cl_clock_correction_adjustment_min_offset to this value (in milliseconds), it moves towards apply",
        "tags": [
            "cheat"
        ],
        "value": "90"
    },
    "cl_clock_correction_adjustment_min_offset": {
        "desc": "If the clock offset is less than this amount (in milliseconds), then no clock correction is applied.",
        "tags": [
            "cheat"
        ],
        "value": "10"
    },
    "cl_clock_correction_force_server_tick": {
        "desc": "Force clock correction to match the server tick + this offset (-999 disables it).",
        "tags": [
            "cheat"
        ],
        "value": "999"
    },
    "cl_clock_showdebuginfo": {
        "desc": "Show debugging info about the clock drift.",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "cl_clockdrift_max_ms": {
        "desc": "Maximum number of milliseconds the clock is allowed to drift before the client snaps its clock to the server's.",
        "tags": [
            "cheat"
        ],
        "value": "150"
    },
    "cl_clockdrift_max_ms_threadmode": {
        "desc": "Maximum number of milliseconds the clock is allowed to drift before the client snaps its clock to the server's.",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "cl_cmdrate": {
        "desc": "Max number of command packets sent to server per second",
        "tags": [
            "a",
            "user"
        ],
        "value": "100"
    },
    "cl_coach_find_coach": {
        "desc": "Request a coach for the current game",
        "tags": [],
        "value": "cmd"
    },
    "cl_coach_toggle": {
        "desc": "Toggle coach status",
        "tags": [],
        "value": "cmd"
    },
    "cl_crosshair_blue": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "255"
    },
    "cl_crosshair_file": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "cl_crosshair_green": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "255"
    },
    "cl_crosshair_red": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "cl_crosshair_scale": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "28"
    },
    "cl_crosshairalpha": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "200"
    },
    "cl_crosshaircolor": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "cl_customsounds": {
        "desc": "Enable customized player sound playback",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_debug_player_perf": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "cl_debugrumble": {
        "desc": "Turn on rumble debugging spew",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "cl_decline_first_notification": {
        "desc": "Tries to decline/remove the first notification",
        "tags": [],
        "value": "cmd"
    },
    "cl_demoviewoverride": {
        "desc": "Override view during demo playback",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_detail_multiplier": {
        "desc": "extra details to create",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "cl_detaildist": {
        "desc": "Distance at which detail props are no longer visible",
        "tags": [],
        "value": "1200"
    },
    "cl_detailfade": {
        "desc": "Distance across which detail props fade in",
        "tags": [],
        "value": "400"
    },
    "cl_disablehtmlmotd": {
        "desc": "Disable HTML motds.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "cl_disconnect_prompt": {
        "desc": "Prompt about disconnect",
        "tags": [],
        "value": "cmd"
    },
    "cl_downloadfilter": {
        "desc": "Determines which files can be downloaded from the server (all, none, nosounds, mapsonly)",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "cl_drawhud": {
        "desc": "Enable the rendering of the hud",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "cl_drawleaf": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "-1"
    },
    "cl_drawmaterial": {
        "desc": "Draw a particular material over the frame",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cl_drawmonitors": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "cl_drawshadowtexture": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cl_dump_particle_stats": {
        "desc": "dump particle profiling info to particle_profile.csv",
        "tags": [],
        "value": "cmd"
    },
    "cl_dynamiccrosshair": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "cl_ejectbrass": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "cl_ent_absbox": {
        "desc": "Displays the client's absbox for the entity under the crosshair.",
        "tags": [],
        "value": "cmd"
    },
    "cl_ent_bbox": {
        "desc": "Displays the client's bounding box for the entity under the crosshair.",
        "tags": [],
        "value": "cmd"
    },
    "cl_ent_rbox": {
        "desc": "Displays the client's render box for the entity under the crosshair.",
        "tags": [],
        "value": "cmd"
    },
    "cl_entityreport": {
        "desc": "For debugging, draw entity states to console",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "cl_entityreport_sorted": {
        "desc": "For debugging, draw entity states to console in sorted order. [0 = disabled, 1 = average, 2 = current, 3 = peak",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "cl_extrapolate": {
        "desc": "Enable/disable extrapolation if interpolation history runs out.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "cl_extrapolate_amount": {
        "desc": "Set how many seconds the client will extrapolate entities for.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cl_fastdetailsprites": {
        "desc": "whether to use new detail sprite system",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "cl_fasttempentcollision": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "5"
    },
    "cl_find_ent": {
        "desc": "Find and list all client entities with classnames that contain the specified substring. Format: cl_find_ent <substring>",
        "tags": [],
        "value": "cmd"
    },
    "cl_find_ent_index": {
        "desc": "Display data for clientside entity matching specified index. Format: cl_find_ent_index <index>",
        "tags": [],
        "value": "cmd"
    },
    "cl_first_person_uses_world_model": {
        "desc": "Causes the third person model to be drawn instead of the view model",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "cl_flag_return_height": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "82"
    },
    "cl_flag_return_size": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "20"
    },
    "cl_flipviewmodels": {
        "desc": "Flip view models.",
        "tags": [
            "a",
            "user",
            "cl"
        ],
        "value": "0"
    },
    "cl_flushentitypacket": {
        "desc": "For debugging. Force the engine to flush an entity packet.",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "cl_forcepreload": {
        "desc": "Whether we should force preloading.",
        "tags": [
            "a"
        ],
        "value": "1"
    },
    "cl_forwardspeed": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "450"
    },
    "cl_fullupdate": {
        "desc": "Forces the server to send a full update packet",
        "tags": [],
        "value": "cmd"
    },
    "cl_gameserver_create_identity": {
        "desc": "Creates a new game server account associated with the currently logged in steam account",
        "tags": [],
        "value": "cmd"
    },
    "cl_gameserver_list": {
        "desc": "List all the game server accounts owned by the currently logged in steam account",
        "tags": [],
        "value": "cmd"
    },
    "cl_gameserver_reset_identity": {
        "desc": "Resets the identity token for a given game server",
        "tags": [],
        "value": "cmd"
    },
    "cl_hud_killstreak_display_alpha": {
        "desc": "Adjusts font alpha value of killstreak notices.  Range is from 0 to 255 (default is 200).",
        "tags": [
            "a",
            "cl"
        ],
        "value": "120"
    },
    "cl_hud_killstreak_display_fontsize": {
        "desc": "Adjusts font size of killstreak notices.  Range is from 0 to 2 (default is 1).",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "cl_hud_killstreak_display_time": {
        "desc": "How long a killstreak notice stays on the screen (in seconds).  Range is from 0 to 100.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "3"
    },
    "cl_hud_minmode": {
        "desc": "Set to 1 to turn on the advanced minimalist HUD mode.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "cl_hud_playerclass_use_playermodel": {
        "desc": "Use player model in player class HUD.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "cl_hudhint_sound": {
        "desc": "Disable hudhint sounds.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "cl_idealpitchscale": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "cl_ignorepackets": {
        "desc": "Force client to ignore packets (for debugging).",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "cl_interp": {
        "desc": "Sets the interpolation amount (bounded on low side by server interp ratio settings).",
        "tags": [
            "user",
            "cl"
        ],
        "value": "0"
    },
    "cl_interp_all": {
        "desc": "Disable interpolation list optimizations.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_interp_npcs": {
        "desc": "Interpolate NPC positions starting this many seconds in past (or cl_interp, if greater)",
        "tags": [
            "user",
            "cl"
        ],
        "value": "0"
    },
    "cl_interp_ratio": {
        "desc": "Sets the interpolation amount (final amount is cl_interp_ratio / cl_updaterate).",
        "tags": [
            "user",
            "cl"
        ],
        "value": "1"
    },
    "cl_jiggle_bone_debug": {
        "desc": "Display physics-based 'jiggle bone' debugging information",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cl_jiggle_bone_debug_pitch_constraints": {
        "desc": "Display physics-based 'jiggle bone' debugging information",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cl_jiggle_bone_debug_yaw_constraints": {
        "desc": "Display physics-based 'jiggle bone' debugging information",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cl_jiggle_bone_framerate_cutoff": {
        "desc": "Skip jiggle bone simulation if framerate drops below this value (frames/second)",
        "tags": [
            "cl"
        ],
        "value": "45"
    },
    "cl_lagcompensation": {
        "desc": "Perform server side lag compensation of weapon firing events.",
        "tags": [
            "user",
            "cl"
        ],
        "value": "1"
    },
    "cl_language": {
        "desc": "Language (from HKCU\\Software\\Valve\\Steam\\Language)",
        "tags": [
            "user"
        ],
        "value": "0"
    },
    "cl_leveloverview": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cl_leveloverviewmarker": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cl_localnetworkbackdoor": {
        "desc": "Enable network optimizations for single player games.",
        "tags": [],
        "value": "1"
    },
    "cl_logofile": {
        "desc": "Spraypoint logo decal.",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "cl_maxrenderable_dist": {
        "desc": "Max distance from the camera at which things will be rendered",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "3000"
    },
    "cl_meathook_neck_pivot_ingame_fwd": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "3"
    },
    "cl_meathook_neck_pivot_ingame_up": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "7"
    },
    "cl_mouseenable": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "cl_mouselook": {
        "desc": "Set to 1 to use mouse for look, 0 for keyboard look. Cannot be set while connected to a server.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "cl_muzzleflash_dlight_1st": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "cl_mvm_wave_status_visible_during_wave": {
        "desc": "Display full wave contents while a wave is active in MvM.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "cl_new_impact_effects": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_notifications_max_num_visible": {
        "desc": "How many notifications are visible in-game.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "3"
    },
    "cl_notifications_move_time": {
        "desc": "How long it takes for a notification to move.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "cl_notifications_show_ingame": {
        "desc": "Whether notifications should show up in-game.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "cl_obj_fake_alert": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_obj_test_building_damage": {
        "desc": "debug building damage",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "-1"
    },
    "cl_observercrosshair": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "cl_overdraw_test": {
        "desc": "",
        "tags": [
            "cheat",
            "numeric",
            "cl"
        ],
        "value": "0"
    },
    "cl_panelanimation": {
        "desc": "Shows panel animation variables: <panelname | blank for all panels>.",
        "tags": [],
        "value": "cmd"
    },
    "cl_particle_batch_mode": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "cl_particle_retire_cost": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cl_particle_show_bbox": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cl_particle_show_bbox_cost": {
        "desc": "Show # of particles: green->blue->red. Use a negative number to show ALL particles even cheap ones",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cl_particle_stats_start": {
        "desc": "Start or restart particle stats - also dumps to particle_stats.csv",
        "tags": [],
        "value": "cmd"
    },
    "cl_particle_stats_stop": {
        "desc": "Stop particle stats, or snapshot this frame - also dumps to particle_stats.csv",
        "tags": [],
        "value": "cmd"
    },
    "cl_particle_stats_trigger_count": {
        "desc": "Dump stats if the particle count exceeds this number.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_particleeffect_aabb_buffer": {
        "desc": "Add this amount to a particle effect's bbox in the leaf system so if it's growing slowly, it won't have to be reinserted as oft",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "2"
    },
    "cl_pclass": {
        "desc": "Dump entity by prediction classname.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cl_pdump": {
        "desc": "Dump info about this entity to screen.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "-1"
    },
    "cl_phys_props_enable": {
        "desc": "Disable clientside physics props (must be set before loading a level).",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_phys_props_max": {
        "desc": "Maximum clientside physic props",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_phys_props_respawndist": {
        "desc": "Minimum distance from the player that a clientside prop must be before it's allowed to respawn.",
        "tags": [
            "cl"
        ],
        "value": "1500"
    },
    "cl_phys_props_respawnrate": {
        "desc": "Time, in seconds, between clientside prop respawns.",
        "tags": [
            "cl"
        ],
        "value": "60"
    },
    "cl_phys_timescale": {
        "desc": "Sets the scale of time for client-side physics (ragdolls)",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "cl_pitchdown": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "89"
    },
    "cl_pitchspeed": {
        "desc": "Client pitch speed.",
        "tags": [
            "cl"
        ],
        "value": "225"
    },
    "cl_pitchup": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "89"
    },
    "cl_playback_screenshots": {
        "desc": "Allows the client to playback screenshot and jpeg commands in demos.",
        "tags": [],
        "value": "0"
    },
    "cl_playerspraydisable": {
        "desc": "Disable player sprays.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "cl_precacheinfo": {
        "desc": "Show precache info (client).",
        "tags": [],
        "value": "cmd"
    },
    "cl_pred_optimize": {
        "desc": "Optimize for not copying data if didn't receive a network update (1), and also for not repredicting if there were no errors (2)",
        "tags": [
            "cl"
        ],
        "value": "2"
    },
    "cl_pred_track": {
        "desc": "<entindex> <fieldname>:  Track changes to entity index entindex, for field fieldname.",
        "tags": [],
        "value": "cmd"
    },
    "cl_predict": {
        "desc": "Perform client side prediction.",
        "tags": [
            "user",
            "cl"
        ],
        "value": "1"
    },
    "cl_predictionlist": {
        "desc": "Show which entities are predicting",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cl_predictweapons": {
        "desc": "Perform client side prediction of weapon effects.",
        "tags": [
            "user",
            "cl"
        ],
        "value": "1"
    },
    "cl_ragdoll_collide": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_ragdoll_fade_time": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_ragdoll_forcefade": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "cl_ragdoll_physics_enable": {
        "desc": "Enable/disable ragdoll physics.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_ragdoll_pronecheck_distance": {
        "desc": "",
        "tags": [
            "sv",
            "cl"
        ],
        "value": "64"
    },
    "cl_removedecals": {
        "desc": "Remove the decals from the entity under the crosshair.",
        "tags": [],
        "value": "cmd"
    },
    "cl_resend": {
        "desc": "Delay in seconds before the client will resend the 'connect' attempt",
        "tags": [],
        "value": "6"
    },
    "cl_rumblescale": {
        "desc": "Scale sensitivity of rumble effects (0 to 1.0)",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "cl_scalecrosshair": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "cl_screenshotname": {
        "desc": "Custom Screenshot name",
        "tags": [],
        "value": "0"
    },
    "cl_shadowtextureoverlaysize": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "256"
    },
    "cl_show_connectionless_packet_warnings": {
        "desc": "Show console messages about ignored connectionless packets on the client.",
        "tags": [],
        "value": "0"
    },
    "cl_show_market_data_on_items": {
        "desc": "0 = Never. 1 = Only when showing borders for Market-listable items. 2 = Always.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "2"
    },
    "cl_show_num_particle_systems": {
        "desc": "Display the number of active particle systems.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_show_splashes": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "cl_showbackpackrarities": {
        "desc": "0 = Show no backpack icon border colors. 1 = Show item rarities within the backpack. 2 = Show item rarities only for Market-lis",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "cl_showbattery": {
        "desc": "Draw current battery level at top of screen when on battery power",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_showdemooverlay": {
        "desc": "How often to flash demo recording/playback overlay (0 - disable overlay, -1 - show always)",
        "tags": [],
        "value": "0"
    },
    "cl_showents": {
        "desc": "Dump entity list to console.",
        "tags": [],
        "value": "cmd"
    },
    "cl_showerror": {
        "desc": "Show prediction errors, 2 for above plus detailed field deltas.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_showevents": {
        "desc": "Print event firing info in the console",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "cl_showfps": {
        "desc": "Draw fps meter at top of screen (1 = fps, 2 = smooth fps)",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_showhelp": {
        "desc": "Set to 0 to not show on-screen help",
        "tags": [
            "a",
            "user",
            "cl"
        ],
        "value": "1"
    },
    "cl_showpausedimage": {
        "desc": "Show the 'Paused' image when game is paused.",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "cl_showpluginmessages": {
        "desc": "Allow plugins to display messages to you",
        "tags": [
            "a"
        ],
        "value": "1"
    },
    "cl_showpos": {
        "desc": "Draw current position at top of screen",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_showtextmsg": {
        "desc": "Enable/disable text messages printing on the screen.",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "cl_sidespeed": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "450"
    },
    "cl_smooth": {
        "desc": "Smooth view/eye origin after prediction errors",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_smoothtime": {
        "desc": "Smooth client's view after prediction error over this many seconds",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_software_cursor": {
        "desc": "Switches the game to use a larger software cursor instead of the normal OS cursor",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "cl_soundemitter_flush": {
        "desc": "Flushes the sounds.txt system (client only)",
        "tags": [],
        "value": "cmd"
    },
    "cl_soundfile": {
        "desc": "Jingle sound file.",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "cl_soundscape_flush": {
        "desc": "Flushes the client side soundscapes",
        "tags": [],
        "value": "cmd"
    },
    "cl_soundscape_printdebuginfo": {
        "desc": "print soundscapes",
        "tags": [],
        "value": "cmd"
    },
    "cl_spec_carrieditems": {
        "desc": "Show non-standard items being carried by player you're spectating.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "cl_spec_mode": {
        "desc": "spectator mode",
        "tags": [
            "a",
            "user",
            "server_can_execute",
            "cl"
        ],
        "value": "6"
    },
    "cl_sporeclipdistance": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "512"
    },
    "cl_steamscreenshots": {
        "desc": "Enable/disable saving screenshots to Steam",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "cl_sun_decay_rate": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cl_team": {
        "desc": "Default team when joining a game",
        "tags": [
            "a",
            "user",
            "cl"
        ],
        "value": "0"
    },
    "cl_threaded_bone_setup": {
        "desc": "Enable parallel processing of C_BaseAnimating::SetupBones()",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_threaded_client_leaf_system": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_timeout": {
        "desc": "After this many seconds without receiving a packet from the server, the client will disconnect itself",
        "tags": [
            "a"
        ],
        "value": "30"
    },
    "cl_trade": {
        "desc": "Trade with a person by player name",
        "tags": [],
        "value": "cmd"
    },
    "cl_trade_steamid": {
        "desc": "Trade with a person by steam id",
        "tags": [],
        "value": "cmd"
    },
    "cl_trading_show_requests_from": {
        "desc": "View trade requests from a certain group only.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "3"
    },
    "cl_training_class_unlock_all": {
        "desc": "Unlock all training",
        "tags": [],
        "value": "cmd"
    },
    "cl_training_completed_with_classes": {
        "desc": "Bitfield representing what classes have been used to complete training.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "cl_trigger_first_notification": {
        "desc": "Tries to accept/trigger the first notification",
        "tags": [],
        "value": "cmd"
    },
    "cl_updaterate": {
        "desc": "Number of packets per second of updates you are requesting from the server",
        "tags": [
            "a",
            "user"
        ],
        "value": "101"
    },
    "cl_upspeed": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "320"
    },
    "cl_use_tournament_specgui": {
        "desc": "When in tournament mode, use the advanced tournament spectator UI.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "cl_view": {
        "desc": "Set the view entity index.",
        "tags": [],
        "value": "cmd"
    },
    "cl_voice_filter": {
        "desc": "Filter voice by name substring",
        "tags": [],
        "value": "0"
    },
    "cl_vote_ui_active_after_voting": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_vote_ui_show_notification": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "cl_winddir": {
        "desc": "Weather effects wind direction angle",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cl_windspeed": {
        "desc": "Weather effects wind speed scalar",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "cl_yawspeed": {
        "desc": "Client yaw speed.",
        "tags": [
            "cl"
        ],
        "value": "150"
    },
    "clear": {
        "desc": "Clear all console output.",
        "tags": [],
        "value": "cmd"
    },
    "clear_debug_overlays": {
        "desc": "clears debug overlays",
        "tags": [],
        "value": "cmd"
    },
    "clientport": {
        "desc": "Host game client port",
        "tags": [],
        "value": "27005"
    },
    "closecaption": {
        "desc": "Enable close captioning.",
        "tags": [
            "a",
            "user"
        ],
        "value": "1"
    },
    "cmd": {
        "desc": "Forward command to server.",
        "tags": [],
        "value": "cmd"
    },
    "collision_shake_amp": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "collision_shake_freq": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "collision_shake_time": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "collision_test": {
        "desc": "Tests collision system",
        "tags": [],
        "value": "cmd"
    },
    "colorcorrectionui": {
        "desc": "Show/hide the color correction tools UI.",
        "tags": [],
        "value": "cmd"
    },
    "commentary": {
        "desc": "Desired commentary mode state.",
        "tags": [
            "a",
            "sv"
        ],
        "value": "1"
    },
    "commentary_available": {
        "desc": "Automatically set by the game when a commentary file is available for the current map.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "commentary_cvarsnotchanging": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "commentary_finishnode": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "commentary_firstrun": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "commentary_showmodelviewer": {
        "desc": "Display the commentary model viewer. Usage: commentary_showmodelviewer <model name> <optional attached model name>",
        "tags": [],
        "value": "cmd"
    },
    "commentary_testfirstrun": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "con_drawnotify": {
        "desc": "Disables drawing of notification area (for taking screenshots).",
        "tags": [],
        "value": "1"
    },
    "con_enable": {
        "desc": "Allows the console to be activated.",
        "tags": [
            "a"
        ],
        "value": "1"
    },
    "con_filter_enable": {
        "desc": "Filters console output based on the setting of con_filter_text. 1 filters completely, 2 displays filtered text brighter than ot",
        "tags": [],
        "value": "0"
    },
    "con_filter_text": {
        "desc": "Text with which to filter console spew. Set con_filter_enable 1 or 2 to activate.",
        "tags": [],
        "value": "0"
    },
    "con_filter_text_out": {
        "desc": "Text with which to filter OUT of console spew. Set con_filter_enable 1 or 2 to activate.",
        "tags": [],
        "value": "0"
    },
    "con_logfile": {
        "desc": "Console output gets written to this file",
        "tags": [],
        "value": "0"
    },
    "con_notifytime": {
        "desc": "How long to display recent console text to the upper part of the game window",
        "tags": [],
        "value": "8"
    },
    "con_nprint_bgalpha": {
        "desc": "Con_NPrint background alpha.",
        "tags": [],
        "value": "50"
    },
    "con_nprint_bgborder": {
        "desc": "Con_NPrint border size.",
        "tags": [],
        "value": "5"
    },
    "con_timestamp": {
        "desc": "Prefix console.log entries with timestamps",
        "tags": [],
        "value": "0"
    },
    "con_trace": {
        "desc": "Print console text to low level printout.",
        "tags": [],
        "value": "0"
    },
    "condump": {
        "desc": "dump the text currently in the console to condumpXX.log",
        "tags": [],
        "value": "cmd"
    },
    "connect": {
        "desc": "Connect to specified server.",
        "tags": [],
        "value": "cmd"
    },
    "connect_lobby": {
        "desc": "<64-bit lobby ID> Accept friend invite, connecting to specified Steam lobby and joining the corresponding search party",
        "tags": [],
        "value": "cmd"
    },
    "contimes": {
        "desc": "Number of console lines to overlay for debugging.",
        "tags": [],
        "value": "8"
    },
    "coop": {
        "desc": "Cooperative play.",
        "tags": [
            "nf"
        ],
        "value": "0"
    },
    "create_flashlight": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "creditsdone": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "crosshair": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "currency_give": {
        "desc": "Have some in-game money.",
        "tags": [],
        "value": "cmd"
    },
    "cvarlist": {
        "desc": "Show the list of convars/concommands.",
        "tags": [],
        "value": "cmd"
    },
    "datacachesize": {
        "desc": "Size in MB.",
        "tags": [],
        "value": "256"
    },
    "dbg_spew_connected_players_level": {
        "desc": "If enabled, server will spew connected player GC updates",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "dbghist_addline": {
        "desc": "Add a line to the debug history. Format: <category id> <line>",
        "tags": [],
        "value": "cmd"
    },
    "dbghist_dump": {
        "desc": "Dump the debug history to the console. Format: <category id>     Categories:      0: Entity I/O      1: AI Decisions      2: Sc",
        "tags": [],
        "value": "cmd"
    },
    "deathmatch": {
        "desc": "Running a deathmatch server.",
        "tags": [
            "nf"
        ],
        "value": "1"
    },
    "debug_materialmodifycontrol": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "debug_materialmodifycontrol_client": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "debug_physimpact": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "debug_touchlinks": {
        "desc": "Spew touch link activity",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "debugsystemui": {
        "desc": "Show/hide the debug system UI.",
        "tags": [],
        "value": "cmd"
    },
    "decalfrequency": {
        "desc": "",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "10"
    },
    "default_fov": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "90"
    },
    "demo_avellimit": {
        "desc": "Angular velocity limit before eyes considered snapped for demo playback.",
        "tags": [],
        "value": "2000"
    },
    "demo_debug": {
        "desc": "Demo debug info.",
        "tags": [],
        "value": "0"
    },
    "demo_fastforwardfinalspeed": {
        "desc": "Go this fast when starting to hold FF button.",
        "tags": [],
        "value": "20"
    },
    "demo_fastforwardramptime": {
        "desc": "How many seconds it takes to get to full FF speed.",
        "tags": [],
        "value": "5"
    },
    "demo_fastforwardstartspeed": {
        "desc": "Go this fast when starting to hold FF button.",
        "tags": [],
        "value": "2"
    },
    "demo_fov_override": {
        "desc": "If nonzero, this value will be used to override FOV during demo playback.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "demo_gototick": {
        "desc": "Skips to a tick in demo.",
        "tags": [],
        "value": "cmd"
    },
    "demo_interplimit": {
        "desc": "How much origin velocity before it's considered to have 'teleported' causing interpolation to reset.",
        "tags": [],
        "value": "4000"
    },
    "demo_interpolateview": {
        "desc": "Do view interpolation during dem playback.",
        "tags": [],
        "value": "1"
    },
    "demo_legacy_rollback": {
        "desc": "Use legacy view interpolation rollback amount in demo playback.",
        "tags": [],
        "value": "1"
    },
    "demo_pause": {
        "desc": "Pauses demo playback.",
        "tags": [],
        "value": "cmd"
    },
    "demo_pauseatservertick": {
        "desc": "Pauses demo playback at server tick",
        "tags": [],
        "value": "0"
    },
    "demo_quitafterplayback": {
        "desc": "Quits game after demo playback.",
        "tags": [],
        "value": "0"
    },
    "demo_recordcommands": {
        "desc": "Record commands typed at console into .dem files.",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "demo_resume": {
        "desc": "Resumes demo playback.",
        "tags": [],
        "value": "cmd"
    },
    "demo_setendtick": {
        "desc": "Sets end demo playback tick. Set to 0 to disable.",
        "tags": [],
        "value": "cmd"
    },
    "demo_timescale": {
        "desc": "Sets demo replay speed.",
        "tags": [],
        "value": "cmd"
    },
    "demo_togglepause": {
        "desc": "Toggles demo playback.",
        "tags": [],
        "value": "cmd"
    },
    "demolist": {
        "desc": "Print demo sequence list.",
        "tags": [],
        "value": "cmd"
    },
    "demos": {
        "desc": "Demo demo file sequence.",
        "tags": [],
        "value": "cmd"
    },
    "demoui": {
        "desc": "Show/hide the demo player UI.",
        "tags": [],
        "value": "cmd"
    },
    "demoui2": {
        "desc": "Show/hide the advanced demo player UI (demoui2).",
        "tags": [],
        "value": "cmd"
    },
    "developer": {
        "desc": "Set developer message level",
        "tags": [],
        "value": "0"
    },
    "devshots_nextmap": {
        "desc": "Used by the devshots system to go to the next map in the devshots maplist.",
        "tags": [],
        "value": "cmd"
    },
    "devshots_screenshot": {
        "desc": "Used by the -makedevshots system to take a screenshot. For taking your own screenshots, use the 'screenshot' command instead.",
        "tags": [],
        "value": "cmd"
    },
    "differences": {
        "desc": "Show all convars which are not at their default values.",
        "tags": [],
        "value": "cmd"
    },
    "disconnect": {
        "desc": "Disconnect game from server.",
        "tags": [],
        "value": "cmd"
    },
    "disguise": {
        "desc": "Disguises the spy.",
        "tags": [],
        "value": "cmd"
    },
    "disp_dynamic": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "dispcoll_drawplane": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "displaysoundlist": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "dlight_debug": {
        "desc": "Creates a dlight in front of the player",
        "tags": [],
        "value": "cmd"
    },
    "download_debug": {
        "desc": "",
        "tags": [
            "norecord"
        ],
        "value": "0"
    },
    "drawcross": {
        "desc": "Draws a cross at the given location  Arguments: x y z",
        "tags": [],
        "value": "cmd"
    },
    "drawline": {
        "desc": "Draws line between two 3D Points.  Green if no collision  Red is collides with something  Arguments: x1 y1 z1 x2 y2 z2",
        "tags": [],
        "value": "cmd"
    },
    "dropitem": {
        "desc": "Drop the flag.",
        "tags": [],
        "value": "cmd"
    },
    "dsp_automatic": {
        "desc": "",
        "tags": [
            "demo"
        ],
        "value": "0"
    },
    "dsp_db_min": {
        "desc": "",
        "tags": [
            "demo"
        ],
        "value": "80"
    },
    "dsp_db_mixdrop": {
        "desc": "",
        "tags": [
            "demo"
        ],
        "value": "0"
    },
    "dsp_dist_max": {
        "desc": "",
        "tags": [
            "cheat",
            "demo"
        ],
        "value": "1440"
    },
    "dsp_dist_min": {
        "desc": "",
        "tags": [
            "cheat",
            "demo"
        ],
        "value": "0"
    },
    "dsp_enhance_stereo": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "dsp_facingaway": {
        "desc": "",
        "tags": [
            "demo"
        ],
        "value": "0"
    },
    "dsp_mix_max": {
        "desc": "",
        "tags": [
            "demo"
        ],
        "value": "0"
    },
    "dsp_mix_min": {
        "desc": "",
        "tags": [
            "demo"
        ],
        "value": "0"
    },
    "dsp_off": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "dsp_player": {
        "desc": "",
        "tags": [
            "demo",
            "server_can_execute"
        ],
        "value": "0"
    },
    "dsp_reload": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "dsp_room": {
        "desc": "",
        "tags": [
            "demo"
        ],
        "value": "21"
    },
    "dsp_slow_cpu": {
        "desc": "",
        "tags": [
            "a",
            "demo"
        ],
        "value": "1"
    },
    "dsp_spatial": {
        "desc": "",
        "tags": [
            "demo"
        ],
        "value": "40"
    },
    "dsp_speaker": {
        "desc": "",
        "tags": [
            "demo"
        ],
        "value": "50"
    },
    "dsp_vol_2ch": {
        "desc": "",
        "tags": [
            "demo"
        ],
        "value": "1"
    },
    "dsp_vol_4ch": {
        "desc": "",
        "tags": [
            "demo"
        ],
        "value": "0"
    },
    "dsp_vol_5ch": {
        "desc": "",
        "tags": [
            "demo"
        ],
        "value": "0"
    },
    "dsp_volume": {
        "desc": "",
        "tags": [
            "a",
            "demo"
        ],
        "value": "1"
    },
    "dsp_water": {
        "desc": "",
        "tags": [
            "demo"
        ],
        "value": "14"
    },
    "dt_ShowPartialChangeEnts": {
        "desc": "(SP only) - show entities that were copied using small optimized lists (FL_EDICT_PARTIAL_CHANGE).",
        "tags": [],
        "value": "0"
    },
    "dt_UsePartialChangeEnts": {
        "desc": "(SP only) - enable FL_EDICT_PARTIAL_CHANGE optimization.",
        "tags": [],
        "value": "1"
    },
    "dti_flush": {
        "desc": "Write out the datatable instrumentation files (you must run with -dti for this to work).",
        "tags": [],
        "value": "cmd"
    },
    "dtwarning": {
        "desc": "Print data table warnings?",
        "tags": [],
        "value": "0"
    },
    "dtwatchclass": {
        "desc": "Watch all fields encoded with this table.",
        "tags": [],
        "value": "0"
    },
    "dtwatchent": {
        "desc": "Watch this entities data table encoding.",
        "tags": [],
        "value": "-1"
    },
    "dtwatchvar": {
        "desc": "Watch the named variable.",
        "tags": [],
        "value": "0"
    },
    "dump_entity_sizes": {
        "desc": "Print sizeof(entclass)",
        "tags": [],
        "value": "cmd"
    },
    "dump_globals": {
        "desc": "Dump all global entities/states",
        "tags": [],
        "value": "cmd"
    },
    "dump_panels": {
        "desc": "Dump Panel Tree",
        "tags": [],
        "value": "cmd"
    },
    "dump_particlemanifest": {
        "desc": "Dump the list of particles loaded.",
        "tags": [],
        "value": "cmd"
    },
    "dump_x360_cfg": {
        "desc": "Dump X360 config files to disk",
        "tags": [],
        "value": "cmd"
    },
    "dump_x360_saves": {
        "desc": "Dump X360 save games to disk",
        "tags": [],
        "value": "cmd"
    },
    "dumpentityfactories": {
        "desc": "Lists all entity factory names.",
        "tags": [],
        "value": "cmd"
    },
    "dumpeventqueue": {
        "desc": "Dump the contents of the Entity I/O event queue to the console.",
        "tags": [],
        "value": "cmd"
    },
    "dumpgamestringtable": {
        "desc": "Dump the contents of the game string table to the console.",
        "tags": [],
        "value": "cmd"
    },
    "dumplongticks": {
        "desc": "Enables generating minidumps on long ticks.",
        "tags": [],
        "value": "cmd"
    },
    "dumpsavedir": {
        "desc": "List the contents of the save directory in memory",
        "tags": [],
        "value": "cmd"
    },
    "dumpstringtables": {
        "desc": "Print string tables to console.",
        "tags": [],
        "value": "cmd"
    },
    "echo": {
        "desc": "Echo text to console.",
        "tags": [],
        "value": "cmd"
    },
    "econ_show_items_with_tag": {
        "desc": "Lists the item definitions that have a specified tag.",
        "tags": [],
        "value": "cmd"
    },
    "editdemo": {
        "desc": "Edit a recorded demo file (.dem ).",
        "tags": [],
        "value": "cmd"
    },
    "editor_toggle": {
        "desc": "Disables the simulation and returns focus to the editor",
        "tags": [],
        "value": "cmd"
    },
    "enable_debug_overlays": {
        "desc": "Enable rendering of debug overlays",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "endmovie": {
        "desc": "Stop recording movie frames.",
        "tags": [],
        "value": "cmd"
    },
    "engine_no_focus_sleep": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "english": {
        "desc": "If set to 1, running the english language set of assets.",
        "tags": [
            "user",
            "cl"
        ],
        "value": "1"
    },
    "ent_absbox": {
        "desc": "Displays the total bounding box for the given entity(s) in green.  Some entites will also display entity specific overlays.  Ar",
        "tags": [],
        "value": "cmd"
    },
    "ent_attachments": {
        "desc": "Displays the attachment points on an entity.  Arguments:    {entity_name} / {class_name} / no argument picks what player is loo",
        "tags": [],
        "value": "cmd"
    },
    "ent_autoaim": {
        "desc": "Displays the entity's autoaim radius.  Arguments:    {entity_name} / {class_name} / no argument picks what player is looking at",
        "tags": [],
        "value": "cmd"
    },
    "ent_bbox": {
        "desc": "Displays the movement bounding box for the given entity(ies) in orange.  Some entites will also display entity specific overlay",
        "tags": [],
        "value": "cmd"
    },
    "ent_cancelpendingentfires": {
        "desc": "Cancels all ent_fire created outputs that are currently waiting for their delay to expire.",
        "tags": [],
        "value": "cmd"
    },
    "ent_create": {
        "desc": "Creates an entity of the given type where the player is looking.  Additional parameters can be passed in in the form: ent_creat",
        "tags": [],
        "value": "cmd"
    },
    "ent_debugkeys": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "ent_dump": {
        "desc": "Usage:    ent_dump <entity name>",
        "tags": [],
        "value": "cmd"
    },
    "ent_fire": {
        "desc": "Usage:    ent_fire <target> [action] [value] [delay]",
        "tags": [],
        "value": "cmd"
    },
    "ent_info": {
        "desc": "Usage:    ent_info <class name>",
        "tags": [],
        "value": "cmd"
    },
    "ent_keyvalue": {
        "desc": "Applies the comma delimited key=value pairs to the entity with the given Hammer ID.  Format: ent_keyvalue <entity id> <key1> <v",
        "tags": [],
        "value": "cmd"
    },
    "ent_messages": {
        "desc": "Toggles input/output message display for the selected entity(ies).  The name of the entity will be displayed as well as any mes",
        "tags": [],
        "value": "cmd"
    },
    "ent_messages_draw": {
        "desc": "Visualizes all entity input/output activity.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "ent_name": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "ent_orient": {
        "desc": "Orient the specified entity to match the player's angles. By default, only orients target entity's YAW. Use the 'allangles' opt",
        "tags": [],
        "value": "cmd"
    },
    "ent_pause": {
        "desc": "Toggles pausing of input/output message processing for entities.  When turned on processing of all message will stop.  Any mess",
        "tags": [],
        "value": "cmd"
    },
    "ent_pivot": {
        "desc": "Displays the pivot for the given entity(ies).  (y=up=green, z=forward=blue, x=left=red).   Arguments:    {entity_name} / {class",
        "tags": [],
        "value": "cmd"
    },
    "ent_rbox": {
        "desc": "Displays the total bounding box for the given entity(s) in green.  Some entites will also display entity specific overlays.  Ar",
        "tags": [],
        "value": "cmd"
    },
    "ent_remove": {
        "desc": "Removes the given entity(s)  Arguments:    {entity_name} / {class_name} / no argument picks what player is looking at",
        "tags": [],
        "value": "cmd"
    },
    "ent_remove_all": {
        "desc": "Removes all entities of the specified type  Arguments:    {entity_name} / {class_name}",
        "tags": [],
        "value": "cmd"
    },
    "ent_rotate": {
        "desc": "Rotates an entity by a specified # of degrees",
        "tags": [],
        "value": "cmd"
    },
    "ent_setname": {
        "desc": "Sets the targetname of the given entity(s)  Arguments:    {new entity name} {entity_name} / {class_name} / no argument picks wh",
        "tags": [],
        "value": "cmd"
    },
    "ent_show_response_criteria": {
        "desc": "Print, to the console, an entity's current criteria set used to select responses.  Arguments:    {entity_name} / {class_name} /",
        "tags": [],
        "value": "cmd"
    },
    "ent_step": {
        "desc": "When 'ent_pause' is set this will step through one waiting input / output message at a time.",
        "tags": [],
        "value": "cmd"
    },
    "ent_teleport": {
        "desc": "Teleport the specified entity to where the player is looking.  Format: ent_teleport <entity name>",
        "tags": [],
        "value": "cmd"
    },
    "ent_text": {
        "desc": "Displays text debugging information about the given entity(ies) on top of the entity (See Overlay Text)  Arguments:    {entity_",
        "tags": [],
        "value": "cmd"
    },
    "ent_viewoffset": {
        "desc": "Displays the eye position for the given entity(ies) in red.  Arguments:    {entity_name} / {class_name} / no argument picks wha",
        "tags": [],
        "value": "cmd"
    },
    "envmap": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "escape": {
        "desc": "Escape key pressed.",
        "tags": [],
        "value": "cmd"
    },
    "exec": {
        "desc": "Execute script file.",
        "tags": [],
        "value": "cmd"
    },
    "exit": {
        "desc": "Exit the engine.",
        "tags": [],
        "value": "cmd"
    },
    "explode": {
        "desc": "Kills the player with explosive damage",
        "tags": [],
        "value": "cmd"
    },
    "explodevector": {
        "desc": "Kills a player applying an explosive force. Usage: explodevector <player> <x value> <y value> <z value>",
        "tags": [],
        "value": "cmd"
    },
    "fadein": {
        "desc": "fadein {time r g b}: Fades the screen in from black or from the specified color over the given number of seconds.",
        "tags": [],
        "value": "cmd"
    },
    "fadeout": {
        "desc": "fadeout {time r g b}: Fades the screen to black or to the specified color over the given number of seconds.",
        "tags": [],
        "value": "cmd"
    },
    "fast_fogvolume": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "filesystem_buffer_size": {
        "desc": "Size of per file buffers. 0 for none",
        "tags": [],
        "value": "0"
    },
    "filesystem_max_stdio_read": {
        "desc": "",
        "tags": [],
        "value": "16"
    },
    "filesystem_native": {
        "desc": "Use native FS or STDIO",
        "tags": [],
        "value": "1"
    },
    "filesystem_report_buffered_io": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "filesystem_unbuffered_io": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "filesystem_use_overlapped_io": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "find": {
        "desc": "Find concommands with the specified string in their name/help text.",
        "tags": [],
        "value": "cmd"
    },
    "find_ent": {
        "desc": "Find and list all entities with classnames or targetnames that contain the specified substring. Format: find_ent <substring>",
        "tags": [],
        "value": "cmd"
    },
    "find_ent_index": {
        "desc": "Display data for entity matching specified index. Format: find_ent_index <index>",
        "tags": [],
        "value": "cmd"
    },
    "findflags": {
        "desc": "Find concommands by flags.",
        "tags": [],
        "value": "cmd"
    },
    "fire_absorbrate": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "3"
    },
    "fire_dmgbase": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "fire_dmginterval": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "fire_dmgscale": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "fire_extabsorb": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "5"
    },
    "fire_extscale": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "12"
    },
    "fire_growthrate": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "fire_heatscale": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "fire_incomingheatscale": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "fire_maxabsorb": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "50"
    },
    "firetarget": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "firstperson": {
        "desc": "Switch to firstperson camera.",
        "tags": [],
        "value": "cmd"
    },
    "fish_debug": {
        "desc": "Show debug info for fish",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "fish_dormant": {
        "desc": "Turns off interactive fish behavior. Fish become immobile and unresponsive.",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "0"
    },
    "flex_expression": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "flex_looktime": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "5"
    },
    "flex_maxawaytime": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "flex_maxplayertime": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "7"
    },
    "flex_minawaytime": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "flex_minplayertime": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "5"
    },
    "flex_rules": {
        "desc": "Allow flex animation rules to run.",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "flex_smooth": {
        "desc": "Applies smoothing/decay curve to flex animation controller changes.",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "flex_talk": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "flush": {
        "desc": "Flush unlocked cache memory.",
        "tags": [],
        "value": "cmd"
    },
    "flush_locked": {
        "desc": "Flush unlocked and locked cache memory.",
        "tags": [],
        "value": "cmd"
    },
    "fog_color": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "-1"
    },
    "fog_colorskybox": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "-1"
    },
    "fog_enable": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "fog_enable_water_fog": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "fog_enableskybox": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "fog_end": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "-1"
    },
    "fog_endskybox": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "-1"
    },
    "fog_maxdensity": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "-1"
    },
    "fog_maxdensityskybox": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "-1"
    },
    "fog_override": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "fog_start": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "-1"
    },
    "fog_startskybox": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "-1"
    },
    "fogui": {
        "desc": "Show/hide fog control UI.",
        "tags": [],
        "value": "cmd"
    },
    "force_centerview": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "fov": {
        "desc": "Change players FOV",
        "tags": [],
        "value": "cmd"
    },
    "fov_desired": {
        "desc": "Sets the base field-of-view.",
        "tags": [
            "a",
            "user",
            "cl"
        ],
        "value": "90"
    },
    "fps_max": {
        "desc": "Frame rate limiter, cannot be set while connected to a server.",
        "tags": [],
        "value": "300"
    },
    "free_pass_peek_debug": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "fs_monitor_read_from_pack": {
        "desc": "0:Off, 1:Any, 2:Sync only",
        "tags": [],
        "value": "0"
    },
    "fs_printopenfiles": {
        "desc": "Show all files currently opened by the engine.",
        "tags": [],
        "value": "cmd"
    },
    "fs_report_sync_opens": {
        "desc": "0:Off, 1:Always, 2:Not during load",
        "tags": [],
        "value": "0"
    },
    "fs_warning_level": {
        "desc": "Set the filesystem warning level.",
        "tags": [],
        "value": "cmd"
    },
    "fs_warning_mode": {
        "desc": "0:Off, 1:Warn main thread, 2:Warn other threads",
        "tags": [],
        "value": "0"
    },
    "func_break_max_pieces": {
        "desc": "",
        "tags": [
            "a",
            "sv",
            "rep"
        ],
        "value": "15"
    },
    "func_break_reduction_factor": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "func_breakdmg_bullet": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "func_breakdmg_club": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "func_breakdmg_explosive": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "g15_dumpplayer": {
        "desc": "Spew player data.",
        "tags": [],
        "value": "cmd"
    },
    "g15_reload": {
        "desc": "Reloads the Logitech G-15 Keyboard configs.",
        "tags": [],
        "value": "cmd"
    },
    "g15_update_msec": {
        "desc": "Logitech G-15 Keyboard update interval.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "250"
    },
    "g_Language": {
        "desc": "",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "0"
    },
    "g_debug_angularsensor": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "g_debug_constraint_sounds": {
        "desc": "Enable debug printing about constraint sounds.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "g_debug_doors": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "g_debug_npc_vehicle_roles": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "g_debug_ragdoll_removal": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "0"
    },
    "g_debug_ragdoll_visualize": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "g_debug_trackpather": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "g_debug_transitions": {
        "desc": "Set to 1 and restart the map to be warned if the map has no trigger_transition volumes. Set to 2 to see a dump of all entities",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "g_debug_vehiclebase": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "g_debug_vehicledriver": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "g_debug_vehicleexit": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "g_debug_vehiclesound": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "g_ragdoll_fadespeed": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "g_ragdoll_important_maxcount": {
        "desc": "",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "2"
    },
    "g_ragdoll_lvfadespeed": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "g_ragdoll_maxcount": {
        "desc": "",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "8"
    },
    "gamemenucommand": {
        "desc": "Issue game menu command.",
        "tags": [],
        "value": "cmd"
    },
    "gameui_activate": {
        "desc": "Shows the game UI",
        "tags": [],
        "value": "cmd"
    },
    "gameui_allowescape": {
        "desc": "Escape key allowed to hide game UI",
        "tags": [],
        "value": "cmd"
    },
    "gameui_allowescapetoshow": {
        "desc": "Escape key allowed to show game UI",
        "tags": [],
        "value": "cmd"
    },
    "gameui_hide": {
        "desc": "Hides the game UI",
        "tags": [],
        "value": "cmd"
    },
    "gameui_hide_dialog": {
        "desc": "asdf",
        "tags": [],
        "value": "cmd"
    },
    "gameui_preventescape": {
        "desc": "Escape key doesn't hide game UI",
        "tags": [],
        "value": "cmd"
    },
    "gameui_preventescapetoshow": {
        "desc": "Escape key doesn't show game UI",
        "tags": [],
        "value": "cmd"
    },
    "gameui_show_dialog": {
        "desc": "Show an arbitrary Dialog.",
        "tags": [],
        "value": "cmd"
    },
    "gameui_xbox": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "getpos": {
        "desc": "dump position and angles to the console",
        "tags": [],
        "value": "cmd"
    },
    "ghost_spawn": {
        "desc": "Spawns a Ghost where the player is looking.",
        "tags": [],
        "value": "cmd"
    },
    "give": {
        "desc": "Give item to player.  Arguments: <item_name>",
        "tags": [],
        "value": "cmd"
    },
    "givecurrentammo": {
        "desc": "Give a supply of ammo for current weapon..",
        "tags": [],
        "value": "cmd"
    },
    "gl_amd_occlusion_workaround": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "gl_clear": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "gl_clear_randomcolor": {
        "desc": "Clear the back buffer to random colors every frame. Helps spot open seams in geometry.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "global_set": {
        "desc": "global_set <globalname> <state>: Sets the state of the given env_global (0 = OFF, 1 = ON, 2 = DEAD).",
        "tags": [],
        "value": "cmd"
    },
    "glow_outline_effect_enable": {
        "desc": "Enable entity outline glow effects.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "glow_outline_width": {
        "desc": "Width of glow outline effect in screen space.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "10"
    },
    "god": {
        "desc": "Toggle. Player becomes invulnerable.",
        "tags": [],
        "value": "cmd"
    },
    "groundlist": {
        "desc": "Display ground entity list <index>",
        "tags": [],
        "value": "cmd"
    },
    "hammer_update_entity": {
        "desc": "Updates the entity's position/angles when in edit mode",
        "tags": [],
        "value": "cmd"
    },
    "hammer_update_safe_entities": {
        "desc": "Updates entities in the map that can safely be updated (don't have parents or are affected by constraints). Also excludes entit",
        "tags": [],
        "value": "cmd"
    },
    "hap_HasDevice": {
        "desc": "falcon is connected",
        "tags": [
            "user",
            "cl"
        ],
        "value": "0"
    },
    "hap_damagescale_game": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "hap_melee_scale": {
        "desc": "",
        "tags": [
            "numeric",
            "cl"
        ],
        "value": "0"
    },
    "hap_noclip_avatar_scale": {
        "desc": "",
        "tags": [
            "numeric",
            "cl"
        ],
        "value": "0"
    },
    "hap_ui_vehicles": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "heartbeat": {
        "desc": "Force heartbeat of master servers",
        "tags": [],
        "value": "cmd"
    },
    "help": {
        "desc": "Find help about a convar/concommand.",
        "tags": [],
        "value": "cmd"
    },
    "hide_server": {
        "desc": "Whether the server should be hidden from the master server",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "hideconsole": {
        "desc": "Hide the console.",
        "tags": [],
        "value": "cmd"
    },
    "hidehud": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "hidepanel": {
        "desc": "Hides a viewport panel <name>",
        "tags": [],
        "value": "cmd"
    },
    "hl2_episodic": {
        "desc": "",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "0"
    },
    "host_ShowIPCCallCount": {
        "desc": "Print # of IPC calls this number of times per second. If set to -1, the # of IPC calls is shown every frame.",
        "tags": [],
        "value": "0"
    },
    "host_flush_threshold": {
        "desc": "Memory threshold below which the host should flush caches between server instances",
        "tags": [],
        "value": "20"
    },
    "host_framerate": {
        "desc": "Set to lock per-frame time elapse.",
        "tags": [],
        "value": "0"
    },
    "host_limitlocal": {
        "desc": "Apply cl_cmdrate and cl_updaterate to loopback connection",
        "tags": [],
        "value": "0"
    },
    "host_map": {
        "desc": "Current map name.",
        "tags": [],
        "value": "0"
    },
    "host_profile": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "host_runofftime": {
        "desc": "Run off some time without rendering/updating sounds",
        "tags": [],
        "value": "cmd"
    },
    "host_showcachemiss": {
        "desc": "Print a debug message when the client or server cache is missed.",
        "tags": [],
        "value": "0"
    },
    "host_sleep": {
        "desc": "Force the host to sleep a certain number of milliseconds each frame.",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "host_speeds": {
        "desc": "Show general system running times.",
        "tags": [],
        "value": "0"
    },
    "host_thread_mode": {
        "desc": "Run the host in threaded mode, (0 == off, 1 == if multicore, 2 == force)",
        "tags": [],
        "value": "0"
    },
    "host_timer_report": {
        "desc": "Spew CPU timer jitter for the last 128 frames in microseconds (dedicated only)",
        "tags": [],
        "value": "cmd"
    },
    "host_timer_spin_ms": {
        "desc": "Use CPU busy-loop for improved timer precision (dedicated only)",
        "tags": [],
        "value": "0"
    },
    "host_timescale": {
        "desc": "Prescale the clock by this amount.",
        "tags": [
            "rep"
        ],
        "value": "1"
    },
    "host_writeconfig": {
        "desc": "Store current settings to config.cfg (or specified .cfg file).",
        "tags": [],
        "value": "cmd"
    },
    "hostip": {
        "desc": "Host game server ip",
        "tags": [],
        "value": "-1062731520.000"
    },
    "hostname": {
        "desc": "Hostname for server.",
        "tags": [],
        "value": "0"
    },
    "hostport": {
        "desc": "Host game server port",
        "tags": [],
        "value": "27015"
    },
    "hud_achievement_count": {
        "desc": "Max number of achievements that can be shown on the HUD",
        "tags": [
            "a",
            "cl"
        ],
        "value": "8"
    },
    "hud_achievement_count_engineer": {
        "desc": "Max number of achievements that can be shown on the HUD when you're an engineer",
        "tags": [
            "a",
            "cl"
        ],
        "value": "3"
    },
    "hud_achievement_description": {
        "desc": "Show full descriptions of achievements on the HUD",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "hud_achievement_glowtime": {
        "desc": "Duration of glow effect around incremented achievements",
        "tags": [
            "cl"
        ],
        "value": "2"
    },
    "hud_achievement_tracker": {
        "desc": "Show or hide the achievement tracker",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "hud_autoaim_method": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "hud_autoaim_scale_icon": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "hud_autoreloadscript": {
        "desc": "Automatically reloads the animation script each time one is ran",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "hud_classautokill": {
        "desc": "Automatically kill player after choosing a new playerclass.",
        "tags": [
            "a",
            "user",
            "cl"
        ],
        "value": "0"
    },
    "hud_combattext": {
        "desc": "",
        "tags": [
            "a",
            "user",
            "cl"
        ],
        "value": "1"
    },
    "hud_combattext_batching": {
        "desc": "If set to 1, numbers that are too close together are merged.",
        "tags": [
            "a",
            "user",
            "cl"
        ],
        "value": "1"
    },
    "hud_combattext_doesnt_block_overhead_text": {
        "desc": "If set to 1, allow text like 'CRIT' to still show over a victim's head.",
        "tags": [
            "a",
            "user",
            "cl"
        ],
        "value": "0"
    },
    "hud_combattext_healing": {
        "desc": "Shows health restored per-second over heal targets.",
        "tags": [
            "a",
            "user",
            "cl"
        ],
        "value": "1"
    },
    "hud_deathnotice_time": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "6"
    },
    "hud_draw_active_reticle": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "hud_draw_fixed_reticle": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "hud_drawhistory_time": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "5"
    },
    "hud_escort_interp": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "hud_escort_test_progress": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "-1"
    },
    "hud_escort_test_speed": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "-1"
    },
    "hud_fastswitch": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "hud_freezecamhide": {
        "desc": "Hide the HUD during freeze-cam",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "hud_magnetism": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "hud_medicautocallers": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "hud_medicautocallersthreshold": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "50"
    },
    "hud_medichealtargetmarker": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "hud_reloadscheme": {
        "desc": "Reloads hud layout and animation scripts.",
        "tags": [],
        "value": "cmd"
    },
    "hud_reticle_alpha_speed": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "700"
    },
    "hud_reticle_maxalpha": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "255"
    },
    "hud_reticle_minalpha": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "125"
    },
    "hud_reticle_scale": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "hud_saytext_time": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "12"
    },
    "hud_takesshots": {
        "desc": "Auto-save a scoreboard screenshot at the end of a map.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "hurtme": {
        "desc": "Hurts the player.  Arguments: <health to lose>",
        "tags": [],
        "value": "cmd"
    },
    "ifm_basecamera_camerastate": {
        "desc": "Set camera state",
        "tags": [],
        "value": "cmd"
    },
    "ifm_steadycam_2ddragconstant": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "11"
    },
    "ifm_steadycam_2dspringconstant": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "33"
    },
    "ifm_steadycam_armspeed": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "ifm_steadycam_mousefactor": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "ifm_steadycam_mousepower": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "ifm_steadycam_noise": {
        "desc": "",
        "tags": [
            "a",
            "rep",
            "cl"
        ],
        "value": "0"
    },
    "ifm_steadycam_rotatedamp": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "ifm_steadycam_rotaterate": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "60"
    },
    "ifm_steadycam_sensitivity": {
        "desc": "",
        "tags": [
            "a",
            "rep",
            "cl"
        ],
        "value": "1"
    },
    "ifm_steadycam_zoomdamp": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "ifm_steadycam_zoomspeed": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "impulse": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "in_usekeyboardsampletime": {
        "desc": "Use keyboard sample time smoothing.",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "incrementvar": {
        "desc": "Increment specified convar value.",
        "tags": [],
        "value": "cmd"
    },
    "inspect": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "invnext": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "invprev": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "ip": {
        "desc": "Overrides IP for multihomed hosts",
        "tags": [],
        "value": "0"
    },
    "item_show_whitelistable_definitions": {
        "desc": "Lists the item definitions that can be whitelisted in the item_whitelist.txt file in tournament mode.",
        "tags": [],
        "value": "cmd"
    },
    "itemtest": {
        "desc": "Open the item testing panel.",
        "tags": [],
        "value": "cmd"
    },
    "itemtest_botcontrols": {
        "desc": "Open the item testing bot control panel.",
        "tags": [],
        "value": "cmd"
    },
    "join_class": {
        "desc": "Send a joinclass command",
        "tags": [],
        "value": "cmd"
    },
    "joy_accel_filter": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "joy_accelmax": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_accelscale": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "2"
    },
    "joy_active": {
        "desc": "Which of the connected joysticks / gamepads to use (-1 means first found)",
        "tags": [],
        "value": "-1"
    },
    "joy_advanced": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "joy_advaxisr": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_advaxisu": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "4"
    },
    "joy_advaxisv": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_advaxisx": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_advaxisy": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_advaxisz": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_autoaimdampen": {
        "desc": "How much to scale user stick input when the gun is pointing at a valid target.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_autoaimdampenrange": {
        "desc": "The stick range where autoaim dampening is applied. 0 = off",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_autosprint": {
        "desc": "Automatically sprint when moving with an analog joystick",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "joy_axis_deadzone": {
        "desc": "Dead zone near the zero point to not report movement.",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "joy_axisbutton_threshold": {
        "desc": "Analog axis range before a button press is registered.",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "joy_diagonalpov": {
        "desc": "POV manipulator operates on diagonal axes, too.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_display_input": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_forwardsensitivity": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "-1"
    },
    "joy_forwardthreshold": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_gamecontroller_config": {
        "desc": "Game controller mapping (passed to SDL with SDL_HINT_GAMECONTROLLERCONFIG), can also be configured in Steam Big Picture mode.",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "joy_inverty": {
        "desc": "Whether to invert the Y axis of the joystick for looking.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_inverty_default": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "joy_lowend": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "joy_lowmap": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "joy_movement_stick": {
        "desc": "Which stick controls movement (0 is left stick)",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_movement_stick_default": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "joy_name": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_pegged": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "joy_pitchsensitivity": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "joy_pitchsensitivity_default": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "-1"
    },
    "joy_pitchthreshold": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_response_look": {
        "desc": "'Look' stick response mode: 0=Default, 1=Acceleration Promotion",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "joy_response_move": {
        "desc": "'Movement' stick response mode: 0=Linear, 1=quadratic, 2=cubic, 3=quadratic extreme, 4=power function(i.e., pow(x,1/sensitivity",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_response_move_vehicle": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "6"
    },
    "joy_sidesensitivity": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "joy_sidethreshold": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_vehicle_turn_lowend": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "joy_vehicle_turn_lowmap": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "joy_virtual_peg": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "joy_wingmanwarrior_turnhack": {
        "desc": "Wingman warrior hack related to turn axes.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_xcontroller_cfg_loaded": {
        "desc": "If 0, the 360controller.cfg file will be executed on startup & option changes.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joy_xcontroller_found": {
        "desc": "Automatically set to 1 if an xcontroller has been detected.",
        "tags": [],
        "value": "0"
    },
    "joy_yawsensitivity": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "-50"
    },
    "joy_yawsensitivity_default": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "-1"
    },
    "joy_yawthreshold": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "joyadvancedupdate": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "joystick": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "jpeg": {
        "desc": "Take a jpeg screenshot:  jpeg <filename> <quality 1-100>.",
        "tags": [],
        "value": "cmd"
    },
    "jpeg_quality": {
        "desc": "jpeg screenshot quality.",
        "tags": [],
        "value": "100"
    },
    "kdtree_test": {
        "desc": "Tests spatial partition for entities queries.",
        "tags": [],
        "value": "cmd"
    },
    "key_findbinding": {
        "desc": "Find key bound to specified command string.",
        "tags": [],
        "value": "cmd"
    },
    "key_listboundkeys": {
        "desc": "List bound keys with bindings.",
        "tags": [],
        "value": "cmd"
    },
    "key_updatelayout": {
        "desc": "Updates game keyboard layout to current windows keyboard setting.",
        "tags": [],
        "value": "cmd"
    },
    "kick": {
        "desc": "Kick a player by name.",
        "tags": [],
        "value": "cmd"
    },
    "kickall": {
        "desc": "Kicks everybody connected with a message.",
        "tags": [],
        "value": "cmd"
    },
    "kickid": {
        "desc": "Kick a player by userid or uniqueid, with a message.",
        "tags": [],
        "value": "cmd"
    },
    "kill": {
        "desc": "Kills the player with generic damage",
        "tags": [],
        "value": "cmd"
    },
    "killserver": {
        "desc": "Shutdown the server.",
        "tags": [],
        "value": "cmd"
    },
    "killvector": {
        "desc": "Kills a player applying force. Usage: killvector <player> <x value> <y value> <z value>",
        "tags": [],
        "value": "cmd"
    },
    "lastdisguise": {
        "desc": "Disguises the spy as the last disguise.",
        "tags": [],
        "value": "cmd"
    },
    "lastinv": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "light_crosshair": {
        "desc": "Show texture color at crosshair",
        "tags": [],
        "value": "cmd"
    },
    "lightcache_maxmiss": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "2"
    },
    "lightprobe": {
        "desc": "Samples the lighting environment. Creates a cubemap and a file indicating the local lighting in a subdirectory called 'material",
        "tags": [],
        "value": "cmd"
    },
    "linefile": {
        "desc": "Parses map leak data from .lin file",
        "tags": [],
        "value": "cmd"
    },
    "listRecentNPCSpeech": {
        "desc": "Displays a list of the last 5 lines of speech from NPCs.",
        "tags": [],
        "value": "cmd"
    },
    "listdemo": {
        "desc": "List demo file contents.",
        "tags": [],
        "value": "cmd"
    },
    "listid": {
        "desc": "Lists banned users.",
        "tags": [],
        "value": "cmd"
    },
    "listip": {
        "desc": "List IP addresses on the ban list.",
        "tags": [],
        "value": "cmd"
    },
    "listissues": {
        "desc": "List all the issues that can be voted on.",
        "tags": [],
        "value": "cmd"
    },
    "listmodels": {
        "desc": "List loaded models.",
        "tags": [],
        "value": "cmd"
    },
    "load": {
        "desc": "Load a saved game.",
        "tags": [],
        "value": "cmd"
    },
    "load_itempreset": {
        "desc": "Equip all items for a given preset on the player.",
        "tags": [],
        "value": "cmd"
    },
    "loadcommentary": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "loader_dump_table": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "loader_spew_info": {
        "desc": "0:Off, 1:Timing, 2:Completions, 3:Late Completions, 4:Purges, -1:All",
        "tags": [],
        "value": "0"
    },
    "loader_spew_info_ex": {
        "desc": "(internal)",
        "tags": [],
        "value": "0"
    },
    "lod_TransitionDist": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "800"
    },
    "log": {
        "desc": "Enables logging to file, console, and udp < on | off >.",
        "tags": [],
        "value": "cmd"
    },
    "log_verbose_enable": {
        "desc": "Set to 1 to enable verbose server log on the server.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "log_verbose_interval": {
        "desc": "Determines the interval (in seconds) for the verbose server log.",
        "tags": [
            "sv"
        ],
        "value": "3"
    },
    "logaddress_add": {
        "desc": "Set address and port for remote host <ip:port>.",
        "tags": [],
        "value": "cmd"
    },
    "logaddress_del": {
        "desc": "Remove address and port for remote host <ip:port>.",
        "tags": [],
        "value": "cmd"
    },
    "logaddress_delall": {
        "desc": "Remove all udp addresses being logged to",
        "tags": [],
        "value": "cmd"
    },
    "logaddress_list": {
        "desc": "List all addresses currently being used by logaddress.",
        "tags": [],
        "value": "cmd"
    },
    "lookspring": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "lookstrafe": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "lservercfgfile": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "m_customaccel": {
        "desc": "Custom mouse acceleration: 0: custom accelaration disabled 1: mouse_acceleration = min(m_customaccel_max, pow(raw_mouse_delta,",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "m_customaccel_exponent": {
        "desc": "Mouse move is raised to this power before being scaled by scale factor.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "m_customaccel_max": {
        "desc": "Max mouse move scale factor, 0 for no limit",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "m_customaccel_scale": {
        "desc": "Custom mouse acceleration value.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "m_filter": {
        "desc": "Mouse filtering (set this to 1 to average the mouse over 2 frames).",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "m_forward": {
        "desc": "Mouse forward factor.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "m_mouseaccel1": {
        "desc": "Windows mouse acceleration initial threshold (2x movement).",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "m_mouseaccel2": {
        "desc": "Windows mouse acceleration secondary threshold (4x movement).",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "m_mousespeed": {
        "desc": "Windows mouse acceleration (0 to disable, 1 to enable [Windows 2000: enable initial threshold], 2 to enable secondary threshold",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "m_pitch": {
        "desc": "Mouse pitch factor.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "m_rawinput": {
        "desc": "Use Raw Input for mouse input.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "m_side": {
        "desc": "Mouse side factor.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "m_yaw": {
        "desc": "Mouse yaw factor.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "map": {
        "desc": "Start playing on specified map.",
        "tags": [],
        "value": "cmd"
    },
    "map_background": {
        "desc": "Runs a map as the background to the main menu.",
        "tags": [],
        "value": "cmd"
    },
    "map_commentary": {
        "desc": "Start playing, with commentary, on a specified map.",
        "tags": [],
        "value": "cmd"
    },
    "map_edit": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "map_noareas": {
        "desc": "Disable area to area connection testing.",
        "tags": [],
        "value": "0"
    },
    "map_showspawnpoints": {
        "desc": "Dev - test the spawn points, draws for 60 seconds",
        "tags": [],
        "value": "cmd"
    },
    "mapcyclefile": {
        "desc": "Name of the .txt file used to cycle the maps on multiplayer servers",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "maps": {
        "desc": "Displays list of maps.",
        "tags": [],
        "value": "cmd"
    },
    "mat_aaquality": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_accelerate_adjust_exposure_down": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "3"
    },
    "mat_alphacoverage": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "mat_antialias": {
        "desc": "",
        "tags": [],
        "value": "4"
    },
    "mat_autoexposure_max": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "2"
    },
    "mat_autoexposure_min": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "mat_bloom_scalefactor_scalar": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "mat_bloomamount_rate": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "mat_bloomscale": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "mat_bufferprimitives": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "mat_bumpbasis": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_bumpmap": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "mat_camerarendertargetoverlaysize": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "256"
    },
    "mat_clipz": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "mat_colcorrection_disableentities": {
        "desc": "Disable map color-correction entities",
        "tags": [],
        "value": "0"
    },
    "mat_color_projection": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "mat_colorcorrection": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "mat_compressedtextures": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "mat_configcurrent": {
        "desc": "show the current video control panel config for the material system",
        "tags": [],
        "value": "cmd"
    },
    "mat_crosshair": {
        "desc": "Display the name of the material under the crosshair",
        "tags": [],
        "value": "cmd"
    },
    "mat_crosshair_edit": {
        "desc": "open the material under the crosshair in the editor defined by mat_crosshair_edit_editor",
        "tags": [],
        "value": "cmd"
    },
    "mat_crosshair_explorer": {
        "desc": "open the material under the crosshair in explorer and highlight the vmt file",
        "tags": [],
        "value": "cmd"
    },
    "mat_crosshair_printmaterial": {
        "desc": "print the material under the crosshair",
        "tags": [],
        "value": "cmd"
    },
    "mat_crosshair_reloadmaterial": {
        "desc": "reload the material under the crosshair",
        "tags": [],
        "value": "cmd"
    },
    "mat_debug_autoexposure": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "mat_debug_bloom": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "mat_debug_postprocessing_effects": {
        "desc": "0 = off, 1 = show post-processing passes in quadrants of the screen, 2 = only apply post-processing to the centre of the screen",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "mat_debug_process_halfscreen": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "mat_debugalttab": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_debugdepth": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_debugdepthmode": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_debugdepthval": {
        "desc": "",
        "tags": [],
        "value": "128"
    },
    "mat_debugdepthvalmax": {
        "desc": "",
        "tags": [],
        "value": "256"
    },
    "mat_depthbias_decal": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "-262144"
    },
    "mat_depthbias_normal": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_depthbias_shadowmap": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_diffuse": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "mat_disable_bloom": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "mat_disable_d3d9ex": {
        "desc": "Disables Windows Aero DirectX extensions (may positively or negatively affect performance depending on video drivers)",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "mat_disable_fancy_blending": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_disable_lightwarp": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_disable_ps_patch": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_disablehwmorph": {
        "desc": "Disables HW morphing for particular mods",
        "tags": [],
        "value": "0"
    },
    "mat_drawTexture": {
        "desc": "Enable debug view texture",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "mat_drawTextureScale": {
        "desc": "Debug view texture scale",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "mat_drawTitleSafe": {
        "desc": "Enable title safe overlay",
        "tags": [],
        "value": "0"
    },
    "mat_drawflat": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_drawwater": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "mat_dump_rts": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "mat_dxlevel": {
        "desc": "",
        "tags": [
            "sp"
        ],
        "value": "95"
    },
    "mat_dynamic_tonemapping": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "mat_edit": {
        "desc": "Bring up the material under the crosshair in the editor",
        "tags": [],
        "value": "cmd"
    },
    "mat_enable_vrmode": {
        "desc": "Switches the material system to VR mode (after restart)",
        "tags": [],
        "value": "cmd"
    },
    "mat_envmapsize": {
        "desc": "",
        "tags": [],
        "value": "128"
    },
    "mat_envmaptgasize": {
        "desc": "",
        "tags": [],
        "value": "32"
    },
    "mat_excludetextures": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_exposure_center_region_x": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "mat_exposure_center_region_x_flashlight": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "mat_exposure_center_region_y": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "mat_exposure_center_region_y_flashlight": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "mat_fastclip": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_fastnobump": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_fastspecular": {
        "desc": "Enable/Disable specularity for visual testing.  Will not reload materials and will not affect perf.",
        "tags": [],
        "value": "1"
    },
    "mat_fillrate": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_filterlightmaps": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "mat_filtertextures": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "mat_force_bloom": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "mat_force_ps_patch": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_force_tonemap_scale": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_forceaniso": {
        "desc": "",
        "tags": [],
        "value": "4"
    },
    "mat_forcedynamic": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_forcehardwaresync": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "mat_forcemanagedtextureintohardware": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_frame_sync_enable": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "mat_frame_sync_force_texture": {
        "desc": "Force frame syncing to lock a managed texture.",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_framebuffercopyoverlaysize": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "256"
    },
    "mat_fullbright": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_hdr_enabled": {
        "desc": "Report if HDR is enabled for debugging",
        "tags": [],
        "value": "cmd"
    },
    "mat_hdr_level": {
        "desc": "Set to 0 for no HDR, 1 for LDR+bloom on HDR maps, and 2 for full HDR on HDR maps.",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "mat_hdr_manual_tonemap_rate": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "mat_hdr_tonemapscale": {
        "desc": "The HDR tonemap scale. 1 = Use autoexposure, 0 = eyes fully closed, 16 = eyes wide open.",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "mat_hdr_uncapexposure": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "mat_hsv": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "mat_info": {
        "desc": "Shows material system info",
        "tags": [],
        "value": "cmd"
    },
    "mat_leafvis": {
        "desc": "Draw wireframe of current leaf",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_levelflush": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "mat_lightmap_pfms": {
        "desc": "Outputs .pfm files containing lightmap data for each lightmap page when a level exits.",
        "tags": [],
        "value": "0"
    },
    "mat_loadtextures": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "mat_luxels": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_managedtextures": {
        "desc": "If set, allows Direct3D to manage texture uploading at the cost of extra system memory",
        "tags": [
            "a"
        ],
        "value": "1"
    },
    "mat_max_worldmesh_vertices": {
        "desc": "",
        "tags": [],
        "value": "65536"
    },
    "mat_maxframelatency": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "mat_measurefillrate": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_mipmaptextures": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "mat_monitorgamma": {
        "desc": "monitor gamma (typically 2.2 for CRT and 1.7 for LCD)",
        "tags": [],
        "value": "2"
    },
    "mat_monitorgamma_tv_enabled": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "mat_monitorgamma_tv_exp": {
        "desc": "",
        "tags": [],
        "value": "2"
    },
    "mat_monitorgamma_tv_range_max": {
        "desc": "",
        "tags": [],
        "value": "255"
    },
    "mat_monitorgamma_tv_range_min": {
        "desc": "",
        "tags": [],
        "value": "16"
    },
    "mat_morphstats": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_motion_blur_enabled": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_motion_blur_falling_intensity": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "mat_motion_blur_falling_max": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "mat_motion_blur_falling_min": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "mat_motion_blur_forward_enabled": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "mat_motion_blur_percent_of_screen_max": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_motion_blur_rotation_intensity": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "mat_motion_blur_strength": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "mat_non_hdr_bloom_scalefactor": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "mat_norendering": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_normalmaps": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_normals": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_parallaxmap": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_phong": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "mat_picmip": {
        "desc": "",
        "tags": [],
        "value": "2"
    },
    "mat_postprocess_x": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "4"
    },
    "mat_postprocess_y": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "mat_postprocessing_combine": {
        "desc": "Combine bloom, software anti-aliasing and color correction into one post-processing pass",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "mat_powersavingsmode": {
        "desc": "Power Savings Mode",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "mat_proxy": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_queue_mode": {
        "desc": "The queue/thread mode the material system should use: -1=default, 0=synchronous single thread, 2=queued multithreaded",
        "tags": [
            "a"
        ],
        "value": "2"
    },
    "mat_queue_report": {
        "desc": "Report thread stalls.  Positive number will filter by stalls >= time in ms.  -1 reports all locks.",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "mat_reducefillrate": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "mat_reduceparticles": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_reloadallmaterials": {
        "desc": "Reloads all materials",
        "tags": [],
        "value": "cmd"
    },
    "mat_reloadmaterial": {
        "desc": "Reloads a single material",
        "tags": [],
        "value": "cmd"
    },
    "mat_reloadtextures": {
        "desc": "Reloads all textures",
        "tags": [],
        "value": "cmd"
    },
    "mat_remoteshadercompile": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "127"
    },
    "mat_report_queue_status": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_reporthwmorphmemory": {
        "desc": "Reports the amount of size in bytes taken up by hardware morph textures.",
        "tags": [],
        "value": "cmd"
    },
    "mat_reset_rendertargets": {
        "desc": "Resets all the render targets",
        "tags": [],
        "value": "cmd"
    },
    "mat_reversedepth": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_savechanges": {
        "desc": "saves current video configuration to the registry",
        "tags": [],
        "value": "cmd"
    },
    "mat_setvideomode": {
        "desc": "sets the width, height, windowed state of the material system",
        "tags": [],
        "value": "cmd"
    },
    "mat_shadercount": {
        "desc": "display count of all shaders and reset that count",
        "tags": [],
        "value": "cmd"
    },
    "mat_shadowstate": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "mat_show_ab_hdr": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_show_ab_hdr_hudelement": {
        "desc": "HDR Demo HUD Element toggle.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "mat_show_histogram": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "mat_show_texture_memory_usage": {
        "desc": "Display the texture memory usage on the HUD.",
        "tags": [
            "cheat",
            "numeric"
        ],
        "value": "0"
    },
    "mat_showcamerarendertarget": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "mat_showenvmapmask": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_showframebuffertexture": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "mat_showlightmappage": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "-1"
    },
    "mat_showlowresimage": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_showmaterials": {
        "desc": "Show materials.",
        "tags": [],
        "value": "cmd"
    },
    "mat_showmaterialsverbose": {
        "desc": "Show materials (verbose version).",
        "tags": [],
        "value": "cmd"
    },
    "mat_showmiplevels": {
        "desc": "color-code miplevels 2: normalmaps, 1: everything else",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_showtextures": {
        "desc": "Show used textures.",
        "tags": [],
        "value": "cmd"
    },
    "mat_showwatertextures": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "mat_slopescaledepthbias_decal": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_slopescaledepthbias_normal": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_slopescaledepthbias_shadowmap": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "16"
    },
    "mat_software_aa_blur_one_pixel_lines": {
        "desc": "How much software AA should blur one-pixel thick lines: (0.0 - none), (1.0 - lots)",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "mat_software_aa_debug": {
        "desc": "Software AA debug mode: (0 - off), (1 - show number of 'unlike' samples: 0->black, 1->red, 2->green, 3->blue), (2 - show anti-a",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "mat_software_aa_edge_threshold": {
        "desc": "Software AA - adjusts the sensitivity of the software AA shader's edge detection (default 1.0 - a lower value will soften more",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "mat_software_aa_quality": {
        "desc": "Software AA quality mode: (0 - 5-tap filter), (1 - 9-tap filter)",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "mat_software_aa_strength": {
        "desc": "Software AA - perform a software anti-aliasing post-process (an alternative/supplement to MSAA). This value sets the strength o",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "mat_software_aa_strength_vgui": {
        "desc": "Same as mat_software_aa_strength, but forced to this value when called by the post vgui AA pass.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "mat_software_aa_tap_offset": {
        "desc": "Software AA - adjusts the displacement of the taps used by the software AA shader (default 1.0 - a lower value will make the im",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "mat_softwarelighting": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_softwareskin": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_specular": {
        "desc": "Enable/Disable specularity for perf testing.  Will cause a material reload upon change.",
        "tags": [],
        "value": "1"
    },
    "mat_spew_on_texture_size": {
        "desc": "Print warnings about vtf content that isn't of the expected size",
        "tags": [],
        "value": "0"
    },
    "mat_spewvertexandpixelshaders": {
        "desc": "Print all vertex and pixel shaders currently loaded to the console",
        "tags": [],
        "value": "cmd"
    },
    "mat_stub": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "mat_supportflashlight": {
        "desc": "0 - do not support flashlight (don't load flashlight shader combos), 1 - flashlight is supported",
        "tags": [],
        "value": "0"
    },
    "mat_surfaceid": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_surfacemat": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_texture_limit": {
        "desc": "If this value is not -1, the material system will limit the amount of texture memory it uses in a frame. Useful for identifying",
        "tags": [
            "numeric"
        ],
        "value": "-1"
    },
    "mat_texture_list": {
        "desc": "For debugging, show a list of used textures per frame",
        "tags": [],
        "value": "0"
    },
    "mat_texture_list_all": {
        "desc": "If this is nonzero, then the texture list panel will show all currently-loaded textures.",
        "tags": [
            "numeric"
        ],
        "value": "0"
    },
    "mat_texture_list_content_path": {
        "desc": "The content path to the materialsrc directory. If left unset, it'll assume your content directory is next to the currently runn",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "mat_texture_list_txlod": {
        "desc": "Adjust LOD of the last viewed texture +1 to inc resolution, -1 to dec resolution",
        "tags": [],
        "value": "cmd"
    },
    "mat_texture_list_txlod_sync": {
        "desc": "'reset' - resets all run-time changes to LOD overrides, 'save' - saves all changes to material content files",
        "tags": [],
        "value": "cmd"
    },
    "mat_texture_list_view": {
        "desc": "If this is nonzero, then the texture list panel will render thumbnails of currently-loaded textures.",
        "tags": [
            "numeric"
        ],
        "value": "1"
    },
    "mat_texture_save_fonts": {
        "desc": "Save all font textures",
        "tags": [],
        "value": "cmd"
    },
    "mat_tonemap_algorithm": {
        "desc": "0 = Original Algorithm 1 = New Algorithm",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "mat_tonemap_min_avglum": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "3"
    },
    "mat_tonemap_percent_bright_pixels": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "2"
    },
    "mat_tonemap_percent_target": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "60"
    },
    "mat_tonemapping_occlusion_use_stencil": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_trilinear": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mat_use_compressed_hdr_textures": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "mat_viewportscale": {
        "desc": "Scale down the main viewport (to reduce GPU impact on CPU profiling)",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "mat_viewportupscale": {
        "desc": "Scale the viewport back up",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "mat_visualize_dof": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_vrmode_adapter": {
        "desc": "",
        "tags": [],
        "value": "-1"
    },
    "mat_vsync": {
        "desc": "Force sync to vertical retrace",
        "tags": [],
        "value": "0"
    },
    "mat_wateroverlaysize": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "256"
    },
    "mat_wireframe": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mat_yuv": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "matchmakingport": {
        "desc": "Host Matchmaking port",
        "tags": [],
        "value": "27025"
    },
    "maxplayers": {
        "desc": "Change the maximum number of players allowed on this server.",
        "tags": [],
        "value": "cmd"
    },
    "mem_compact": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "mem_dump": {
        "desc": "Dump memory stats to text file.",
        "tags": [],
        "value": "cmd"
    },
    "mem_dumpstats": {
        "desc": "Dump current and max heap usage info to console at end of frame ( set to 2 for continuous output )",
        "tags": [],
        "value": "0"
    },
    "mem_dumpvballocs": {
        "desc": "Dump VB memory allocation stats.",
        "tags": [],
        "value": "cmd"
    },
    "mem_eat": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "mem_force_flush": {
        "desc": "Force cache flush of unlocked resources on every alloc",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "mem_max_heapsize": {
        "desc": "Maximum amount of memory to dedicate to engine hunk and datacache (in mb)",
        "tags": [],
        "value": "256"
    },
    "mem_max_heapsize_dedicated": {
        "desc": "Maximum amount of memory to dedicate to engine hunk and datacache, for dedicated server (in mb)",
        "tags": [],
        "value": "64"
    },
    "mem_min_heapsize": {
        "desc": "Minimum amount of memory to dedicate to engine hunk and datacache (in mb)",
        "tags": [],
        "value": "144"
    },
    "mem_periodicdumps": {
        "desc": "Write periodic memstats dumps every n seconds.",
        "tags": [],
        "value": "0"
    },
    "mem_test": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "mem_test_each_frame": {
        "desc": "Run heap check at end of every frame",
        "tags": [],
        "value": "0"
    },
    "mem_test_every_n_seconds": {
        "desc": "Run heap check at a specified interval",
        "tags": [],
        "value": "0"
    },
    "mem_vcollide": {
        "desc": "Dumps the memory used by vcollides",
        "tags": [],
        "value": "cmd"
    },
    "memory": {
        "desc": "Print memory stats.",
        "tags": [],
        "value": "cmd"
    },
    "memory_diff": {
        "desc": "show memory stats relative to snapshot",
        "tags": [],
        "value": "cmd"
    },
    "memory_list": {
        "desc": "dump memory list (linux only)",
        "tags": [],
        "value": "cmd"
    },
    "memory_mark": {
        "desc": "snapshot current allocation status",
        "tags": [],
        "value": "cmd"
    },
    "memory_status": {
        "desc": "show memory stats (linux only)",
        "tags": [],
        "value": "cmd"
    },
    "menuselect": {
        "desc": "menuselect",
        "tags": [],
        "value": "cmd"
    },
    "minisave": {
        "desc": "Saves game (for current level only!)",
        "tags": [],
        "value": "cmd"
    },
    "mission_list": {
        "desc": "List all available tactical missions",
        "tags": [],
        "value": "cmd"
    },
    "mission_show": {
        "desc": "Show the given mission",
        "tags": [],
        "value": "cmd"
    },
    "mm_add_item": {
        "desc": "Add a stats item",
        "tags": [],
        "value": "cmd"
    },
    "mm_add_player": {
        "desc": "Add a player",
        "tags": [],
        "value": "cmd"
    },
    "mm_max_spectators": {
        "desc": "Max players allowed on the spectator team",
        "tags": [],
        "value": "4"
    },
    "mm_message": {
        "desc": "Send a message to all remote clients",
        "tags": [],
        "value": "cmd"
    },
    "mm_minplayers": {
        "desc": "Number of players required to start an unranked game",
        "tags": [],
        "value": "2"
    },
    "mm_select_session": {
        "desc": "Select a session",
        "tags": [],
        "value": "cmd"
    },
    "mm_session_info": {
        "desc": "Dump session information",
        "tags": [],
        "value": "cmd"
    },
    "mm_stats": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "mod_forcedata": {
        "desc": "Forces all model file data into cache on model load.",
        "tags": [],
        "value": "1"
    },
    "mod_forcetouchdata": {
        "desc": "Forces all model file data into cache on model load.",
        "tags": [],
        "value": "1"
    },
    "mod_load_anims_async": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mod_load_fakestall": {
        "desc": "Forces all ANI file loading to stall for specified ms",
        "tags": [],
        "value": "0"
    },
    "mod_load_mesh_async": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mod_load_showstall": {
        "desc": "1 - show hitches , 2 - show stalls",
        "tags": [],
        "value": "0"
    },
    "mod_load_vcollide_async": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mod_lock_mdls_on_load": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mod_test_mesh_not_available": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mod_test_not_available": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mod_test_verts_not_available": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "mod_touchalldata": {
        "desc": "Touch model data during level startup",
        "tags": [],
        "value": "1"
    },
    "mod_trace_load": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "model_list": {
        "desc": "Dump model list to file",
        "tags": [],
        "value": "cmd"
    },
    "motdfile": {
        "desc": "The MOTD file to load.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "motdfile_text": {
        "desc": "The text-only MOTD file to use for clients that have disabled HTML MOTDs.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "movie_fixwave": {
        "desc": "Fixup corrupted .wav file if engine crashed during startmovie/endmovie, etc.",
        "tags": [],
        "value": "cmd"
    },
    "mp_allowNPCs": {
        "desc": "",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "1"
    },
    "mp_allowspectators": {
        "desc": "toggles whether the server allows spectator mode or not",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "mp_autocrosshair": {
        "desc": "",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "1"
    },
    "mp_autoteambalance": {
        "desc": "",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "1"
    },
    "mp_bonusroundtime": {
        "desc": "Time after round win until round restarts",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "15"
    },
    "mp_chattime": {
        "desc": "amount of time players can chat after the game is over",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "10"
    },
    "mp_clan_ready_signal": {
        "desc": "Text that team leader from each team must speak for the match to begin",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "mp_clan_readyrestart": {
        "desc": "If non-zero, game will restart once someone from each team gives the ready signal",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "mp_decals": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "1"
    },
    "mp_defaultteam": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "mp_disable_autokick": {
        "desc": "Prevents a userid from being auto-kicked",
        "tags": [],
        "value": "cmd"
    },
    "mp_disable_respawn_times": {
        "desc": "",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "mp_enableroundwaittime": {
        "desc": "Enable timers to wait between rounds.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "mp_fadetoblack": {
        "desc": "fade a player's screen to black when he dies",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "mp_falldamage": {
        "desc": "",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "0"
    },
    "mp_flashlight": {
        "desc": "",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "0"
    },
    "mp_footsteps": {
        "desc": "",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "1"
    },
    "mp_forceautoteam": {
        "desc": "Automatically assign players to teams when joining.",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "mp_forcecamera": {
        "desc": "Restricts spectator modes for dead players",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "mp_forcerespawn": {
        "desc": "",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "1"
    },
    "mp_forcerespawnplayers": {
        "desc": "Force all players to respawn.",
        "tags": [],
        "value": "cmd"
    },
    "mp_forcewin": {
        "desc": "Forces team to win",
        "tags": [],
        "value": "cmd"
    },
    "mp_fraglimit": {
        "desc": "The number of kills at which the map ends",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "mp_friendlyfire": {
        "desc": "Allows team members to injure other members of their team",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "mp_highlander": {
        "desc": "Allow only 1 of each player class type.",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "mp_holiday_nogifts": {
        "desc": "Set to 1 to prevent holiday gifts from spawning when players are killed.",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "0"
    },
    "mp_humans_must_join_team": {
        "desc": "Restricts human players to a single team {any, blue, red, spectator}",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "0"
    },
    "mp_idledealmethod": {
        "desc": "Deals with Idle Players. 1 = Sends them into Spectator mode then kicks them if they're still idle, 2 = Kicks them out of the ga",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "mp_idlemaxtime": {
        "desc": "Maximum time a player is allowed to be idle (in minutes)",
        "tags": [
            "sv"
        ],
        "value": "3"
    },
    "mp_mapcycle_empty_timeout_seconds": {
        "desc": "If nonzero, server will cycle to the next map if it has been empty on the current map for N seconds",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "0"
    },
    "mp_match_end_at_timelimit": {
        "desc": "Allow the match to end when mp_timelimit hits instead of waiting for the end of the current round.",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "0"
    },
    "mp_maxrounds": {
        "desc": "max number of rounds to play before server changes maps",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "mp_respawnwavetime": {
        "desc": "Time between respawn waves.",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "10"
    },
    "mp_restartgame": {
        "desc": "If non-zero, game will restart in the specified number of seconds",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "mp_restartgame_immediate": {
        "desc": "If non-zero, game will restart immediately",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "mp_restartround": {
        "desc": "If non-zero, the current round will restart in the specified number of seconds",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "mp_scrambleteams": {
        "desc": "Scramble the teams and restart the game",
        "tags": [],
        "value": "cmd"
    },
    "mp_scrambleteams_auto": {
        "desc": "Server will automatically scramble the teams if criteria met.  Only works on dedicated servers.",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "1"
    },
    "mp_scrambleteams_auto_windifference": {
        "desc": "Number of round wins a team must lead by in order to trigger an auto scramble.",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "2"
    },
    "mp_show_voice_icons": {
        "desc": "Show overhead player voice icons when players are speaking.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "mp_showrespawntimes": {
        "desc": "Show the min respawn times for the teams",
        "tags": [],
        "value": "cmd"
    },
    "mp_simulatemultiplecappers": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "mp_stalemate_enable": {
        "desc": "Enable/Disable stalemate mode.",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "0"
    },
    "mp_stalemate_meleeonly": {
        "desc": "Restrict everyone to melee weapons only while in Sudden Death.",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "mp_stalemate_timelimit": {
        "desc": "Timelimit (in seconds) of the stalemate round.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "240"
    },
    "mp_switchteams": {
        "desc": "Switch teams and restart the game",
        "tags": [],
        "value": "cmd"
    },
    "mp_teamlist": {
        "desc": "",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "0"
    },
    "mp_teamoverride": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "mp_teamplay": {
        "desc": "",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "0"
    },
    "mp_teams_unbalance_limit": {
        "desc": "Teams are unbalanced when one team has this many more players than the other team. (0 disables check)",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "1"
    },
    "mp_time_between_capscoring": {
        "desc": "Delay between scoring of owned capture points.",
        "tags": [
            "sv"
        ],
        "value": "30"
    },
    "mp_timelimit": {
        "desc": "game time per map in minutes",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "mp_tournament": {
        "desc": "",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "1"
    },
    "mp_tournament_allow_non_admin_restart": {
        "desc": "Allow mp_tournament_restart command to be issued by players other than admin.",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "mp_tournament_restart": {
        "desc": "Restart Tournament Mode on the current level.",
        "tags": [],
        "value": "cmd"
    },
    "mp_tournament_stopwatch": {
        "desc": "",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "1"
    },
    "mp_tournament_whitelist": {
        "desc": "Specifies the item whitelist file to use.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "mp_usehwmmodels": {
        "desc": "Enable the use of the hw morph models. (-1 = never, 1 = always, 0 = based upon GPU)",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "mp_usehwmvcds": {
        "desc": "Enable the use of the hw morph vcd(s). (-1 = never, 1 = always, 0 = based upon GPU)",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "mp_waitingforplayers_cancel": {
        "desc": "Set to 1 to end the WaitingForPlayers period.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "mp_waitingforplayers_restart": {
        "desc": "Set to 1 to start or restart the WaitingForPlayers period.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "mp_weaponstay": {
        "desc": "",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "0"
    },
    "mp_windifference": {
        "desc": "Score difference between teams before server changes maps",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "mp_windifference_min": {
        "desc": "Minimum score needed for mp_windifference to be applied",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "mp_winlimit": {
        "desc": "Max score one team can reach before server changes maps",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "multvar": {
        "desc": "Multiply specified convar value.",
        "tags": [],
        "value": "cmd"
    },
    "muzzleflash_light": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "name": {
        "desc": "Current user name",
        "tags": [
            "a",
            "user",
            "print",
            "server_can_execute"
        ],
        "value": "0"
    },
    "nav_add_to_selected_set": {
        "desc": "Add current area to the selected set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_add_to_selected_set_by_id": {
        "desc": "Add specified area id to the selected set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_analyze": {
        "desc": "Re-analyze the current Navigation Mesh and save it to disk.",
        "tags": [],
        "value": "cmd"
    },
    "nav_area_bgcolor": {
        "desc": "RGBA color to draw as the background color for nav areas while editing.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_area_max_size": {
        "desc": "Max area size created in nav generation",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "50"
    },
    "nav_avoid": {
        "desc": "Toggles the 'avoid this area when possible' flag used by the AI system.",
        "tags": [],
        "value": "cmd"
    },
    "nav_begin_area": {
        "desc": "Defines a corner of a new Area or Ladder. To complete the Area or Ladder, drag the opposite corner to the desired location and",
        "tags": [],
        "value": "cmd"
    },
    "nav_begin_deselecting": {
        "desc": "Start continuously removing from the selected set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_begin_drag_deselecting": {
        "desc": "Start dragging a selection area.",
        "tags": [],
        "value": "cmd"
    },
    "nav_begin_drag_selecting": {
        "desc": "Start dragging a selection area.",
        "tags": [],
        "value": "cmd"
    },
    "nav_begin_selecting": {
        "desc": "Start continuously adding to the selected set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_begin_shift_xy": {
        "desc": "Begin shifting the Selected Set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_build_ladder": {
        "desc": "Attempts to build a nav ladder on the climbable surface under the cursor.",
        "tags": [],
        "value": "cmd"
    },
    "nav_check_file_consistency": {
        "desc": "Scans the maps directory and reports any missing/out-of-date navigation files.",
        "tags": [],
        "value": "cmd"
    },
    "nav_check_floor": {
        "desc": "Updates the blocked/unblocked status for every nav area.",
        "tags": [],
        "value": "cmd"
    },
    "nav_check_stairs": {
        "desc": "Update the nav mesh STAIRS attribute",
        "tags": [],
        "value": "cmd"
    },
    "nav_chop_selected": {
        "desc": "Chops all selected areas into their component 1x1 areas",
        "tags": [],
        "value": "cmd"
    },
    "nav_clear_attribute": {
        "desc": "Remove given nav attribute from all areas in the selected set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_clear_selected_set": {
        "desc": "Clear the selected set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_clear_walkable_marks": {
        "desc": "Erase any previously placed walkable positions.",
        "tags": [],
        "value": "cmd"
    },
    "nav_compress_id": {
        "desc": "Re-orders area and ladder ID's so they are continuous.",
        "tags": [],
        "value": "cmd"
    },
    "nav_connect": {
        "desc": "To connect two Areas, mark the first Area, highlight the second Area, then invoke the connect command. Note that this creates a",
        "tags": [],
        "value": "cmd"
    },
    "nav_coplanar_slope_limit": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_coplanar_slope_limit_displacement": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_corner_adjust_adjacent": {
        "desc": "radius used to raise/lower corners in nearby areas when raising/lowering corners.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "18"
    },
    "nav_corner_lower": {
        "desc": "Lower the selected corner of the currently marked Area.",
        "tags": [],
        "value": "cmd"
    },
    "nav_corner_place_on_ground": {
        "desc": "Places the selected corner of the currently marked Area on the ground.",
        "tags": [],
        "value": "cmd"
    },
    "nav_corner_raise": {
        "desc": "Raise the selected corner of the currently marked Area.",
        "tags": [],
        "value": "cmd"
    },
    "nav_corner_select": {
        "desc": "Select a corner of the currently marked Area. Use multiple times to access all four corners.",
        "tags": [],
        "value": "cmd"
    },
    "nav_create_area_at_feet": {
        "desc": "Anchor nav_begin_area Z to editing player's feet",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_create_place_on_ground": {
        "desc": "If true, nav areas will be placed flush with the ground when created by hand.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_crouch": {
        "desc": "Toggles the 'must crouch in this area' flag used by the AI system.",
        "tags": [],
        "value": "cmd"
    },
    "nav_debug_blocked": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_delete": {
        "desc": "Deletes the currently highlighted Area.",
        "tags": [],
        "value": "cmd"
    },
    "nav_delete_marked": {
        "desc": "Deletes the currently marked Area (if any).",
        "tags": [],
        "value": "cmd"
    },
    "nav_disconnect": {
        "desc": "To disconnect two Areas, mark an Area, highlight a second Area, then invoke the disconnect command. This will remove all connec",
        "tags": [],
        "value": "cmd"
    },
    "nav_disconnect_outgoing_oneways": {
        "desc": "For each area in the selected set, disconnect all outgoing one-way connections.",
        "tags": [],
        "value": "cmd"
    },
    "nav_displacement_test": {
        "desc": "Checks for nodes embedded in displacements (useful for in-development maps)",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "10000"
    },
    "nav_dont_hide": {
        "desc": "Toggles the 'area is not suitable for hiding spots' flag used by the AI system.",
        "tags": [],
        "value": "cmd"
    },
    "nav_drag_selection_volume_zmax_offset": {
        "desc": "The offset of the nav drag volume top from center",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "32"
    },
    "nav_drag_selection_volume_zmin_offset": {
        "desc": "The offset of the nav drag volume bottom from center",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "32"
    },
    "nav_draw_limit": {
        "desc": "The maximum number of areas to draw in edit mode",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "500"
    },
    "nav_dump_selected_set_positions": {
        "desc": "Write the (x,y,z) coordinates of the centers of all selected nav areas to a file.",
        "tags": [],
        "value": "cmd"
    },
    "nav_edit": {
        "desc": "Set to one to interactively edit the Navigation Mesh. Set to zero to leave edit mode.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_end_area": {
        "desc": "Defines the second corner of a new Area or Ladder and creates it.",
        "tags": [],
        "value": "cmd"
    },
    "nav_end_deselecting": {
        "desc": "Stop continuously removing from the selected set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_end_drag_deselecting": {
        "desc": "Stop dragging a selection area.",
        "tags": [],
        "value": "cmd"
    },
    "nav_end_drag_selecting": {
        "desc": "Stop dragging a selection area.",
        "tags": [],
        "value": "cmd"
    },
    "nav_end_selecting": {
        "desc": "Stop continuously adding to the selected set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_end_shift_xy": {
        "desc": "Finish shifting the Selected Set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_flood_select": {
        "desc": "Selects the current Area and all Areas connected to it, recursively. To clear a selection, use this command again.",
        "tags": [],
        "value": "cmd"
    },
    "nav_gen_cliffs_approx": {
        "desc": "Mark cliff areas, post-processing approximation",
        "tags": [],
        "value": "cmd"
    },
    "nav_generate": {
        "desc": "Generate a Navigation Mesh for the current map and save it to disk.",
        "tags": [],
        "value": "cmd"
    },
    "nav_generate_fencetops": {
        "desc": "Autogenerate nav areas on fence and obstacle tops",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "nav_generate_fixup_jump_areas": {
        "desc": "Convert obsolete jump areas into 2-way connections",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "nav_generate_incremental": {
        "desc": "Generate a Navigation Mesh for the current map and save it to disk.",
        "tags": [],
        "value": "cmd"
    },
    "nav_generate_incremental_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "2000"
    },
    "nav_generate_incremental_tolerance": {
        "desc": "Z tolerance for adding new nav areas.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_jump": {
        "desc": "Toggles the 'traverse this area by jumping' flag used by the AI system.",
        "tags": [],
        "value": "cmd"
    },
    "nav_ladder_flip": {
        "desc": "Flips the selected ladder's direction.",
        "tags": [],
        "value": "cmd"
    },
    "nav_load": {
        "desc": "Loads the Navigation Mesh for the current map.",
        "tags": [],
        "value": "cmd"
    },
    "nav_lower_drag_volume_max": {
        "desc": "Lower the top of the drag select volume.",
        "tags": [],
        "value": "cmd"
    },
    "nav_lower_drag_volume_min": {
        "desc": "Lower the bottom of the drag select volume.",
        "tags": [],
        "value": "cmd"
    },
    "nav_make_sniper_spots": {
        "desc": "Chops the marked area into disconnected sub-areas suitable for sniper spots.",
        "tags": [],
        "value": "cmd"
    },
    "nav_mark": {
        "desc": "Marks the Area or Ladder under the cursor for manipulation by subsequent editing commands.",
        "tags": [],
        "value": "cmd"
    },
    "nav_mark_attribute": {
        "desc": "Set nav attribute for all areas in the selected set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_mark_unnamed": {
        "desc": "Mark an Area with no Place name. Useful for finding stray areas missed when Place Painting.",
        "tags": [],
        "value": "cmd"
    },
    "nav_mark_walkable": {
        "desc": "Mark the current location as a walkable position. These positions are used as seed locations when sampling the map to generate",
        "tags": [],
        "value": "cmd"
    },
    "nav_max_view_distance": {
        "desc": "Maximum range for precomputed nav mesh visibility (0 = default 1500 units)",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "6000"
    },
    "nav_max_vis_delta_list_length": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "64"
    },
    "nav_merge": {
        "desc": "To merge two Areas into one, mark the first Area, highlight the second by pointing your cursor at it, and invoke the merge comm",
        "tags": [],
        "value": "cmd"
    },
    "nav_merge_mesh": {
        "desc": "Merges a saved selected set into the current mesh.",
        "tags": [],
        "value": "cmd"
    },
    "nav_no_hostages": {
        "desc": "Toggles the 'hostages cannot use this area' flag used by the AI system.",
        "tags": [],
        "value": "cmd"
    },
    "nav_no_jump": {
        "desc": "Toggles the 'dont jump in this area' flag used by the AI system.",
        "tags": [],
        "value": "cmd"
    },
    "nav_place_floodfill": {
        "desc": "Sets the Place of the Area under the cursor to the curent Place, and 'flood-fills' the Place to all adjacent Areas. Flood-filli",
        "tags": [],
        "value": "cmd"
    },
    "nav_place_list": {
        "desc": "Lists all place names used in the map.",
        "tags": [],
        "value": "cmd"
    },
    "nav_place_pick": {
        "desc": "Sets the current Place to the Place of the Area under the cursor.",
        "tags": [],
        "value": "cmd"
    },
    "nav_place_replace": {
        "desc": "Replaces all instances of the first place with the second place.",
        "tags": [],
        "value": "cmd"
    },
    "nav_place_set": {
        "desc": "Sets the Place of all selected areas to the current Place.",
        "tags": [],
        "value": "cmd"
    },
    "nav_potentially_visible_dot_tolerance": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_precise": {
        "desc": "Toggles the 'dont avoid obstacles' flag used by the AI system.",
        "tags": [],
        "value": "cmd"
    },
    "nav_quicksave": {
        "desc": "Set to one to skip the time consuming phases of the analysis.  Useful for data collection and testing.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "nav_raise_drag_volume_max": {
        "desc": "Raise the top of the drag select volume.",
        "tags": [],
        "value": "cmd"
    },
    "nav_raise_drag_volume_min": {
        "desc": "Raise the bottom of the drag select volume.",
        "tags": [],
        "value": "cmd"
    },
    "nav_recall_selected_set": {
        "desc": "Re-selects the stored selected set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_remove_from_selected_set": {
        "desc": "Remove current area from the selected set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_remove_jump_areas": {
        "desc": "Removes legacy jump areas, replacing them with connections.",
        "tags": [],
        "value": "cmd"
    },
    "nav_run": {
        "desc": "Toggles the 'traverse this area by running' flag used by the AI system.",
        "tags": [],
        "value": "cmd"
    },
    "nav_save": {
        "desc": "Saves the current Navigation Mesh to disk.",
        "tags": [],
        "value": "cmd"
    },
    "nav_save_selected": {
        "desc": "Writes the selected set to disk for merging into another mesh via nav_merge_mesh.",
        "tags": [],
        "value": "cmd"
    },
    "nav_select_blocked_areas": {
        "desc": "Adds all blocked areas to the selected set",
        "tags": [],
        "value": "cmd"
    },
    "nav_select_damaging_areas": {
        "desc": "Adds all damaging areas to the selected set",
        "tags": [],
        "value": "cmd"
    },
    "nav_select_half_space": {
        "desc": "Selects any areas that intersect the given half-space.",
        "tags": [],
        "value": "cmd"
    },
    "nav_select_invalid_areas": {
        "desc": "Adds all invalid areas to the Selected Set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_select_larger_than": {
        "desc": "Select nav areas where both dimensions are larger than the given size.",
        "tags": [],
        "value": "cmd"
    },
    "nav_select_obstructed_areas": {
        "desc": "Adds all obstructed areas to the selected set",
        "tags": [],
        "value": "cmd"
    },
    "nav_select_orphans": {
        "desc": "Adds all orphan areas to the selected set (highlight a valid area first).",
        "tags": [],
        "value": "cmd"
    },
    "nav_select_overlapping": {
        "desc": "Selects nav areas that are overlapping others.",
        "tags": [],
        "value": "cmd"
    },
    "nav_select_radius": {
        "desc": "Adds all areas in a radius to the selection set",
        "tags": [],
        "value": "cmd"
    },
    "nav_select_stairs": {
        "desc": "Adds all stairway areas to the selected set",
        "tags": [],
        "value": "cmd"
    },
    "nav_selected_set_border_color": {
        "desc": "Color used to draw the selected set borders while editing.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "100"
    },
    "nav_selected_set_color": {
        "desc": "Color used to draw the selected set background while editing.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "255"
    },
    "nav_set_place_mode": {
        "desc": "Sets the editor into or out of Place mode. Place mode allows labelling of Area with Place names.",
        "tags": [],
        "value": "cmd"
    },
    "nav_shift": {
        "desc": "Shifts the selected areas by the specified amount",
        "tags": [],
        "value": "cmd"
    },
    "nav_show_approach_points": {
        "desc": "Show Approach Points in the Navigation Mesh.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_show_area_info": {
        "desc": "Duration in seconds to show nav area ID and attributes while editing",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_show_compass": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_show_continguous": {
        "desc": "Highlight non-contiguous connections",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_show_danger": {
        "desc": "Show current 'danger' levels.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_show_dumped_positions": {
        "desc": "Show the (x,y,z) coordinate positions of the given dump file.",
        "tags": [],
        "value": "cmd"
    },
    "nav_show_func_nav_avoid": {
        "desc": "Show areas of designer-placed bot avoidance due to func_nav_avoid entities",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_show_func_nav_prefer": {
        "desc": "Show areas of designer-placed bot preference due to func_nav_prefer entities",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_show_func_nav_prerequisite": {
        "desc": "Show areas of designer-placed bot preference due to func_nav_prerequisite entities",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_show_light_intensity": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_show_node_grid": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_show_node_id": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_show_nodes": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_show_player_counts": {
        "desc": "Show current player counts in each area.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_show_potentially_visible": {
        "desc": "Show areas that are potentially visible from the current nav area",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_simplify_selected": {
        "desc": "Chops all selected areas into their component 1x1 areas and re-merges them together into larger areas",
        "tags": [],
        "value": "cmd"
    },
    "nav_slope_limit": {
        "desc": "The ground unit normal's Z component must be greater than this for nav areas to be generated.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_slope_tolerance": {
        "desc": "The ground unit normal's Z component must be this close to the nav area's Z component to be generated.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_snap_to_grid": {
        "desc": "Snap to the nav generation grid when creating new nav areas",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_solid_props": {
        "desc": "Make props solid to nav generation/editing",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_splice": {
        "desc": "To splice, mark an area, highlight a second area, then invoke the splice command to create a new, connected area between them.",
        "tags": [],
        "value": "cmd"
    },
    "nav_split": {
        "desc": "To split an Area into two, align the split line using your cursor and invoke the split command.",
        "tags": [],
        "value": "cmd"
    },
    "nav_split_place_on_ground": {
        "desc": "If true, nav areas will be placed flush with the ground when split.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_stand": {
        "desc": "Toggles the 'stand while hiding' flag used by the AI system.",
        "tags": [],
        "value": "cmd"
    },
    "nav_stop": {
        "desc": "Toggles the 'must stop when entering this area' flag used by the AI system.",
        "tags": [],
        "value": "cmd"
    },
    "nav_store_selected_set": {
        "desc": "Stores the current selected set for later retrieval.",
        "tags": [],
        "value": "cmd"
    },
    "nav_strip": {
        "desc": "Strips all Hiding Spots, Approach Points, and Encounter Spots from the current Area.",
        "tags": [],
        "value": "cmd"
    },
    "nav_subdivide": {
        "desc": "Subdivides all selected areas.",
        "tags": [],
        "value": "cmd"
    },
    "nav_test_node": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_test_node_crouch": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_test_node_crouch_dir": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "4"
    },
    "nav_test_stairs": {
        "desc": "Test the selected set for being on stairs",
        "tags": [],
        "value": "cmd"
    },
    "nav_toggle_deselecting": {
        "desc": "Start or stop continuously removing from the selected set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_toggle_in_selected_set": {
        "desc": "Remove current area from the selected set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_toggle_place_mode": {
        "desc": "Toggle the editor into and out of Place mode. Place mode allows labelling of Area with Place names.",
        "tags": [],
        "value": "cmd"
    },
    "nav_toggle_place_painting": {
        "desc": "Toggles Place Painting mode. When Place Painting, pointing at an Area will 'paint' it with the current Place.",
        "tags": [],
        "value": "cmd"
    },
    "nav_toggle_selected_set": {
        "desc": "Toggles all areas into/out of the selected set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_toggle_selecting": {
        "desc": "Start or stop continuously adding to the selected set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_transient": {
        "desc": "Toggles the 'area is transient and may become blocked' flag used by the AI system.",
        "tags": [],
        "value": "cmd"
    },
    "nav_unmark": {
        "desc": "Clears the marked Area or Ladder.",
        "tags": [],
        "value": "cmd"
    },
    "nav_update_blocked": {
        "desc": "Updates the blocked/unblocked status for every nav area.",
        "tags": [],
        "value": "cmd"
    },
    "nav_update_lighting": {
        "desc": "Recomputes lighting values",
        "tags": [],
        "value": "cmd"
    },
    "nav_update_visibility_on_edit": {
        "desc": "If nonzero editing the mesh will incrementally recompue visibility",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nav_use_place": {
        "desc": "If used without arguments, all available Places will be listed. If a Place argument is given, the current Place is set.",
        "tags": [],
        "value": "cmd"
    },
    "nav_walk": {
        "desc": "Toggles the 'traverse this area by walking' flag used by the AI system.",
        "tags": [],
        "value": "cmd"
    },
    "nav_warp_to_mark": {
        "desc": "Warps the player to the marked area.",
        "tags": [],
        "value": "cmd"
    },
    "nav_world_center": {
        "desc": "Centers the nav mesh in the world",
        "tags": [],
        "value": "cmd"
    },
    "nb_allow_avoiding": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "nb_allow_climbing": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "nb_allow_gap_jumping": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "nb_blind": {
        "desc": "Disable vision",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nb_command": {
        "desc": "Sends a command string to all bots",
        "tags": [],
        "value": "cmd"
    },
    "nb_debug": {
        "desc": "Debug NextBots.  Categories are: BEHAVIOR, LOOK_AT, PATH, ANIMATION, LOCOMOTION, VISION, HEARING, EVENTS, ERRORS.",
        "tags": [],
        "value": "cmd"
    },
    "nb_debug_climbing": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nb_debug_filter": {
        "desc": "Add items to the NextBot debug filter. Items can be entindexes or part of the indentifier of one or more bots.",
        "tags": [],
        "value": "cmd"
    },
    "nb_debug_history": {
        "desc": "If true, each bot keeps a history of debug output in memory",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "nb_debug_known_entities": {
        "desc": "Show the 'known entities' for the bot that is the current spectator target",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nb_delete_all": {
        "desc": "Delete all non-player NextBot entities.",
        "tags": [],
        "value": "cmd"
    },
    "nb_force_look_at": {
        "desc": "Force selected bot to look at the local player's position",
        "tags": [],
        "value": "cmd"
    },
    "nb_goal_look_ahead_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "50"
    },
    "nb_head_aim_resettle_angle": {
        "desc": "After rotating through this angle, the bot pauses to 'recenter' its virtual mouse on its virtual mousepad",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "100"
    },
    "nb_head_aim_resettle_time": {
        "desc": "How long the bot pauses to 'recenter' its virtual mouse on its virtual mousepad",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nb_head_aim_settle_duration": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nb_head_aim_steady_max_rate": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "100"
    },
    "nb_ladder_align_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "50"
    },
    "nb_last_area_update_tolerance": {
        "desc": "Distance a character needs to travel in order to invalidate cached area",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "4"
    },
    "nb_move_to_cursor": {
        "desc": "Tell all NextBots to move to the cursor position",
        "tags": [],
        "value": "cmd"
    },
    "nb_path_draw_inc": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "100"
    },
    "nb_path_draw_segment_count": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "100"
    },
    "nb_path_segment_influence_radius": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "100"
    },
    "nb_player_crouch": {
        "desc": "Force bots to crouch",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nb_player_move": {
        "desc": "Prevents bots from moving",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "nb_player_move_direct": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "nb_player_stop": {
        "desc": "Stop all NextBotPlayers from updating",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nb_player_walk": {
        "desc": "Force bots to walk",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nb_saccade_speed": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1000"
    },
    "nb_saccade_time": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nb_select": {
        "desc": "Select the bot you are aiming at for further debug operations.",
        "tags": [],
        "value": "cmd"
    },
    "nb_shadow_dist": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "400"
    },
    "nb_speed_look_ahead_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "150"
    },
    "nb_stop": {
        "desc": "Stop all NextBots",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "0"
    },
    "nb_update_debug": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nb_update_framelimit": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "15"
    },
    "nb_update_frequency": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "nb_update_maxslide": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "2"
    },
    "nb_warp_selected_here": {
        "desc": "Teleport the selected bot to your cursor position",
        "tags": [],
        "value": "cmd"
    },
    "net_blockmsg": {
        "desc": "Discards incoming message: <0|1|name>",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "net_channels": {
        "desc": "Shows net channel info",
        "tags": [],
        "value": "cmd"
    },
    "net_chokeloop": {
        "desc": "Apply bandwidth choke to loopback packets",
        "tags": [],
        "value": "0"
    },
    "net_compresspackets": {
        "desc": "Use compression on game packets.",
        "tags": [],
        "value": "1"
    },
    "net_compresspackets_minsize": {
        "desc": "Don't bother compressing packets below this size.",
        "tags": [],
        "value": "1024"
    },
    "net_compressvoice": {
        "desc": "Attempt to compress out of band voice payloads (360 only).",
        "tags": [],
        "value": "0"
    },
    "net_drawslider": {
        "desc": "Draw completion slider during signon",
        "tags": [],
        "value": "0"
    },
    "net_droppackets": {
        "desc": "Drops next n packets on client",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "net_fakejitter": {
        "desc": "Jitter fakelag packet time",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "net_fakelag": {
        "desc": "Lag all incoming network data (including loopback) by this many milliseconds.",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "net_fakeloss": {
        "desc": "Simulate packet loss as a percentage (negative means drop 1/n packets)",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "net_graph": {
        "desc": "Draw the network usage graph, = 2 draws data on payload, = 3 draws payload legend.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "net_graphheight": {
        "desc": "Height of netgraph panel",
        "tags": [
            "a",
            "cl"
        ],
        "value": "64"
    },
    "net_graphmsecs": {
        "desc": "The latency graph represents this many milliseconds.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "500"
    },
    "net_graphpos": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "net_graphproportionalfont": {
        "desc": "Determines whether netgraph font is proportional or not",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "net_graphshowinterp": {
        "desc": "Draw the interpolation graph.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "net_graphshowlatency": {
        "desc": "Draw the ping/packet loss graph.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "net_graphsolid": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "net_graphtext": {
        "desc": "Draw text fields",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "net_maxcleartime": {
        "desc": "Max # of seconds we can wait for next packets to be sent based on rate setting (0 == no limit).",
        "tags": [],
        "value": "4"
    },
    "net_maxfilesize": {
        "desc": "Maximum allowed file size for uploading in MB",
        "tags": [],
        "value": "16"
    },
    "net_maxfragments": {
        "desc": "Max fragment bytes per packet",
        "tags": [],
        "value": "1260"
    },
    "net_maxpacketdrop": {
        "desc": "Ignore any packets with the sequence number more than this ahead (0 == no limit)",
        "tags": [],
        "value": "5000"
    },
    "net_maxroutable": {
        "desc": "Requested max packet size before packets are 'split'.",
        "tags": [
            "a",
            "user"
        ],
        "value": "1260"
    },
    "net_queue_trace": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "net_queued_packet_thread": {
        "desc": "Use a high priority thread to send queued packets out instead of sending them each frame.",
        "tags": [],
        "value": "1"
    },
    "net_scale": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "5"
    },
    "net_showdrop": {
        "desc": "Show dropped packets in console",
        "tags": [],
        "value": "0"
    },
    "net_showevents": {
        "desc": "Dump game events to console (1=client only, 2=all).",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "net_showfragments": {
        "desc": "Show netchannel fragments",
        "tags": [],
        "value": "0"
    },
    "net_showmsg": {
        "desc": "Show incoming message: <0|1|name>",
        "tags": [],
        "value": "0"
    },
    "net_showpeaks": {
        "desc": "Show messages for large packets only: <size>",
        "tags": [],
        "value": "0"
    },
    "net_showsplits": {
        "desc": "Show info about packet splits",
        "tags": [],
        "value": "0"
    },
    "net_showtcp": {
        "desc": "Dump TCP stream summary to console",
        "tags": [],
        "value": "0"
    },
    "net_showudp": {
        "desc": "Dump UDP packets summary to console",
        "tags": [],
        "value": "0"
    },
    "net_showudp_wire": {
        "desc": "Show incoming packet information",
        "tags": [],
        "value": "0"
    },
    "net_splitpacket_maxrate": {
        "desc": "Max bytes per second when queueing splitpacket chunks",
        "tags": [],
        "value": "15000"
    },
    "net_splitrate": {
        "desc": "Number of fragments for a splitpacket that can be sent per frame",
        "tags": [],
        "value": "1"
    },
    "net_start": {
        "desc": "Inits multiplayer network sockets",
        "tags": [],
        "value": "cmd"
    },
    "net_status": {
        "desc": "Shows current network status",
        "tags": [],
        "value": "cmd"
    },
    "net_udp_rcvbuf": {
        "desc": "Default UDP receive buffer size",
        "tags": [],
        "value": "131072"
    },
    "net_usesocketsforloopback": {
        "desc": "Use network sockets layer even for listen server local player's packets (multiplayer only).",
        "tags": [],
        "value": "0"
    },
    "next": {
        "desc": "Set to 1 to advance to next frame ( when singlestep == 1 )",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "nextdemo": {
        "desc": "Play next demo in sequence.",
        "tags": [],
        "value": "cmd"
    },
    "nextlevel": {
        "desc": "If set to a valid map name, will trigger a changelevel to the specified map at the end of the round",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "0"
    },
    "noclip": {
        "desc": "Toggle. Player becomes non-solid and flies.",
        "tags": [],
        "value": "cmd"
    },
    "notarget": {
        "desc": "Toggle. Player becomes hidden to NPCs.",
        "tags": [],
        "value": "cmd"
    },
    "npc_ally_deathmessage": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "npc_height_adjust": {
        "desc": "Enable test mode for ik height adjustment",
        "tags": [
            "a",
            "sv"
        ],
        "value": "1"
    },
    "npc_sentences": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "npc_speakall": {
        "desc": "Force the npc to try and speak all their responses",
        "tags": [],
        "value": "cmd"
    },
    "npc_vphysics": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "obj_capture_damage": {
        "desc": "Captures all damage taken by objects for dumping later.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "obj_dump_damage": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "obj_sapper_amount": {
        "desc": "Amount of health inflicted by a Sapper object per second",
        "tags": [
            "sv"
        ],
        "value": "25"
    },
    "obj_show_damage": {
        "desc": "Show all damage taken by objects.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "object_deterioration_time": {
        "desc": "Time it takes for a fully-healed object to deteriorate.",
        "tags": [
            "sv"
        ],
        "value": "30"
    },
    "old_radiusdamage": {
        "desc": "",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "0"
    },
    "open_charinfo": {
        "desc": "Open the character info panel",
        "tags": [],
        "value": "cmd"
    },
    "open_charinfo_armory": {
        "desc": "Open the character info panel directly to armory.",
        "tags": [],
        "value": "cmd"
    },
    "open_charinfo_backpack": {
        "desc": "Open the character info panel directly to backpack.",
        "tags": [],
        "value": "cmd"
    },
    "open_charinfo_crafting": {
        "desc": "Open the character info panel directly to crafting screen.",
        "tags": [],
        "value": "cmd"
    },
    "open_charinfo_direct": {
        "desc": "Open the character info panel directly to the class you're currently playing.",
        "tags": [],
        "value": "cmd"
    },
    "open_replaybrowser": {
        "desc": "Open the replay browser.",
        "tags": [],
        "value": "cmd"
    },
    "open_replayinputpanel": {
        "desc": "Open replay input panel test",
        "tags": [],
        "value": "cmd"
    },
    "open_store": {
        "desc": "Open the in-game store",
        "tags": [],
        "value": "cmd"
    },
    "opentf2options": {
        "desc": "Displays the TF2 Advanced Options dialog.",
        "tags": [],
        "value": "cmd"
    },
    "opt_EnumerateLeavesFastAlgorithm": {
        "desc": "Use the new SIMD version of CEngineBSPTree::EnumerateLeavesInBox.",
        "tags": [],
        "value": "1"
    },
    "option_duck_method": {
        "desc": "",
        "tags": [
            "a",
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "option_duck_method_default": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "overview_alpha": {
        "desc": "Overview map translucency.",
        "tags": [
            "a",
            "clientcmd_can_execute",
            "cl"
        ],
        "value": "1"
    },
    "overview_health": {
        "desc": "Show player's health in map overview.",
        "tags": [
            "a",
            "clientcmd_can_execute",
            "cl"
        ],
        "value": "1"
    },
    "overview_locked": {
        "desc": "Locks map angle, doesn't follow view angle.",
        "tags": [
            "a",
            "clientcmd_can_execute",
            "cl"
        ],
        "value": "1"
    },
    "overview_mode": {
        "desc": "Sets overview map mode off,small,large: <0|1|2>",
        "tags": [],
        "value": "cmd"
    },
    "overview_names": {
        "desc": "Show player's names in map overview.",
        "tags": [
            "a",
            "clientcmd_can_execute",
            "cl"
        ],
        "value": "1"
    },
    "overview_tracks": {
        "desc": "Show player's tracks in map overview.",
        "tags": [
            "a",
            "clientcmd_can_execute",
            "cl"
        ],
        "value": "1"
    },
    "overview_zoom": {
        "desc": "Sets overview map zoom: <zoom> [<time>] [rel]",
        "tags": [],
        "value": "cmd"
    },
    "panel_test_title_safe": {
        "desc": "Test vgui panel positioning with title safe indentation",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "particle_sim_alt_cores": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "2"
    },
    "particle_simulateoverflow": {
        "desc": "Used for stress-testing particle systems. Randomly denies creation of particles.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "particle_test_attach_attachment": {
        "desc": "Attachment index for attachment mode",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "particle_test_attach_mode": {
        "desc": "Possible Values: 'start_at_attachment', 'follow_attachment', 'start_at_origin', 'follow_origin'",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "particle_test_file": {
        "desc": "Name of the particle system to dynamically spawn",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "particle_test_start": {
        "desc": "Dispatches the test particle system with the parameters specified in particle_test_file,  particle_test_attach_mode and particl",
        "tags": [],
        "value": "cmd"
    },
    "particle_test_stop": {
        "desc": "Stops all particle systems on the selected entities.  Arguments:    {entity_name} / {class_name} / no argument picks what playe",
        "tags": [],
        "value": "cmd"
    },
    "password": {
        "desc": "Current server access password",
        "tags": [
            "a",
            "norecord"
        ],
        "value": "0"
    },
    "path": {
        "desc": "Show the engine filesystem path.",
        "tags": [],
        "value": "cmd"
    },
    "pause": {
        "desc": "Toggle the server pause state.",
        "tags": [],
        "value": "cmd"
    },
    "perfui": {
        "desc": "Show/hide the level performance tools UI.",
        "tags": [],
        "value": "cmd"
    },
    "perfvisualbenchmark": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "perfvisualbenchmark_abort": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "phonemedelay": {
        "desc": "Phoneme delay to account for sound system latency.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "phonemefilter": {
        "desc": "Time duration of box filter to pass over phonemes.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "phonemesnap": {
        "desc": "Lod at level at which visemes stops always considering two phonemes, regardless of duration.",
        "tags": [
            "cl"
        ],
        "value": "2"
    },
    "phys_impactforcescale": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "phys_penetration_error_time": {
        "desc": "Controls the duration of vphysics penetration error boxes.",
        "tags": [
            "sv"
        ],
        "value": "10"
    },
    "phys_pushscale": {
        "desc": "",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "phys_speeds": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "phys_stressbodyweights": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "5"
    },
    "phys_timescale": {
        "desc": "Scale time for physics",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "phys_upimpactforcescale": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "physics_budget": {
        "desc": "Times the cost of each active object",
        "tags": [],
        "value": "cmd"
    },
    "physics_constraints": {
        "desc": "Highlights constraint system graph for an entity",
        "tags": [],
        "value": "cmd"
    },
    "physics_debug_entity": {
        "desc": "Dumps debug info for an entity",
        "tags": [],
        "value": "cmd"
    },
    "physics_highlight_active": {
        "desc": "Turns on the absbox for all active physics objects",
        "tags": [],
        "value": "cmd"
    },
    "physics_report_active": {
        "desc": "Lists all active physics objects",
        "tags": [],
        "value": "cmd"
    },
    "physics_select": {
        "desc": "Dumps debug info for an entity",
        "tags": [],
        "value": "cmd"
    },
    "physicsshadowupdate_render": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "picker": {
        "desc": "Toggles 'picker' mode.  When picker is on, the bounding box, pivot and debugging text is displayed for whatever entity the play",
        "tags": [],
        "value": "cmd"
    },
    "ping": {
        "desc": "Display ping to server.",
        "tags": [],
        "value": "cmd"
    },
    "pipeline_static_props": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "pixelvis_debug": {
        "desc": "Dump debug info",
        "tags": [],
        "value": "cmd"
    },
    "play": {
        "desc": "Play a sound.",
        "tags": [],
        "value": "cmd"
    },
    "playdemo": {
        "desc": "Play a recorded demo file (.dem ).",
        "tags": [],
        "value": "cmd"
    },
    "player_debug_print_damage": {
        "desc": "When true, print amount and type of all damage received by player to console.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "player_old_armor": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "player_ready_toggle": {
        "desc": "Toggle player ready state",
        "tags": [],
        "value": "cmd"
    },
    "playflush": {
        "desc": "Play a sound, reloading from disk in case of changes.",
        "tags": [],
        "value": "cmd"
    },
    "playgamesound": {
        "desc": "Play a sound from the game sounds txt file",
        "tags": [],
        "value": "cmd"
    },
    "playsoundscape": {
        "desc": "Forces a soundscape to play",
        "tags": [],
        "value": "cmd"
    },
    "playvideo": {
        "desc": "Plays a video: <filename> [width height]",
        "tags": [],
        "value": "cmd"
    },
    "playvideo_exitcommand": {
        "desc": "Plays a video and fires and exit command when it is stopped or finishes: <filename> <exit command>",
        "tags": [],
        "value": "cmd"
    },
    "playvol": {
        "desc": "Play a sound at a specified volume.",
        "tags": [],
        "value": "cmd"
    },
    "plugin_load": {
        "desc": "plugin_load <filename>",
        "tags": [],
        "value": "cmd"
    },
    "plugin_pause": {
        "desc": "plugin_pause <index>",
        "tags": [],
        "value": "cmd"
    },
    "plugin_pause_all": {
        "desc": "pauses all loaded plugins",
        "tags": [],
        "value": "cmd"
    },
    "plugin_print": {
        "desc": "Prints details about loaded plugins",
        "tags": [],
        "value": "cmd"
    },
    "plugin_unload": {
        "desc": "plugin_unload <index>",
        "tags": [],
        "value": "cmd"
    },
    "plugin_unpause": {
        "desc": "plugin_unpause <index>",
        "tags": [],
        "value": "cmd"
    },
    "plugin_unpause_all": {
        "desc": "unpauses all disabled plugins",
        "tags": [],
        "value": "cmd"
    },
    "prec_about": {
        "desc": "About plugin",
        "tags": [],
        "value": "cmd"
    },
    "prec_check_update": {
        "desc": "Check for updates on startup",
        "tags": [
            "a",
            "norecord"
        ],
        "value": "1"
    },
    "prec_delete_demo": {
        "desc": "Delete previous recorded demo.",
        "tags": [],
        "value": "cmd"
    },
    "prec_delete_useless_demo": {
        "desc": "Delete demo files without bookmarks and killstreaks",
        "tags": [
            "a",
            "norecord"
        ],
        "value": "1"
    },
    "prec_dir": {
        "desc": "Directory to save demos",
        "tags": [
            "a",
            "norecord"
        ],
        "value": "0"
    },
    "prec_info": {
        "desc": "List of commands.",
        "tags": [],
        "value": "cmd"
    },
    "prec_kill_delay": {
        "desc": "Max delay between kill's in KillStreaks",
        "tags": [
            "a",
            "norecord"
        ],
        "value": "15"
    },
    "prec_log": {
        "desc": "0-Don't log.    1-log into killstreaks.txt    2-log separately for each demo.    3-log separately for each map.",
        "tags": [
            "a",
            "norecord"
        ],
        "value": "1"
    },
    "prec_mark": {
        "desc": "Set bookmark to current moment.",
        "tags": [],
        "value": "cmd"
    },
    "prec_min_streak": {
        "desc": "Minimum kill streak to log",
        "tags": [
            "a",
            "norecord"
        ],
        "value": "6"
    },
    "prec_mode": {
        "desc": "0-turn off addon.    1-record only curstomnamed demos.    2-record all demos (on servers with mp_tournament 1).    3-record all",
        "tags": [
            "a",
            "norecord"
        ],
        "value": "3"
    },
    "prec_next_demoname": {
        "desc": "Set name of next demo",
        "tags": [
            "norecord"
        ],
        "value": "0"
    },
    "prec_notify": {
        "desc": "Notify when started/stoped recording and setting bookmarks 0 - show message in console 1 - displays message in team chat 2 - di",
        "tags": [
            "a",
            "norecord"
        ],
        "value": "2"
    },
    "prec_record": {
        "desc": "Record a demo.",
        "tags": [],
        "value": "cmd"
    },
    "prec_screens": {
        "desc": "Make screenshoots of score and status",
        "tags": [
            "a",
            "norecord"
        ],
        "value": "1"
    },
    "prec_show_stv_status": {
        "desc": "Show current sourcetv status.",
        "tags": [],
        "value": "cmd"
    },
    "prec_sound": {
        "desc": "Play sound when start/stop recording (1 - on ,0 - off)",
        "tags": [
            "a",
            "norecord"
        ],
        "value": "1"
    },
    "prec_stv_status": {
        "desc": "Show SourceTV statistic after the match",
        "tags": [
            "a",
            "norecord"
        ],
        "value": "1"
    },
    "prec_tag": {
        "desc": "tag for demo",
        "tags": [
            "a",
            "norecord"
        ],
        "value": "0"
    },
    "prec_version": {
        "desc": "Plugin verison",
        "tags": [
            "norecord"
        ],
        "value": "2"
    },
    "print_colorcorrection": {
        "desc": "Display the color correction layer information.",
        "tags": [],
        "value": "cmd"
    },
    "progress_enable": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "prop_active_gib_limit": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "999999"
    },
    "prop_active_gib_max_fade_time": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "999999"
    },
    "prop_crosshair": {
        "desc": "Shows name for prop looking at",
        "tags": [],
        "value": "cmd"
    },
    "prop_debug": {
        "desc": "Toggle prop debug mode. If on, props will show colorcoded bounding boxes. Red means ignore all damage. White means respond phys",
        "tags": [],
        "value": "cmd"
    },
    "prop_dynamic_create": {
        "desc": "Creates a dynamic prop with a specific .mdl aimed away from where the player is looking.  Arguments: {.mdl name}",
        "tags": [],
        "value": "cmd"
    },
    "prop_physics_create": {
        "desc": "Creates a physics prop with a specific .mdl aimed away from where the player is looking.  Arguments: {.mdl name}",
        "tags": [],
        "value": "cmd"
    },
    "props_break_max_pieces": {
        "desc": "Maximum prop breakable piece count (-1 = model default)",
        "tags": [],
        "value": "0"
    },
    "props_break_max_pieces_perframe": {
        "desc": "Maximum prop breakable piece count per frame (-1 = model default)",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "-1"
    },
    "pwatchent": {
        "desc": "Entity to watch for prediction system changes.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "-1"
    },
    "pwatchvar": {
        "desc": "Entity variable to watch in prediction system for changes.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "pyro_dof": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "pyro_max_intensity": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "pyro_max_rate": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "pyro_max_side_length": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "pyro_max_side_width": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "pyro_min_intensity": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "pyro_min_rate": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "pyro_min_side_length": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "pyro_min_side_width": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "pyro_vignette": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "pyro_vignette_distortion": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "quit": {
        "desc": "Exit the engine.",
        "tags": [],
        "value": "cmd"
    },
    "r_3dnow": {
        "desc": "Enable/disable 3DNow code",
        "tags": [],
        "value": "cmd"
    },
    "r_3dsky": {
        "desc": "Enable the rendering of 3d sky boxes",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "r_AirboatViewDampenDamp": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "nf",
            "rep"
        ],
        "value": "1"
    },
    "r_AirboatViewDampenFreq": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "nf",
            "rep"
        ],
        "value": "7"
    },
    "r_AirboatViewZHeight": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "r_ClipAreaPortals": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_DispBuildable": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_DispDrawAxes": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_DispWalkable": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_DrawBeams": {
        "desc": "0=Off, 1=Normal, 2=Wireframe",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_DrawDisp": {
        "desc": "Toggles rendering of displacment maps",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_DrawModelLightOrigin": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_DrawPortals": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_DrawRain": {
        "desc": "Enable/disable rain rendering.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_DrawSpecificStaticProp": {
        "desc": "",
        "tags": [],
        "value": "-1"
    },
    "r_ForceWaterLeaf": {
        "desc": "Enable for optimization to water - considers view in leaf under water for purposes of culling",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "r_JeepFOV": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "90"
    },
    "r_JeepViewBlendTo": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_JeepViewBlendToScale": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_JeepViewBlendToTime": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_JeepViewDampenDamp": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "nf",
            "rep"
        ],
        "value": "1"
    },
    "r_JeepViewDampenFreq": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "nf",
            "rep"
        ],
        "value": "7"
    },
    "r_JeepViewZHeight": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "nf",
            "rep"
        ],
        "value": "10"
    },
    "r_PhysPropStaticLighting": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "r_PortalTestEnts": {
        "desc": "Clip entities against portal frustums.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_RainHack": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_RainProfile": {
        "desc": "Enable/disable rain profiling.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_RainRadius": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1500"
    },
    "r_RainSideVel": {
        "desc": "How much sideways velocity rain gets.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "130"
    },
    "r_RainSimulate": {
        "desc": "Enable/disable rain simulation.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_RainSplashPercentage": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "20"
    },
    "r_ShowViewerArea": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_SnowColorBlue": {
        "desc": "Snow.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "200"
    },
    "r_SnowColorGreen": {
        "desc": "Snow.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "175"
    },
    "r_SnowColorRed": {
        "desc": "Snow.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "150"
    },
    "r_SnowDebugBox": {
        "desc": "Snow Debug Boxes.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_SnowEnable": {
        "desc": "Snow Enable",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_SnowEndAlpha": {
        "desc": "Snow.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "255"
    },
    "r_SnowEndSize": {
        "desc": "Snow.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_SnowFallSpeed": {
        "desc": "Snow fall speed scale.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_SnowInsideRadius": {
        "desc": "Snow.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "256"
    },
    "r_SnowOutsideRadius": {
        "desc": "Snow.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1024"
    },
    "r_SnowParticles": {
        "desc": "Snow.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "500"
    },
    "r_SnowPosScale": {
        "desc": "Snow.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_SnowRayEnable": {
        "desc": "Snow.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_SnowRayLength": {
        "desc": "Snow.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "8192"
    },
    "r_SnowRayRadius": {
        "desc": "Snow.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "256"
    },
    "r_SnowSpeedScale": {
        "desc": "Snow.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_SnowStartAlpha": {
        "desc": "Snow.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "25"
    },
    "r_SnowStartSize": {
        "desc": "Snow.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_SnowWindScale": {
        "desc": "Snow.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_SnowZoomOffset": {
        "desc": "Snow.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "384"
    },
    "r_SnowZoomRadius": {
        "desc": "Snow.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "512"
    },
    "r_VehicleViewClamp": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_VehicleViewDampen": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "nf",
            "rep"
        ],
        "value": "1"
    },
    "r_WaterDrawReflection": {
        "desc": "Enable water reflection",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "r_WaterDrawRefraction": {
        "desc": "Enable water refraction",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "r_ambientboost": {
        "desc": "Set to boost ambient term if it is totally swamped by local lights",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "r_ambientfactor": {
        "desc": "Boost ambient cube by no more than this factor",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "r_ambientfraction": {
        "desc": "Fraction of direct lighting that ambient cube must be below to trigger boosting",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_ambientlightingonly": {
        "desc": "Set this to 1 to light models with only ambient lighting (and no static lighting).",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_ambientmin": {
        "desc": "Threshold above which ambient cube will not boost (i.e. it's already sufficiently bright",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "r_aspectratio": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_avglight": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_avglightmap": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_bloomtintb": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_bloomtintexponent": {
        "desc": "",
        "tags": [],
        "value": "2"
    },
    "r_bloomtintg": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_bloomtintr": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_cheapwaterend": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "r_cheapwaterstart": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "r_cleardecals": {
        "desc": "Usage r_cleardecals <permanent>.",
        "tags": [],
        "value": "cmd"
    },
    "r_colorstaticprops": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_debugcheapwater": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_debugrandomstaticlighting": {
        "desc": "Set to 1 to randomize static lighting for debugging.  Must restart for change to take affect.",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_decal_cover_count": {
        "desc": "",
        "tags": [],
        "value": "4"
    },
    "r_decal_cullsize": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_decal_overlap_area": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_decal_overlap_count": {
        "desc": "",
        "tags": [],
        "value": "3"
    },
    "r_decals": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_decalstaticprops": {
        "desc": "Decal static props test",
        "tags": [],
        "value": "1"
    },
    "r_depthoverlay": {
        "desc": "Replaces opaque objects with their grayscaled depth values. r_showz_power scales the output.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_dopixelvisibility": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "r_drawbatchdecals": {
        "desc": "Render decals batched.",
        "tags": [],
        "value": "1"
    },
    "r_drawbrushmodels": {
        "desc": "Render brush models. 0=Off, 1=Normal, 2=Wireframe",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_drawclipbrushes": {
        "desc": "Draw clip brushes (red=NPC+player, pink=player, purple=NPC)",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_drawdecals": {
        "desc": "Render decals.",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_drawdetailprops": {
        "desc": "0=Off, 1=Normal, 2=Wireframe",
        "tags": [],
        "value": "1"
    },
    "r_drawentities": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_drawflecks": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_drawfuncdetail": {
        "desc": "Render func_detail",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_drawleaf": {
        "desc": "Draw the specified leaf.",
        "tags": [
            "cheat"
        ],
        "value": "-1"
    },
    "r_drawlightcache": {
        "desc": "0: off 1: draw light cache entries 2: draw rays",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_drawlightinfo": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_drawlights": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_drawmodeldecals": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_drawmodelstatsoverlay": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_drawmodelstatsoverlaydistance": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "500"
    },
    "r_drawmodelstatsoverlaymax": {
        "desc": "time in milliseconds beyond which a model overlay is fully red in r_drawmodelstatsoverlay 2",
        "tags": [
            "a"
        ],
        "value": "1"
    },
    "r_drawmodelstatsoverlaymin": {
        "desc": "time in milliseconds that a model must take to render before showing an overlay in r_drawmodelstatsoverlay 2",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "r_drawopaquerenderables": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_drawopaquestaticpropslast": {
        "desc": "Whether opaque static props are rendered after non-npcs",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "r_drawopaqueworld": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_drawothermodels": {
        "desc": "0=Off, 1=Normal, 2=Wireframe",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_drawparticles": {
        "desc": "Enable/disable particle rendering",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_drawpixelvisibility": {
        "desc": "Show the occlusion proxies",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "r_drawrenderboxes": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_drawropes": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_drawskybox": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_drawsprites": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_drawstaticprops": {
        "desc": "0=Off, 1=Normal, 2=Wireframe",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_drawtranslucentrenderables": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_drawtranslucentworld": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_drawvgui": {
        "desc": "Enable the rendering of vgui panels",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_drawviewmodel": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "r_drawworld": {
        "desc": "Render the world.",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_dscale_basefov": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "90"
    },
    "r_dscale_fardist": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "2000"
    },
    "r_dscale_farscale": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "4"
    },
    "r_dscale_neardist": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "100"
    },
    "r_dscale_nearscale": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_dynamic": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_dynamiclighting": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_entityclips": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "r_eyeglintlodpixels": {
        "desc": "The number of pixels wide an eyeball has to be before rendering an eyeglint.  Is a floating point value.",
        "tags": [
            "cheat"
        ],
        "value": "20"
    },
    "r_eyegloss": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "r_eyemove": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "r_eyes": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_eyeshift_x": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "r_eyeshift_y": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "r_eyeshift_z": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "r_eyesize": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "r_eyewaterepsilon": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "10"
    },
    "r_farz": {
        "desc": "Override the far clipping plane. -1 means to use the value in env_fog_controller.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "-1"
    },
    "r_fastzreject": {
        "desc": "Activate/deactivates a fast z-setting algorithm to take advantage of hardware with fast z reject. Use -1 to default to hardware",
        "tags": [],
        "value": "0"
    },
    "r_fastzrejectdisp": {
        "desc": "Activates/deactivates fast z rejection on displacements (360 only). Only active when r_fastzreject is on.",
        "tags": [],
        "value": "0"
    },
    "r_flashlightambient": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_flashlightclip": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_flashlightconstant": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_flashlightculldepth": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_flashlightdepthres": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1024"
    },
    "r_flashlightdepthtexture": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_flashlightdrawclip": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_flashlightdrawdepth": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_flashlightdrawfrustum": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "r_flashlightdrawfrustumbbox": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_flashlightdrawsweptbbox": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_flashlightfar": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "750"
    },
    "r_flashlightfov": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "45"
    },
    "r_flashlightladderdist": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "40"
    },
    "r_flashlightlinear": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "100"
    },
    "r_flashlightlockposition": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_flashlightmodels": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "r_flashlightnear": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "4"
    },
    "r_flashlightnodraw": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_flashlightoffsetx": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "10"
    },
    "r_flashlightoffsety": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "-20"
    },
    "r_flashlightoffsetz": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "24"
    },
    "r_flashlightquadratic": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_flashlightrender": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_flashlightrendermodels": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_flashlightrenderworld": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_flashlightscissor": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_flashlightshadowatten": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_flashlightupdatedepth": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_flashlightvisualizetrace": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_flex": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_flushlod": {
        "desc": "Flush and reload LODs.",
        "tags": [],
        "value": "cmd"
    },
    "r_frustumcullworld": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_glint_alwaysdraw": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_glint_procedural": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_hunkalloclightmaps": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_hwmorph": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_itemblinkmax": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_itemblinkrate": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "4"
    },
    "r_lightaverage": {
        "desc": "Activates/deactivate light averaging",
        "tags": [],
        "value": "1"
    },
    "r_lightcache_numambientsamples": {
        "desc": "number of random directions to fire rays when computing ambient lighting",
        "tags": [
            "cheat"
        ],
        "value": "162"
    },
    "r_lightcache_zbuffercache": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_lightcachecenter": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_lightcachemodel": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "-1"
    },
    "r_lightinterp": {
        "desc": "Controls the speed of light interpolation, 0 turns off interpolation",
        "tags": [
            "cheat"
        ],
        "value": "5"
    },
    "r_lightmap": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "-1"
    },
    "r_lightstyle": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "-1"
    },
    "r_lightwarpidentity": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_lockpvs": {
        "desc": "Lock the PVS so you can fly around and inspect what is being drawn.",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_lod": {
        "desc": "",
        "tags": [],
        "value": "-1"
    },
    "r_mapextents": {
        "desc": "Set the max dimension for the map.  This determines the far clipping plane",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "16384"
    },
    "r_maxdlights": {
        "desc": "",
        "tags": [],
        "value": "32"
    },
    "r_maxmodeldecal": {
        "desc": "",
        "tags": [],
        "value": "50"
    },
    "r_maxnewsamples": {
        "desc": "",
        "tags": [],
        "value": "6"
    },
    "r_maxsampledist": {
        "desc": "",
        "tags": [],
        "value": "128"
    },
    "r_minnewsamples": {
        "desc": "",
        "tags": [],
        "value": "3"
    },
    "r_modelwireframedecal": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_newflashlight": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_nohw": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_norefresh": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_nosw": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_novis": {
        "desc": "Turn off the PVS.",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_occludeemaxarea": {
        "desc": "Prevents occlusion testing for entities that take up more than X% of the screen. 0 means use whatever the level said to use.",
        "tags": [],
        "value": "0"
    },
    "r_occluderminarea": {
        "desc": "Prevents this occluder from being used if it takes up less than X% of the screen. 0 means use whatever the level said to use.",
        "tags": [],
        "value": "0"
    },
    "r_occludermincount": {
        "desc": "At least this many occluders will be used, no matter how big they are.",
        "tags": [],
        "value": "0"
    },
    "r_occlusion": {
        "desc": "Activate/deactivate the occlusion system.",
        "tags": [],
        "value": "1"
    },
    "r_occlusionspew": {
        "desc": "Activate/deactivates spew about what the occlusion system is doing.",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_oldlightselection": {
        "desc": "Set this to revert to HL2's method of selecting lights",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_overlayfadeenable": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_overlayfademax": {
        "desc": "",
        "tags": [],
        "value": "2000"
    },
    "r_overlayfademin": {
        "desc": "",
        "tags": [],
        "value": "1750"
    },
    "r_overlaywireframe": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_particle_sim_spike_threshold_ms": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "5"
    },
    "r_partition_level": {
        "desc": "Displays a particular level of the spatial partition system. Use -1 to disable it.",
        "tags": [
            "cheat"
        ],
        "value": "-1"
    },
    "r_pix_recordframes": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_pix_start": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_pixelfog": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_pixelvisibility_partial": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "r_pixelvisibility_spew": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "r_portalsopenall": {
        "desc": "Open all portals",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_printdecalinfo": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "r_proplightingfromdisk": {
        "desc": "0=Off, 1=On, 2=Show Errors",
        "tags": [],
        "value": "1"
    },
    "r_proplightingpooling": {
        "desc": "0 - off, 1 - static prop color meshes are allocated from a single shared vertex buffer (on hardware that supports stream offset",
        "tags": [
            "cheat"
        ],
        "value": "-1"
    },
    "r_propsmaxdist": {
        "desc": "Maximum visible distance",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "r_queued_decals": {
        "desc": "Offloads a bit of decal rendering setup work to the material system queue when enabled.",
        "tags": [],
        "value": "0"
    },
    "r_queued_post_processing": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "r_queued_ropes": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "r_radiosity": {
        "desc": "0: no radiosity 1: radiosity with ambient cube (6 samples) 2: radiosity with 162 samples 3: 162 samples for static props, 6 sam",
        "tags": [
            "cheat"
        ],
        "value": "4"
    },
    "r_rainalpha": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_rainalphapow": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_raindensity": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_rainlength": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_rainspeed": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "600"
    },
    "r_rainwidth": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_randomflex": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_renderoverlayfragment": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_rimlight": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_rootlod": {
        "desc": "Root LOD",
        "tags": [
            "a"
        ],
        "value": "2"
    },
    "r_ropes_holiday_light_color": {
        "desc": "Set each light's color: [light0-3] [r0-255] [g0-255] [b0-255]",
        "tags": [],
        "value": "cmd"
    },
    "r_ropetranslucent": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "r_screenfademaxsize": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_screenfademinsize": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_screenoverlay": {
        "desc": "Draw specified material as an overlay",
        "tags": [],
        "value": "cmd"
    },
    "r_sequence_debug": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "r_shader_srgb": {
        "desc": "-1 = use hardware caps. 0 = use hardware srgb. 1 = use shader srgb(software lookup)",
        "tags": [],
        "value": "0"
    },
    "r_shadowangles": {
        "desc": "Set shadow angles",
        "tags": [],
        "value": "cmd"
    },
    "r_shadowblobbycutoff": {
        "desc": "some shadow stuff",
        "tags": [],
        "value": "cmd"
    },
    "r_shadowcolor": {
        "desc": "Set shadow color",
        "tags": [],
        "value": "cmd"
    },
    "r_shadowdir": {
        "desc": "Set shadow direction",
        "tags": [],
        "value": "cmd"
    },
    "r_shadowdist": {
        "desc": "Set shadow distance",
        "tags": [],
        "value": "cmd"
    },
    "r_shadowids": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_shadowmaxrendered": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "32"
    },
    "r_shadowrendertotexture": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_shadows": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_shadows_gamecontrol": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "-1"
    },
    "r_shadowwireframe": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_showenvcubemap": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_showz_power": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "r_skin": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_skybox": {
        "desc": "Enable the rendering of sky boxes",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_snapportal": {
        "desc": "",
        "tags": [],
        "value": "-1"
    },
    "r_spewleaf": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_spray_lifetime": {
        "desc": "Number of rounds player sprays are visible",
        "tags": [],
        "value": "2"
    },
    "r_sse2": {
        "desc": "Enable/disable SSE2 code",
        "tags": [],
        "value": "cmd"
    },
    "r_sse_s": {
        "desc": "sse ins for particle sphere create",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "r_staticprop_lod": {
        "desc": "",
        "tags": [],
        "value": "-1"
    },
    "r_staticpropinfo": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_studio_stats": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_studio_stats_lock": {
        "desc": "Lock the current studio stats entity selection",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_studio_stats_mode": {
        "desc": "Sets a mode for r_studio_stats. Modes are as follows:  0 = Entity under your crosshair  1 = Weapon held by player under your cr",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "r_swingflashlight": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_teeth": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "r_threaded_client_shadow_manager": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "r_threaded_particles": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "r_threaded_renderables": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "r_unloadlightmaps": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_updaterefracttexture": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "r_vehicleBrakeRate": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "r_visambient": {
        "desc": "Draw leaf ambient lighting samples.  Needs mat_leafvis 1 to work",
        "tags": [],
        "value": "0"
    },
    "r_visocclusion": {
        "desc": "Activate/deactivate wireframe rendering of what the occlusion system is doing.",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_visualizelighttraces": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_visualizelighttracesshowfulltrace": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_visualizeproplightcaching": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "r_visualizetraces": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "r_waterforceexpensive": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "r_waterforcereflectentities": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_worldlightmin": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "r_worldlights": {
        "desc": "number of world lights to use per vertex",
        "tags": [],
        "value": "4"
    },
    "r_worldlistcache": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "ragdoll_sleepaftertime": {
        "desc": "After this many seconds of being basically stationary, the ragdoll will go to sleep.",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "randommap": {
        "desc": "Changelevel to a random map in the mapcycle file",
        "tags": [],
        "value": "cmd"
    },
    "rate": {
        "desc": "Max bytes/sec the host can receive data",
        "tags": [
            "a",
            "user"
        ],
        "value": "100000"
    },
    "rcon": {
        "desc": "Issue an rcon command.",
        "tags": [],
        "value": "cmd"
    },
    "rcon_address": {
        "desc": "Address of remote server if sending unconnected rcon commands (format x.x.x.x:p)",
        "tags": [
            "norecord"
        ],
        "value": "0"
    },
    "rcon_password": {
        "desc": "remote console password.",
        "tags": [
            "norecord"
        ],
        "value": "0"
    },
    "recompute_speed": {
        "desc": "Recomputes clock speed (for debugging purposes).",
        "tags": [],
        "value": "cmd"
    },
    "record": {
        "desc": "Record a demo.",
        "tags": [],
        "value": "cmd"
    },
    "refresh_options_dialog": {
        "desc": "Refresh the options dialog.",
        "tags": [],
        "value": "cmd"
    },
    "reload": {
        "desc": "Reload the most recent saved game (add setpos to jump to current view position on reload).",
        "tags": [],
        "value": "cmd"
    },
    "reload_materials": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "removeid": {
        "desc": "Remove a user ID from the ban list.",
        "tags": [],
        "value": "cmd"
    },
    "removeip": {
        "desc": "Remove an IP address from the ban list.",
        "tags": [],
        "value": "cmd"
    },
    "replay_add_fake_replays": {
        "desc": "Adds a set of fake replays",
        "tags": [],
        "value": "cmd"
    },
    "replay_block_dump_interval": {
        "desc": "The server will write partial replay files at this interval when recording.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "10"
    },
    "replay_buffersize": {
        "desc": "Maximum size for the replay memory buffer.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "32"
    },
    "replay_cache_client_ragdolls": {
        "desc": "Record ragdolls on the client during.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "replay_clearqueuedtakes": {
        "desc": "Clear takes from render queue.",
        "tags": [],
        "value": "cmd"
    },
    "replay_data_lifespan": {
        "desc": "The number of days before replay data will be removed from the server.  Server operators can expect that any data written more",
        "tags": [
            "rep",
            "norecord",
            "cl"
        ],
        "value": "1"
    },
    "replay_deathcammaxverticaloffset": {
        "desc": "Vertical offset for player death camera",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "150"
    },
    "replay_debug": {
        "desc": "Show Replay debug info.",
        "tags": [
            "norecord"
        ],
        "value": "0"
    },
    "replay_deleteclientreplays": {
        "desc": "Deletes all replays from client replay history, as well as all files associated with each replay.",
        "tags": [],
        "value": "cmd"
    },
    "replay_docleanup": {
        "desc": "Deletes stale session data from the fileserver.  'replay_docleanup force' will remove all replay session data.",
        "tags": [],
        "value": "cmd"
    },
    "replay_dofileserver_cleanup_on_start": {
        "desc": "Cleanup any stale replay data (both locally and on fileserver) at startup.",
        "tags": [
            "sv",
            "cl"
        ],
        "value": "1"
    },
    "replay_dopublishtest": {
        "desc": "Do a replay publish test using the current setup.",
        "tags": [],
        "value": "cmd"
    },
    "replay_editor_camera_length": {
        "desc": "This is the camera length used to simulate camera shake in the replay editor.  The larger this number, the more the actual posi",
        "tags": [
            "a",
            "cl"
        ],
        "value": "15"
    },
    "replay_editor_fov_mousewheel_invert": {
        "desc": "Invert FOV zoom/unzoom on mousewheel in the replay editor.",
        "tags": [
            "a",
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_editor_fov_mousewheel_multiplier": {
        "desc": "The multiplier on mousewheel input for adjusting camera FOV in the replay editor.",
        "tags": [
            "a",
            "norecord",
            "cl"
        ],
        "value": "5"
    },
    "replay_enable": {
        "desc": "Enable Replay recording on server",
        "tags": [
            "rep",
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_enableeventbasedscreenshots": {
        "desc": "If disabled, only take a screenshot when a replay is saved.  If enabled, take up to replay_maxscreenshotsperreplay screenshots,",
        "tags": [
            "a",
            "norecord",
            "cl"
        ],
        "value": "1"
    },
    "replay_enablerenderpreview": {
        "desc": "Enable preview during replay render.",
        "tags": [
            "a",
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_fileserver_autocleanup": {
        "desc": "Automatically do fileserver cleanup in between rounds?  This is the same as explicitly calling replay_docleanup.",
        "tags": [
            "sv",
            "cl"
        ],
        "value": "0"
    },
    "replay_fileserver_host": {
        "desc": "The hostname of the Web server hosting replays.  This can be an IP or a hostname, e.g. '1.2.3.4' or 'www.myserver.com'",
        "tags": [
            "rep",
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_fileserver_offload_aborttime": {
        "desc": "The time after which publishing will be aborted for a session block or session info file.",
        "tags": [
            "sv",
            "cl"
        ],
        "value": "60"
    },
    "replay_fileserver_offload_enable": {
        "desc": "If enabled, offload session blocks to a secondary machine using the replay_offload_* convars.",
        "tags": [
            "sv",
            "cl"
        ],
        "value": "0"
    },
    "replay_fileserver_offload_hostname": {
        "desc": "Hostname for FTP server where session blocks will be offloaded.",
        "tags": [
            "sv",
            "cl"
        ],
        "value": "0"
    },
    "replay_fileserver_offload_login": {
        "desc": "Login for session block offloading.",
        "tags": [
            "sv",
            "cl"
        ],
        "value": "0"
    },
    "replay_fileserver_offload_maxuploads": {
        "desc": "The maximum number of concurrent uploads allowed.",
        "tags": [
            "sv",
            "cl"
        ],
        "value": "1"
    },
    "replay_fileserver_offload_password": {
        "desc": "Login for session block offloading.",
        "tags": [
            "sv",
            "prot",
            "cl"
        ],
        "value": "0"
    },
    "replay_fileserver_offload_port": {
        "desc": "Port number for FTP server where session blocks will be offloaded.",
        "tags": [
            "sv",
            "cl"
        ],
        "value": "21"
    },
    "replay_fileserver_offload_protocol": {
        "desc": "Must be 'ftp'",
        "tags": [
            "sv",
            "cl"
        ],
        "value": "0"
    },
    "replay_fileserver_offload_proxy_host": {
        "desc": "The hostname of the proxy server.",
        "tags": [
            "sv",
            "cl"
        ],
        "value": "0"
    },
    "replay_fileserver_offload_proxy_port": {
        "desc": "The port of the proxy server.",
        "tags": [
            "sv",
            "cl"
        ],
        "value": "8080"
    },
    "replay_fileserver_offload_remotepath": {
        "desc": "Remote path where blocks will be stored on the FTP server for session block offloading.",
        "tags": [
            "sv",
            "cl"
        ],
        "value": "0"
    },
    "replay_fileserver_offload_useproxy": {
        "desc": "If enabled, a proxy will be used for FTP connections.",
        "tags": [
            "sv",
            "cl"
        ],
        "value": "0"
    },
    "replay_fileserver_path": {
        "desc": "If your replays are stored at 'http://123.123.123.123:4567/tf/replays', replay_fileserver_path should be set to '/tf/replays'",
        "tags": [
            "rep",
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_fileserver_port": {
        "desc": "The port for the Web server hosting replays.  For example, if your replays are stored at 'http://123.123.123.123:4567/tf/replay",
        "tags": [
            "rep",
            "norecord",
            "cl"
        ],
        "value": "80"
    },
    "replay_fileserver_protocol": {
        "desc": "Can be 'http' or 'https'",
        "tags": [
            "rep",
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_flushinterval": {
        "desc": "Replay system will flush to disk a maximum of every replay_flushinterval seconds.",
        "tags": [
            "a",
            "norecord",
            "cl"
        ],
        "value": "15"
    },
    "replay_forcereconstruct": {
        "desc": "Force the reconstruction of replays each time.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_hidebrowser": {
        "desc": "Hides replay browser",
        "tags": [],
        "value": "cmd"
    },
    "replay_ignorereplayticks": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "replay_local_fileserver_path": {
        "desc": "The file server local path.  For example, 'c:\\MyWebServer\\htdocs\\replays' or '/MyWebServer/htdocs/replays'.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_max_publish_threads": {
        "desc": "The max number of threads allowed for publishing replay data, e.g. FTP threads.",
        "tags": [
            "sv",
            "cl"
        ],
        "value": "4"
    },
    "replay_maxconcurrentdownloads": {
        "desc": "The maximum number of concurrent downloads allowed.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "3"
    },
    "replay_maxscreenshotsperreplay": {
        "desc": "The maximum number of screenshots that can be taken for any given replay.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "8"
    },
    "replay_mintimebetweenscreenshots": {
        "desc": "The minimum time (in seconds) that must pass between screenshots being taken.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "5"
    },
    "replay_msgduration_connectrecording": {
        "desc": "Duration for the message that pops up when you connect to a server already recording replays.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "8"
    },
    "replay_msgduration_error": {
        "desc": "Duration for replays available message.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "6"
    },
    "replay_msgduration_misc": {
        "desc": "Duration for misc replays messages (server errors and such).",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "5"
    },
    "replay_msgduration_replaysavailable": {
        "desc": "Duration for replays available message.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "6"
    },
    "replay_msgduration_startrecord": {
        "desc": "Duration for start record message.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "6"
    },
    "replay_msgduration_stoprecord": {
        "desc": "Duration for stop record message.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "6"
    },
    "replay_name": {
        "desc": "Replay bot name",
        "tags": [
            "sv",
            "cl"
        ],
        "value": "0"
    },
    "replay_playerdeathscreenshotdelay": {
        "desc": "Amount of time to wait after player is killed before taking a screenshot",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "2"
    },
    "replay_postdeathrecordtime": {
        "desc": "The amount of time (seconds) to be recorded after you die for a given replay.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "5"
    },
    "replay_postwinreminderduration": {
        "desc": "The number of seconds to show a Replay reminder, post-win/lose.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "5"
    },
    "replay_printclientreplays": {
        "desc": "Prints out all client replay info",
        "tags": [],
        "value": "cmd"
    },
    "replay_printqueuedtakes": {
        "desc": "Print a list of takes queued for rendering.",
        "tags": [],
        "value": "cmd"
    },
    "replay_printsessioninfo": {
        "desc": "Print session info",
        "tags": [],
        "value": "cmd"
    },
    "replay_publish_simulate_delay_ftp": {
        "desc": "Simulate a delay (in seconds) when publishing replay data via FTP.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_publish_simulate_delay_local_http": {
        "desc": "Simulate a delay (in seconds) when publishing replay data via local HTTP.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_publish_simulate_rename_fail": {
        "desc": "Simulate a rename failure during local HTTP publishing, which will force a manual copy & delete.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_quitmsg_dontaskagain": {
        "desc": "The replay system will ask you to render your replays on quit, unless this cvar is 1.",
        "tags": [
            "a",
            "norecord",
            "cl"
        ],
        "value": "1"
    },
    "replay_ragdoll_dbg": {
        "desc": "Display replay ragdoll debugging information.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "replay_record": {
        "desc": "Starts Replay demo recording.",
        "tags": [],
        "value": "cmd"
    },
    "replay_record_voice": {
        "desc": "If enabled, voice data is recorded into the replay files.",
        "tags": [
            "sv",
            "cl"
        ],
        "value": "1"
    },
    "replay_reloadbrowser": {
        "desc": "Reloads replay data and display replay browser",
        "tags": [],
        "value": "cmd"
    },
    "replay_removeclientreplay": {
        "desc": "Remove the replay at the given index.",
        "tags": [],
        "value": "cmd"
    },
    "replay_renderpause": {
        "desc": "Pause Replay rendering.",
        "tags": [],
        "value": "cmd"
    },
    "replay_rendersetting_encodingquality": {
        "desc": "Render quality: the higher the quality, the larger the resulting movie file size.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "100"
    },
    "replay_rendersetting_exportraw": {
        "desc": "Export raw TGA frames and a .wav file, instead of encoding a movie file.",
        "tags": [
            "a",
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_rendersetting_motionblur_can_toggle": {
        "desc": "",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_rendersetting_motionblurenabled": {
        "desc": "Motion blur enabled/disabled.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "1"
    },
    "replay_rendersetting_motionblurquality": {
        "desc": "Motion blur quality.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_rendersetting_quitwhendone": {
        "desc": "Quit after rendering is completed.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_rendersetting_renderglow": {
        "desc": "Glow effect enabled/disabled.",
        "tags": [
            "a",
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_renderunpause": {
        "desc": "Unpause Replay rendering.",
        "tags": [],
        "value": "cmd"
    },
    "replay_screenshotkilldelay": {
        "desc": "Delay before taking a screenshot when you kill someone, in seconds.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_screenshotresolution": {
        "desc": "0 for low-res screenshots (width=512), 1 for hi-res (width=1024)",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_screenshotsentrykilldelay": {
        "desc": "Delay before taking a screenshot when you kill someone, in seconds.",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "replay_sentrycammaxverticaloffset": {
        "desc": "Vertical offset from a sentry on sentry kill",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "10"
    },
    "replay_sentrycamoffset_frontback": {
        "desc": "Front/back offset for sentry POV screenshot",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "-50"
    },
    "replay_sentrycamoffset_leftright": {
        "desc": "Left/right offset for sentry POV screenshot",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "-25"
    },
    "replay_sentrycamoffset_updown": {
        "desc": "Up/down offset for sentry POV screenshot",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "22"
    },
    "replay_sessioninfo_updatefrequency": {
        "desc": "If a replay has not been downloaded, the replay browser will update the status of a given replay on the server based on this cv",
        "tags": [
            "norecord",
            "cl"
        ],
        "value": "5"
    },
    "replay_stoprecord": {
        "desc": "Stop Replay demo recording.",
        "tags": [],
        "value": "cmd"
    },
    "replay_test_take_save_dlg": {
        "desc": "Open replay save take dlg",
        "tags": [],
        "value": "cmd"
    },
    "replay_voice_during_playback": {
        "desc": "Play player voice chat during replay playback",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "report_entities": {
        "desc": "Lists all entities",
        "tags": [],
        "value": "cmd"
    },
    "report_simthinklist": {
        "desc": "Lists all simulating/thinking entities",
        "tags": [],
        "value": "cmd"
    },
    "report_soundpatch": {
        "desc": "reports sound patch count",
        "tags": [],
        "value": "cmd"
    },
    "report_touchlinks": {
        "desc": "Lists all touchlinks",
        "tags": [],
        "value": "cmd"
    },
    "resetplayerstats": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "respawn_entities": {
        "desc": "Respawn all the entities in the map.",
        "tags": [],
        "value": "cmd"
    },
    "restart": {
        "desc": "Restart the game on the same level (add setpos to jump to current view position on restart).",
        "tags": [],
        "value": "cmd"
    },
    "retry": {
        "desc": "Retry connection to last server.",
        "tags": [],
        "value": "cmd"
    },
    "room_type": {
        "desc": "",
        "tags": [
            "demo"
        ],
        "value": "0"
    },
    "rope_averagelight": {
        "desc": "Makes ropes use average of cubemap lighting instead of max intensity.",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "rope_collide": {
        "desc": "Collide rope with the world",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "rope_rendersolid": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "rope_shake": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "rope_smooth": {
        "desc": "Do an antialiasing effect on ropes",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "rope_smooth_enlarge": {
        "desc": "How much to enlarge ropes in screen space for antialiasing effect",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "rope_smooth_maxalpha": {
        "desc": "Alpha for rope antialiasing effect",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "rope_smooth_maxalphawidth": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "rope_smooth_minalpha": {
        "desc": "Alpha for rope antialiasing effect",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "rope_smooth_minwidth": {
        "desc": "When using smoothing, this is the min screenspace width it lets a rope shrink to",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "rope_solid_maxalpha": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "rope_solid_maxwidth": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "rope_solid_minalpha": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "rope_solid_minwidth": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "rope_subdiv": {
        "desc": "Rope subdivision amount",
        "tags": [
            "cl"
        ],
        "value": "2"
    },
    "rope_wind_dist": {
        "desc": "Don't use CPU applying small wind gusts to ropes when they're past this distance.",
        "tags": [
            "cl"
        ],
        "value": "1000"
    },
    "rr_debug_qa": {
        "desc": "Set to 1 to see debug related to the Question & Answer system used to create conversations between allied NPCs.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "rr_debugresponses": {
        "desc": "Show verbose matching output (1 for simple, 2 for rule scoring). If set to 3, it will only show response success/failure for np",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "rr_debugrule": {
        "desc": "If set to the name of the rule, that rule's score will be shown whenever a concept is passed into the response rules system.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "rr_dumpresponses": {
        "desc": "Dump all response_rules.txt and rules (requires restart)",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "rr_reloadresponsesystems": {
        "desc": "Reload all response system scripts.",
        "tags": [],
        "value": "cmd"
    },
    "save": {
        "desc": "Saves current game.",
        "tags": [],
        "value": "cmd"
    },
    "save_async": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "save_asyncdelay": {
        "desc": "For testing, adds this many milliseconds of delay to the save operation.",
        "tags": [],
        "value": "0"
    },
    "save_console": {
        "desc": "Autosave on the PC behaves like it does on the consoles.",
        "tags": [],
        "value": "0"
    },
    "save_disable": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "save_finish_async": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "save_history_count": {
        "desc": "Keep this many old copies in history of autosaves and quicksaves.",
        "tags": [],
        "value": "1"
    },
    "save_huddelayframes": {
        "desc": "Number of frames to defer for drawing the Saving message.",
        "tags": [],
        "value": "1"
    },
    "save_in_memory": {
        "desc": "Set to 1 to save to memory instead of disk (Xbox 360)",
        "tags": [],
        "value": "0"
    },
    "save_noxsave": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "save_replay": {
        "desc": "Save a replay of the current life if possible.",
        "tags": [],
        "value": "cmd"
    },
    "save_screenshot": {
        "desc": "0 = none, 1 = non-autosave, 2 = always",
        "tags": [],
        "value": "1"
    },
    "save_spew": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "say": {
        "desc": "Display player message",
        "tags": [],
        "value": "cmd"
    },
    "say_team": {
        "desc": "Display player message to team",
        "tags": [],
        "value": "cmd"
    },
    "sb_close_browser_on_connect": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sb_dontshow_maxplayer_warning": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sb_filter_incompatible_versions": {
        "desc": "Hides servers running incompatible versions from the server browser.  (Internet tab only.)",
        "tags": [],
        "value": "1"
    },
    "sb_mod_suggested_maxplayers": {
        "desc": "",
        "tags": [],
        "value": "24"
    },
    "sb_quick_list_bit_field": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "sb_showblacklists": {
        "desc": "If set to 1, blacklist rules will be printed to the console as they're applied.",
        "tags": [],
        "value": "0"
    },
    "scene_async_prefetch_spew": {
        "desc": "Display async .ani file loading info.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "scene_clamplookat": {
        "desc": "Clamp head turns to a max of 20 degrees per think.",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "scene_clientflex": {
        "desc": "Do client side flex animation.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "scene_flatturn": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "scene_flush": {
        "desc": "Flush all .vcds from the cache and reload from disk.",
        "tags": [],
        "value": "cmd"
    },
    "scene_forcecombined": {
        "desc": "When playing back, force use of combined .wav files even in english.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "scene_maxcaptionradius": {
        "desc": "Only show closed captions if recipient is within this many units of speaking actor (0==disabled).",
        "tags": [
            "sv"
        ],
        "value": "1200"
    },
    "scene_print": {
        "desc": "When playing back a scene, print timing and event info to console.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "0"
    },
    "scene_showfaceto": {
        "desc": "When playing back, show the directions of faceto events.",
        "tags": [
            "a",
            "sv"
        ],
        "value": "0"
    },
    "scene_showlook": {
        "desc": "When playing back, show the directions of look events.",
        "tags": [
            "a",
            "sv"
        ],
        "value": "0"
    },
    "scene_showmoveto": {
        "desc": "When moving, show the end location.",
        "tags": [
            "a",
            "sv"
        ],
        "value": "0"
    },
    "scene_showunlock": {
        "desc": "Show when a vcd is playing but normal AI is running.",
        "tags": [
            "a",
            "sv"
        ],
        "value": "0"
    },
    "scr_centertime": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "screenshot": {
        "desc": "Take a screenshot.",
        "tags": [],
        "value": "cmd"
    },
    "sensitivity": {
        "desc": "Mouse sensitivity.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "server_game_time": {
        "desc": "Gives the game time in seconds (server's curtime)",
        "tags": [],
        "value": "cmd"
    },
    "servercfgfile": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "setang": {
        "desc": "Snap player eyes to specified pitch yaw <roll:optional> (must have sv_cheats).",
        "tags": [],
        "value": "cmd"
    },
    "setang_exact": {
        "desc": "Snap player eyes and orientation to specified pitch yaw <roll:optional> (must have sv_cheats).",
        "tags": [],
        "value": "cmd"
    },
    "setinfo": {
        "desc": "Adds a new user info value",
        "tags": [],
        "value": "cmd"
    },
    "setmodel": {
        "desc": "Changes's player's model",
        "tags": [],
        "value": "cmd"
    },
    "setpause": {
        "desc": "Set the pause state of the server.",
        "tags": [],
        "value": "cmd"
    },
    "setpos": {
        "desc": "Move player to specified origin (must have sv_cheats).",
        "tags": [],
        "value": "cmd"
    },
    "setpos_exact": {
        "desc": "Move player to an exact specified origin (must have sv_cheats).",
        "tags": [],
        "value": "cmd"
    },
    "shake": {
        "desc": "Shake the screen.",
        "tags": [],
        "value": "cmd"
    },
    "shake_show": {
        "desc": "Displays a list of the active screen shakes.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "shake_stop": {
        "desc": "Stops all active screen shakes.",
        "tags": [],
        "value": "cmd"
    },
    "showbudget_texture": {
        "desc": "Enable the texture budget panel.",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "showbudget_texture_global_dumpstats": {
        "desc": "Dump all items in +showbudget_texture_global in a text form",
        "tags": [],
        "value": "cmd"
    },
    "showbudget_texture_global_sum": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "showconsole": {
        "desc": "Show the console.",
        "tags": [],
        "value": "cmd"
    },
    "showhitlocation": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "showinfo": {
        "desc": "Shows a info panel: <type> <title> <message> [<command number>]",
        "tags": [],
        "value": "cmd"
    },
    "showmapinfo": {
        "desc": "Show map info panel",
        "tags": [],
        "value": "cmd"
    },
    "showpanel": {
        "desc": "Shows a viewport panel <name>",
        "tags": [],
        "value": "cmd"
    },
    "showparticlecounts": {
        "desc": "Display number of particles drawn per frame",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "showschemevisualizer": {
        "desc": "Show borders, fonts and colors for a particular scheme.  The default is ClientScheme.res",
        "tags": [],
        "value": "cmd"
    },
    "showstatsdlg": {
        "desc": "Shows the player stats dialog",
        "tags": [],
        "value": "cmd"
    },
    "showtriggers": {
        "desc": "Shows trigger brushes",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "showtriggers_toggle": {
        "desc": "Toggle show triggers",
        "tags": [],
        "value": "cmd"
    },
    "simple_bot_add": {
        "desc": "Add a simple bot.",
        "tags": [],
        "value": "cmd"
    },
    "singlestep": {
        "desc": "Run engine in single step mode ( set next to 1 to advance a frame )",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "sixense_aim_1to1_heading_multiplier": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "3"
    },
    "sixense_aim_1to1_pitch_multiplier": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "3"
    },
    "sixense_aim_1to1_ratchet_vertical": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_aim_freeaim_accel_band_exponent": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_aim_freeaim_accel_band_size": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "15"
    },
    "sixense_aim_freeaim_auto_level_rate": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_aim_freeaim_dead_zone_radius": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "sixense_aim_freeaim_heading_multiplier": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_aim_freeaim_max_speed": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "12"
    },
    "sixense_aim_freeaim_pitch_multiplier": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_aim_freeaim_spin_disabled": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "sixense_aim_freeaim_switch_blend_time_enter": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "sixense_aim_freeaim_switch_blend_time_exit": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "sixense_aim_scope_heading_multiplier": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "sixense_aim_scope_pitch_multiplier": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "sixense_always_draw_crosshair": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_base_offset_x": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "sixense_base_offset_y": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "sixense_base_offset_z": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "-20"
    },
    "sixense_bind": {
        "desc": "Bind a concommand to a button.",
        "tags": [],
        "value": "cmd"
    },
    "sixense_clear_bindings": {
        "desc": "Clear all sixense bindings.",
        "tags": [],
        "value": "cmd"
    },
    "sixense_controller_angle_mode": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "sixense_create_default_bindings": {
        "desc": "Erase all current bindings and load the default bindings for this game.",
        "tags": [],
        "value": "cmd"
    },
    "sixense_crosshair_horiz_multiplier": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_crosshair_vert_multiplier": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_crouch_sensitivity": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_delete_binding": {
        "desc": "Delete a single binding by index.",
        "tags": [],
        "value": "cmd"
    },
    "sixense_disable_gestures": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "sixense_enabled": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "sixense_exit_metroid_blend": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "sixense_exit_one_to_one_dot": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "sixense_features_enabled": {
        "desc": "",
        "tags": [
            "rep",
            "cl"
        ],
        "value": "0"
    },
    "sixense_feet_angles_offset_stick_spin_exponent": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_feet_angles_offset_stick_spin_horiz_multiplier": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "7"
    },
    "sixense_feet_angles_offset_stick_spin_invert_pitch": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_feet_angles_offset_stick_spin_vert_multiplier": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "4"
    },
    "sixense_filter_level": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "sixense_jump_sensitivity": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_left_handed": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "sixense_list_bindings": {
        "desc": "List the sixense bindings.",
        "tags": [],
        "value": "cmd"
    },
    "sixense_max_charge_spin": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "3"
    },
    "sixense_melee_pitch_blend_val": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "sixense_mode": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "sixense_mouse_enabled": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_mouse_sensitivity": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_point_gesture_angle_threshold": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "15"
    },
    "sixense_reload_sensitivity": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_roll_correct_blend": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "sixense_select_grenade": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "sixense_select_machinegun": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "sixense_select_melee": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "sixense_select_pistol": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "sixense_sensitivity_level": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "2"
    },
    "sixense_set_base_offset": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "sixense_set_filter_params": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "sixense_show_frame": {
        "desc": "Show/hide Sixense UI.",
        "tags": [],
        "value": "cmd"
    },
    "sixense_spring_view_enabled": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_spring_view_max_angle": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "45"
    },
    "sixense_spring_view_max_spring": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "sixense_spring_view_min_angle": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_spring_view_min_spring": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "sixense_teleport_metroid_blend_time": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "3"
    },
    "sixense_teleport_wait_to_blend_time": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "sixense_tilt_gesture_angle_threshold": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "35"
    },
    "sixense_trigger_threshold": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "sixense_walking_dead_zone_percent": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "10"
    },
    "sixense_walking_exponent": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_weapon_select_sensitivity": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "sixense_write_bindings": {
        "desc": "Save the sixense bindings to a file.",
        "tags": [],
        "value": "cmd"
    },
    "sixense_zoom_momentary_time": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "500"
    },
    "sk_ally_regen_time": {
        "desc": "Time taken for an ally to regenerate a point of health.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "sk_autoaim_mode": {
        "desc": "",
        "tags": [
            "a",
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "sk_npc_arm": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sk_npc_chest": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sk_npc_head": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "2"
    },
    "sk_npc_leg": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sk_npc_stomach": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sk_player_arm": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sk_player_chest": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sk_player_head": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "2"
    },
    "sk_player_leg": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sk_player_stomach": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sk_plr_dmg_grenade": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "skill": {
        "desc": "Game skill level (1-3).",
        "tags": [
            "a"
        ],
        "value": "1"
    },
    "skip_next_map": {
        "desc": "Skips the next map in the map rotation for the server.",
        "tags": [],
        "value": "cmd"
    },
    "slot0": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "slot1": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "slot10": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "slot11": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "slot12": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "slot2": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "slot3": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "slot4": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "slot5": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "slot6": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "slot7": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "slot8": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "slot9": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "smoothstairs": {
        "desc": "Smooth player eye z coordinate when traversing stairs.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "snapto": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "snd_ShowThreadFrameTime": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "snd_async_flush": {
        "desc": "Flush all unlocked async audio data",
        "tags": [],
        "value": "cmd"
    },
    "snd_async_fullyasync": {
        "desc": "All playback is fully async (sound doesn't play until data arrives).",
        "tags": [],
        "value": "0"
    },
    "snd_async_minsize": {
        "desc": "",
        "tags": [],
        "value": "262144"
    },
    "snd_async_showmem": {
        "desc": "Show async memory stats",
        "tags": [],
        "value": "cmd"
    },
    "snd_async_spew_blocking": {
        "desc": "Spew message to console any time async sound loading blocks on file i/o.",
        "tags": [],
        "value": "0"
    },
    "snd_async_stream_spew": {
        "desc": "Spew streaming info ( 0=Off, 1=streams, 2=buffers",
        "tags": [],
        "value": "0"
    },
    "snd_buildcache": {
        "desc": "<directory or VPK filename>  Rebulds sound cache for a given search path.",
        "tags": [],
        "value": "cmd"
    },
    "snd_cull_duplicates": {
        "desc": "If nonzero, aggressively cull duplicate sounds during mixing. The number specifies the number of duplicates allowed to be playe",
        "tags": [],
        "value": "0"
    },
    "snd_defer_trace": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "snd_delay_sound_shift": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "snd_disable_mixer_duck": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "snd_duckerattacktime": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "snd_duckerreleasetime": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "2"
    },
    "snd_duckerthreshold": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "snd_ducktovolume": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "snd_dumpclientsounds": {
        "desc": "Dump sounds to VXConsole",
        "tags": [],
        "value": "cmd"
    },
    "snd_foliage_db_loss": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "4"
    },
    "snd_gain": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "snd_gain_max": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "1"
    },
    "snd_gain_min": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "snd_legacy_surround": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "snd_lockpartial": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "snd_mix_async": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "snd_mixahead": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "snd_musicvolume": {
        "desc": "Music volume",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "snd_mute_losefocus": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "1"
    },
    "snd_noextraupdate": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "snd_obscured_gain_dB": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "-2"
    },
    "snd_pitchquality": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "snd_profile": {
        "desc": "",
        "tags": [
            "demo"
        ],
        "value": "0"
    },
    "snd_refdb": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "60"
    },
    "snd_refdist": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "36"
    },
    "snd_restart": {
        "desc": "Restart sound system.",
        "tags": [],
        "value": "cmd"
    },
    "snd_show": {
        "desc": "Show sounds info",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "snd_showclassname": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "snd_showmixer": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "snd_showstart": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "snd_soundmixer": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "snd_spatialize_roundrobin": {
        "desc": "Lowend optimization: if nonzero, spatialize only a fraction of sound channels each frame. 1/2^x of channels will be spatialized",
        "tags": [],
        "value": "0"
    },
    "snd_surround_speakers": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "snd_visualize": {
        "desc": "Show sounds location in world",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "snd_vox_captiontrace": {
        "desc": "Shows sentence name for sentences which are set not to show captions.",
        "tags": [],
        "value": "0"
    },
    "snd_vox_globaltimeout": {
        "desc": "",
        "tags": [],
        "value": "300"
    },
    "snd_vox_sectimetout": {
        "desc": "",
        "tags": [],
        "value": "300"
    },
    "snd_vox_seqtimetout": {
        "desc": "",
        "tags": [],
        "value": "300"
    },
    "sndplaydelay": {
        "desc": "Usage:  sndplaydelay delay_in_sec (negative to skip ahead) soundname",
        "tags": [],
        "value": "cmd"
    },
    "soundfade": {
        "desc": "Fade client volume.",
        "tags": [],
        "value": "cmd"
    },
    "soundinfo": {
        "desc": "Describe the current sound device.",
        "tags": [],
        "value": "cmd"
    },
    "soundlist": {
        "desc": "List all known sounds.",
        "tags": [],
        "value": "cmd"
    },
    "soundpatch_captionlength": {
        "desc": "How long looping soundpatch captions should display for.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "2"
    },
    "soundscape_debug": {
        "desc": "When on, draws lines to all env_soundscape entities. Green lines show the active soundscape, red lines show soundscapes that ar",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "soundscape_dumpclient": {
        "desc": "Dumps the client's soundscape data.",
        "tags": [],
        "value": "cmd"
    },
    "soundscape_fadetime": {
        "desc": "Time to crossfade sound effects between soundscapes",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "3"
    },
    "soundscape_flush": {
        "desc": "Flushes the server & client side soundscapes",
        "tags": [],
        "value": "cmd"
    },
    "speak": {
        "desc": "Play a constructed sentence.",
        "tags": [],
        "value": "cmd"
    },
    "spec_autodirector": {
        "desc": "Auto-director chooses best view modes while spectating",
        "tags": [
            "clientcmd_can_execute",
            "cl"
        ],
        "value": "1"
    },
    "spec_freeze_distance_max": {
        "desc": "Maximum random distance from the target to stop when framing them in observer freeze cam.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "200"
    },
    "spec_freeze_distance_min": {
        "desc": "Minimum random distance from the target to stop when framing them in observer freeze cam.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "96"
    },
    "spec_freeze_time": {
        "desc": "Time spend frozen in observer freeze cam.",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "4"
    },
    "spec_freeze_traveltime": {
        "desc": "Time taken to zoom in to frame a target in observer freeze cam.",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "0"
    },
    "spec_mode": {
        "desc": "Set spectator mode",
        "tags": [],
        "value": "cmd"
    },
    "spec_next": {
        "desc": "Spectate next player",
        "tags": [],
        "value": "cmd"
    },
    "spec_player": {
        "desc": "Spectate player by name",
        "tags": [],
        "value": "cmd"
    },
    "spec_pos": {
        "desc": "dump position and angles to the console",
        "tags": [],
        "value": "cmd"
    },
    "spec_prev": {
        "desc": "Spectate previous player",
        "tags": [],
        "value": "cmd"
    },
    "spec_scoreboard": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "spec_track": {
        "desc": "Tracks an entity in spec mode",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "spew_consolelog_to_debugstring": {
        "desc": "Send console log to PLAT_DebugString()",
        "tags": [],
        "value": "0"
    },
    "spike": {
        "desc": "generates a fake spike",
        "tags": [],
        "value": "cmd"
    },
    "star_memory": {
        "desc": "Dump memory stats",
        "tags": [],
        "value": "cmd"
    },
    "startdemos": {
        "desc": "Play demos in demo sequence.",
        "tags": [],
        "value": "cmd"
    },
    "startmovie": {
        "desc": "Start recording movie frames.",
        "tags": [],
        "value": "cmd"
    },
    "startupmenu": {
        "desc": "Opens initial menu screen and loads the background bsp, but only if no other level is being loaded, and we're not in developer",
        "tags": [],
        "value": "cmd"
    },
    "stats": {
        "desc": "Prints server performance variables",
        "tags": [],
        "value": "cmd"
    },
    "status": {
        "desc": "Display map and connection status.",
        "tags": [],
        "value": "cmd"
    },
    "step_spline": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "stop": {
        "desc": "Finish recording demo.",
        "tags": [],
        "value": "cmd"
    },
    "stopdemo": {
        "desc": "Stop playing back a demo.",
        "tags": [],
        "value": "cmd"
    },
    "stopsound": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "stopsoundscape": {
        "desc": "Stops all soundscape processing and fades current looping sounds",
        "tags": [],
        "value": "cmd"
    },
    "studio_queue_mode": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "stuffcmds": {
        "desc": "Parses and stuffs command line + commands to command buffer.",
        "tags": [],
        "value": "cmd"
    },
    "suitvolume": {
        "desc": "",
        "tags": [
            "a",
            "sv"
        ],
        "value": "0"
    },
    "surfaceprop": {
        "desc": "Reports the surface properties at the cursor",
        "tags": [],
        "value": "cmd"
    },
    "sv_allow_color_correction": {
        "desc": "Allow or disallow clients to use color correction on this server.",
        "tags": [
            "rep"
        ],
        "value": "1"
    },
    "sv_allow_voice_from_file": {
        "desc": "Allow or disallow clients from using voice_inputfromfile on this server.",
        "tags": [
            "rep"
        ],
        "value": "1"
    },
    "sv_allow_votes": {
        "desc": "Allow voting?",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sv_allow_wait_command": {
        "desc": "Allow or disallow the wait command on clients connected to this server.",
        "tags": [
            "rep"
        ],
        "value": "1"
    },
    "sv_allowdownload": {
        "desc": "Allow clients to download files",
        "tags": [],
        "value": "1"
    },
    "sv_allowupload": {
        "desc": "Allow clients to upload customizations files",
        "tags": [],
        "value": "1"
    },
    "sv_alltalk": {
        "desc": "Players can hear all other players, no team restrictions",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "0"
    },
    "sv_alternateticks": {
        "desc": "If set, server only simulates entities on even numbered ticks.",
        "tags": [
            "sp"
        ],
        "value": "0"
    },
    "sv_autosave": {
        "desc": "Set to 1 to autosave game on level transition. Does not affect autosave triggers.",
        "tags": [],
        "value": "1"
    },
    "sv_benchmark_autovprofrecord": {
        "desc": "If running a benchmark and this is set, it will record a vprof file over the duration of the benchmark with filename benchmark.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "sv_benchmark_force_start": {
        "desc": "Force start the benchmark. This is only for debugging. It's better to set sv_benchmark to 1 and restart the level.",
        "tags": [],
        "value": "cmd"
    },
    "sv_benchmark_freeroam": {
        "desc": "Allow the local player to move freely in the benchmark. Only used for debugging. Don't use for real benchmarks because it will",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "sv_benchmark_numticks": {
        "desc": "If > 0, then it only runs the benchmark for this # of ticks.",
        "tags": [
            "sv"
        ],
        "value": "3300"
    },
    "sv_bonus_challenge": {
        "desc": "Set to values other than 0 to select a bonus map challenge type.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "0"
    },
    "sv_bonus_map_challenge_update": {
        "desc": "Updates a bonus map challenge score.",
        "tags": [],
        "value": "cmd"
    },
    "sv_bonus_map_complete": {
        "desc": "Completes a bonus map.",
        "tags": [],
        "value": "cmd"
    },
    "sv_bonus_map_unlock": {
        "desc": "Locks a bonus map.",
        "tags": [],
        "value": "cmd"
    },
    "sv_cacheencodedents": {
        "desc": "If set to 1, does an optimization to prevent extra SendTable_Encode calls.",
        "tags": [],
        "value": "1"
    },
    "sv_cheats": {
        "desc": "Allow cheats on server",
        "tags": [
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "sv_clearhinthistory": {
        "desc": "Clear memory of server side hints displayed to the player.",
        "tags": [],
        "value": "cmd"
    },
    "sv_client_cmdrate_difference": {
        "desc": "cl_cmdrate is moved to within sv_client_cmdrate_difference units of cl_updaterate before it is clamped between sv_mincmdrate an",
        "tags": [
            "rep"
        ],
        "value": "20"
    },
    "sv_client_max_interp_ratio": {
        "desc": "This can be used to limit the value of cl_interp_ratio for connected clients (only while they are connected). If sv_client_min_",
        "tags": [
            "rep"
        ],
        "value": "5"
    },
    "sv_client_min_interp_ratio": {
        "desc": "This can be used to limit the value of cl_interp_ratio for connected clients (only while they are connected).               -1",
        "tags": [
            "rep"
        ],
        "value": "1"
    },
    "sv_client_predict": {
        "desc": "This can be used to force the value of cl_predict for connected clients (only while they are connected).    -1 = let clients se",
        "tags": [
            "rep"
        ],
        "value": "-1"
    },
    "sv_clockcorrection_msecs": {
        "desc": "The server tries to keep each player's m_nTickBase withing this many msecs of the server absolute tickcount",
        "tags": [
            "sv"
        ],
        "value": "60"
    },
    "sv_compressstringtablebaselines": {
        "desc": "Enable to compression for string table baselines.  (Spend more CPU time to maybe save a little bandwidth.)",
        "tags": [],
        "value": "0"
    },
    "sv_consistency": {
        "desc": "Legacy variable with no effect!  This was deleted and then added as a temporary kludge to prevent players from being banned by",
        "tags": [
            "rep"
        ],
        "value": "1"
    },
    "sv_contact": {
        "desc": "Contact email for server sysop",
        "tags": [
            "nf"
        ],
        "value": "0"
    },
    "sv_debug_player_use": {
        "desc": "Visualizes +use logic. Green cross=trace success, Red cross=trace too far, Green box=radius success",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "0"
    },
    "sv_debugmanualmode": {
        "desc": "Make sure entities correctly report whether or not their network data has changed.",
        "tags": [],
        "value": "0"
    },
    "sv_debugtempentities": {
        "desc": "Show temp entity bandwidth usage.",
        "tags": [],
        "value": "0"
    },
    "sv_deltaprint": {
        "desc": "Print accumulated CalcDelta profiling data (only if sv_deltatime is on)",
        "tags": [],
        "value": "0"
    },
    "sv_deltatime": {
        "desc": "Enable profiling of CalcDelta calls",
        "tags": [],
        "value": "0"
    },
    "sv_disable_querycache": {
        "desc": "debug - disable trace query cache",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "sv_downloadurl": {
        "desc": "Location from which clients can download missing files",
        "tags": [
            "rep"
        ],
        "value": "0"
    },
    "sv_dumpstringtables": {
        "desc": "",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "sv_enableoldqueries": {
        "desc": "Enable support for old style (HL1) server queries",
        "tags": [],
        "value": "0"
    },
    "sv_filterban": {
        "desc": "Set packet filtering by IP mode",
        "tags": [],
        "value": "1"
    },
    "sv_forcepreload": {
        "desc": "Force server side preloading.",
        "tags": [
            "a"
        ],
        "value": "1"
    },
    "sv_gravity": {
        "desc": "World gravity.",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "800"
    },
    "sv_hudhint_sound": {
        "desc": "",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "sv_lan": {
        "desc": "Server is a lan server ( no heartbeat, no authentication, no non-class C addresses )",
        "tags": [],
        "value": "0"
    },
    "sv_log_onefile": {
        "desc": "Log server information to only one file.",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "sv_logbans": {
        "desc": "Log server bans in the server logs.",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "sv_logblocks": {
        "desc": "If true when log when a query is blocked (can cause very large log files)",
        "tags": [],
        "value": "0"
    },
    "sv_logdownloadlist": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "sv_logecho": {
        "desc": "Echo log information to the console.",
        "tags": [
            "a"
        ],
        "value": "1"
    },
    "sv_logfile": {
        "desc": "Log server information in the log file.",
        "tags": [
            "a"
        ],
        "value": "1"
    },
    "sv_logflush": {
        "desc": "Flush the log file to disk on each write (slow).",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "sv_logsdir": {
        "desc": "Folder in the game directory where server logs will be stored.",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "sv_logsecret": {
        "desc": "If set then include this secret when doing UDP logging (will use 0x53 as packet type, not usual 0x52)",
        "tags": [],
        "value": "0"
    },
    "sv_lowedict_action": {
        "desc": "0 - no action, 1 - warn to log file, 2 - attempt to restart the game, if applicable, 3 - restart the map, 4 - go to the next ma",
        "tags": [],
        "value": "0"
    },
    "sv_lowedict_threshold": {
        "desc": "When only this many edicts are free, take the action specified by sv_lowedict_action.",
        "tags": [],
        "value": "8"
    },
    "sv_massreport": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "sv_master_share_game_socket": {
        "desc": "Use the game's socket to communicate to the master server. If this is 0, then it will create a socket on -steamport + 1 to comm",
        "tags": [],
        "value": "1"
    },
    "sv_max_connects_sec": {
        "desc": "Maximum connections per second to respond to from a single IP address.",
        "tags": [],
        "value": "2"
    },
    "sv_max_connects_sec_global": {
        "desc": "Maximum connections per second to respond to from anywhere.",
        "tags": [],
        "value": "0"
    },
    "sv_max_connects_window": {
        "desc": "Window over which to average connections per second averages.",
        "tags": [],
        "value": "4"
    },
    "sv_max_queries_sec": {
        "desc": "Maximum queries per second to respond to from a single IP address.",
        "tags": [],
        "value": "3"
    },
    "sv_max_queries_sec_global": {
        "desc": "Maximum queries per second to respond to from anywhere.",
        "tags": [],
        "value": "3000"
    },
    "sv_max_queries_window": {
        "desc": "Window over which to average queries per second averages.",
        "tags": [],
        "value": "30"
    },
    "sv_maxcmdrate": {
        "desc": "(If sv_mincmdrate is > 0), this sets the maximum value for cl_cmdrate.",
        "tags": [
            "rep"
        ],
        "value": "66"
    },
    "sv_maxrate": {
        "desc": "Max bandwidth rate allowed on server, 0 == unlimited",
        "tags": [
            "rep"
        ],
        "value": "0"
    },
    "sv_maxreplay": {
        "desc": "Maximum replay time in seconds",
        "tags": [],
        "value": "0"
    },
    "sv_maxroutable": {
        "desc": "Server upper bound on net_maxroutable that a client can use.",
        "tags": [],
        "value": "1260"
    },
    "sv_maxupdaterate": {
        "desc": "Maximum updates per second that the server will allow",
        "tags": [
            "rep"
        ],
        "value": "66"
    },
    "sv_maxusrcmdprocessticks": {
        "desc": "Maximum number of client-issued usrcmd ticks that can be replayed in packet loss conditions, 0 to allow no restrictions",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "24"
    },
    "sv_maxusrcmdprocessticks_warning": {
        "desc": "Print a warning when user commands get dropped due to insufficient usrcmd ticks allocated, number of seconds to throttle, negat",
        "tags": [
            "sv"
        ],
        "value": "-1"
    },
    "sv_memlimit": {
        "desc": "If set, whenever the server is empty, if the total memory used by the server is greater than this # of megabytes, the server wi",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "sv_mincmdrate": {
        "desc": "This sets the minimum value for cl_cmdrate. 0 == unlimited.",
        "tags": [
            "rep"
        ],
        "value": "10"
    },
    "sv_minrate": {
        "desc": "Min bandwidth rate allowed on server, 0 == unlimited",
        "tags": [
            "rep"
        ],
        "value": "30000"
    },
    "sv_minupdaterate": {
        "desc": "Minimum updates per second that the server will allow",
        "tags": [
            "rep"
        ],
        "value": "10"
    },
    "sv_motd_unload_on_dismissal": {
        "desc": "If enabled, the MOTD contents will be unloaded when the player closes the MOTD.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "sv_mumble_positionalaudio": {
        "desc": "Allows players using Mumble to have support for positional audio.",
        "tags": [
            "rep",
            "cl"
        ],
        "value": "1"
    },
    "sv_namechange_cooldown_seconds": {
        "desc": "When a client name change is received, wait N seconds allowing another name change",
        "tags": [],
        "value": "20"
    },
    "sv_netspike": {
        "desc": "Write network trace if amount of data sent to client exceeds N bytes.  Use zero to disable tracing. Note that having this enabl",
        "tags": [],
        "value": "cmd"
    },
    "sv_netspike_on_reliable_snapshot_overflow": {
        "desc": "If nonzero, the server will dump a netspike trace if a client is dropped due to reliable snapshot overflow",
        "tags": [],
        "value": "0"
    },
    "sv_netspike_output": {
        "desc": "Where the netspike data be written?  Sum of the following values: 1=netspike.txt, 2=ordinary server log",
        "tags": [],
        "value": "1"
    },
    "sv_netspike_sendtime_ms": {
        "desc": "If nonzero, the server will dump a netspike trace if it takes more than N ms to prepare a snapshot to a single client.  This fe",
        "tags": [],
        "value": "0"
    },
    "sv_noclipaccelerate": {
        "desc": "",
        "tags": [
            "a",
            "sv",
            "nf",
            "rep"
        ],
        "value": "5"
    },
    "sv_noclipduringpause": {
        "desc": "If cheats are enabled, then you can noclip with the game paused (for doing screenshots, etc.).",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "0"
    },
    "sv_noclipspeed": {
        "desc": "",
        "tags": [
            "a",
            "sv",
            "nf",
            "rep"
        ],
        "value": "5"
    },
    "sv_npc_talker_maxdist": {
        "desc": "NPCs over this distance from the player won't attempt to speak.",
        "tags": [
            "sv"
        ],
        "value": "1024"
    },
    "sv_parallel_packentities": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "sv_parallel_sendsnapshot": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "sv_password": {
        "desc": "Server password for entry into multiplayer games",
        "tags": [
            "nf",
            "prot",
            "norecord"
        ],
        "value": "0"
    },
    "sv_pausable": {
        "desc": "Is the server pausable.",
        "tags": [
            "nf"
        ],
        "value": "0"
    },
    "sv_player_display_usercommand_errors": {
        "desc": "1 = Display warning when command values are out-of-range. 2 = Spew invalid ranges.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "sv_playerperfhistorycount": {
        "desc": "Number of samples to maintain in player perf history",
        "tags": [
            "sv"
        ],
        "value": "60"
    },
    "sv_precacheinfo": {
        "desc": "Show precache info.",
        "tags": [],
        "value": "cmd"
    },
    "sv_pure": {
        "desc": "Show user data.",
        "tags": [],
        "value": "cmd"
    },
    "sv_pure_consensus": {
        "desc": "Minimum number of file hashes to agree to form a consensus.",
        "tags": [],
        "value": "5"
    },
    "sv_pure_kick_clients": {
        "desc": "If set to 1, the server will kick clients with mismatching files. Otherwise, it will issue a warning to the client.",
        "tags": [],
        "value": "1"
    },
    "sv_pure_retiretime": {
        "desc": "Seconds of server idle time to flush the sv_pure file hash cache.",
        "tags": [],
        "value": "900"
    },
    "sv_pure_trace": {
        "desc": "If set to 1, the server will print a message whenever a client is verifying a CRC for a file.",
        "tags": [],
        "value": "0"
    },
    "sv_pvsskipanimation": {
        "desc": "Skips SetupBones when npc's are outside the PVS",
        "tags": [
            "a",
            "sv"
        ],
        "value": "1"
    },
    "sv_querycache_stats": {
        "desc": "Display status of the query cache (client only)",
        "tags": [],
        "value": "cmd"
    },
    "sv_rcon_banpenalty": {
        "desc": "Number of minutes to ban users who fail rcon authentication",
        "tags": [],
        "value": "0"
    },
    "sv_rcon_log": {
        "desc": "Enable/disable rcon logging.",
        "tags": [],
        "value": "1"
    },
    "sv_rcon_maxfailures": {
        "desc": "Max number of times a user can fail rcon authentication before being banned",
        "tags": [],
        "value": "10"
    },
    "sv_rcon_maxpacketbans": {
        "desc": "Ban IPs for sending RCON packets exceeding the value specified in sv_rcon_maxpacketsize",
        "tags": [],
        "value": "1"
    },
    "sv_rcon_maxpacketsize": {
        "desc": "The maximum number of bytes to allow in a command packet",
        "tags": [],
        "value": "1024"
    },
    "sv_rcon_minfailures": {
        "desc": "Number of times a user can fail rcon authentication in sv_rcon_minfailuretime before being banned",
        "tags": [],
        "value": "5"
    },
    "sv_rcon_minfailuretime": {
        "desc": "Number of seconds to track failed rcon authentications",
        "tags": [],
        "value": "30"
    },
    "sv_region": {
        "desc": "The region of the world to report this server in.",
        "tags": [],
        "value": "-1"
    },
    "sv_restrict_aspect_ratio_fov": {
        "desc": "This can be used to limit the effective FOV of users using wide-screen resolutions with aspect ratios wider than 1.85:1 (slight",
        "tags": [
            "rep"
        ],
        "value": "1"
    },
    "sv_runcmds": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sv_showladders": {
        "desc": "Show bbox and dismount points for all ladders (must be set before level load.)",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "sv_showlagcompensation": {
        "desc": "Show lag compensated hitboxes whenever a player is lag compensated.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "sv_shutdown": {
        "desc": "Sets the server to shutdown next time it's empty",
        "tags": [],
        "value": "cmd"
    },
    "sv_shutdown_timeout_minutes": {
        "desc": "If sv_shutdown is pending, wait at most N minutes for server to drain before forcing shutdown.",
        "tags": [
            "rep"
        ],
        "value": "360"
    },
    "sv_skyname": {
        "desc": "Current name of the skybox texture",
        "tags": [
            "a",
            "sv",
            "rep"
        ],
        "value": "0"
    },
    "sv_soundemitter_trace": {
        "desc": "Show all EmitSound calls including their symbolic name and the actual wave file they resolved to",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "0"
    },
    "sv_specaccelerate": {
        "desc": "",
        "tags": [
            "a",
            "sv",
            "nf",
            "rep"
        ],
        "value": "5"
    },
    "sv_specnoclip": {
        "desc": "",
        "tags": [
            "a",
            "sv",
            "nf",
            "rep"
        ],
        "value": "1"
    },
    "sv_specspeed": {
        "desc": "",
        "tags": [
            "a",
            "sv",
            "nf",
            "rep"
        ],
        "value": "3"
    },
    "sv_stats": {
        "desc": "Collect CPU usage stats",
        "tags": [],
        "value": "1"
    },
    "sv_steamblockingcheck": {
        "desc": "Check each new player for Steam blocking compatibility, 1 = message only, 2 >= drop if any member of owning clan blocks,3 >= dr",
        "tags": [],
        "value": "0"
    },
    "sv_steamgroup": {
        "desc": "The ID of the steam group that this server belongs to. You can find your group's ID on the admin profile page in the steam comm",
        "tags": [
            "nf"
        ],
        "value": "0"
    },
    "sv_stickysprint_default": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "sv_strict_notarget": {
        "desc": "If set, notarget will cause entities to never think they are in the pvs",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "sv_tags": {
        "desc": "Server tags. Used to provide extra information to clients when they're browsing for servers. Separate tags with a comma.",
        "tags": [
            "nf"
        ],
        "value": "0"
    },
    "sv_test_scripted_sequences": {
        "desc": "Tests for scripted sequences that are embedded in the world. Run through your map with this set to check for NPCs falling throu",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "sv_teststepsimulation": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sv_thinktimecheck": {
        "desc": "Check for thinktimes all on same timestamp.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "sv_timeout": {
        "desc": "After this many seconds without a message from a client, the client is dropped",
        "tags": [],
        "value": "65"
    },
    "sv_turbophysics": {
        "desc": "Turns on turbo physics",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "sv_unlockedchapters": {
        "desc": "Highest unlocked game chapter.",
        "tags": [
            "a"
        ],
        "value": "99"
    },
    "sv_use_steam_voice": {
        "desc": "Enable/disable using Steam Voice instead of the old voice codec (if enabled, voice_inputfromfile will no longer function).",
        "tags": [
            "rep"
        ],
        "value": "1"
    },
    "sv_vehicle_autoaim_scale": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "8"
    },
    "sv_visiblemaxplayers": {
        "desc": "Overrides the max players reported to prospective clients",
        "tags": [],
        "value": "-1"
    },
    "sv_voicecodec": {
        "desc": "Specifies which voice codec DLL to use in a game. Set to the name of the DLL without the extension.",
        "tags": [],
        "value": "0"
    },
    "sv_voiceenable": {
        "desc": "",
        "tags": [
            "a",
            "nf"
        ],
        "value": "1"
    },
    "sv_vote_allow_spectators": {
        "desc": "Allow spectators to vote?",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "sv_vote_failure_timer": {
        "desc": "A vote that fails cannot be re-submitted for this long",
        "tags": [
            "sv"
        ],
        "value": "300"
    },
    "sv_vote_failure_timer_mvm": {
        "desc": "A vote that fails in MvM cannot be re-submitted for this long",
        "tags": [
            "sv"
        ],
        "value": "120"
    },
    "sv_vote_issue_changelevel_allowed": {
        "desc": "Can people hold votes to change levels?",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "sv_vote_issue_changelevel_allowed_mvm": {
        "desc": "Can people hold votes to change levels in MvM?",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "sv_vote_issue_kick_allowed": {
        "desc": "Can people hold votes to kick players from the server?",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "sv_vote_issue_kick_allowed_mvm": {
        "desc": "Can people hold votes to kick players from the server in MvM?",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sv_vote_issue_kick_min_connect_time_mvm": {
        "desc": "How long a player must be connected before they can be kicked (in seconds).",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "sv_vote_issue_kick_spectators_mvm": {
        "desc": "Allow players to kick spectators in MvM.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "sv_vote_issue_mvm_challenge_allowed": {
        "desc": "Can people hold votes to set the challenge level?",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sv_vote_issue_nextlevel_allowed": {
        "desc": "Can people hold votes to set the next level?",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sv_vote_issue_nextlevel_allowextend": {
        "desc": "Allow players to extend the current map?",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sv_vote_issue_nextlevel_choicesmode": {
        "desc": "Present players with a list of lowest playtime maps to choose from?",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "sv_vote_issue_nextlevel_prevent_change": {
        "desc": "Not allowed to vote for a nextlevel if one has already been set.",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sv_vote_issue_restart_game_allowed": {
        "desc": "Can people hold votes to restart the game?",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sv_vote_issue_scramble_teams_allowed": {
        "desc": "Can people hold votes to scramble the teams?",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sv_vote_kick_ban_duration": {
        "desc": "How long should a kick vote ban someone from the server? (in minutes)",
        "tags": [
            "sv"
        ],
        "value": "20"
    },
    "sv_vote_ui_hide_disabled_issues": {
        "desc": "Suppress listing of disabled issues in the vote setup screen.",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "sys_minidumpexpandedspew": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "sys_minidumpspewlines": {
        "desc": "Lines of crash dump console spew to keep.",
        "tags": [],
        "value": "500"
    },
    "systemlinkport": {
        "desc": "System Link port",
        "tags": [],
        "value": "27030"
    },
    "telemetry_demoend": {
        "desc": "When playing demo, stop telemetry on tick #",
        "tags": [],
        "value": "0"
    },
    "telemetry_demostart": {
        "desc": "When playing demo, start telemetry on tick #",
        "tags": [],
        "value": "0"
    },
    "telemetry_filtervalue": {
        "desc": "Set Telemetry ZoneFilterVal (MicroSeconds)",
        "tags": [],
        "value": "500"
    },
    "telemetry_framecount": {
        "desc": "Set Telemetry count of frames to capture",
        "tags": [],
        "value": "0"
    },
    "telemetry_level": {
        "desc": "Set Telemetry profile level: 0 being off. Hight bit set for mask: 0x8#######",
        "tags": [],
        "value": "0"
    },
    "telemetry_pause": {
        "desc": "Pause Telemetry",
        "tags": [],
        "value": "0"
    },
    "telemetry_resume": {
        "desc": "Resume Telemetry",
        "tags": [],
        "value": "0"
    },
    "telemetry_server": {
        "desc": "Set Telemetry server",
        "tags": [],
        "value": "0"
    },
    "template_debug": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "test_dispatcheffect": {
        "desc": "Test a clientside dispatch effect.  Usage: test_dispatcheffect <effect name> <distance away> <flags> <magnitude> <scale>  Defau",
        "tags": [],
        "value": "cmd"
    },
    "test_entity_blocker": {
        "desc": "Test command that drops an entity blocker out in front of the player.",
        "tags": [],
        "value": "cmd"
    },
    "test_freezeframe": {
        "desc": "Test the freeze frame code.",
        "tags": [],
        "value": "cmd"
    },
    "test_giveawayitem": {
        "desc": "Debugging tool to test the item giveaway panel. Usage: test_giveawayitem <weapon name>    <weapon id>: 0 = primary, 1 = seconda",
        "tags": [],
        "value": "cmd"
    },
    "testhudanim": {
        "desc": "Test a hud element animation.  Arguments: <anim name>",
        "tags": [],
        "value": "cmd"
    },
    "testscript_debug": {
        "desc": "Debug test scripts.",
        "tags": [],
        "value": "0"
    },
    "texture_budget_background_alpha": {
        "desc": "how translucent the budget panel is",
        "tags": [
            "a"
        ],
        "value": "128"
    },
    "texture_budget_panel_bottom_of_history_fraction": {
        "desc": "number between 0 and 1",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "texture_budget_panel_global": {
        "desc": "Show global times in the texture budget panel.",
        "tags": [],
        "value": "0"
    },
    "texture_budget_panel_height": {
        "desc": "height in pixels of the budget panel",
        "tags": [
            "a"
        ],
        "value": "284"
    },
    "texture_budget_panel_width": {
        "desc": "width in pixels of the budget panel",
        "tags": [
            "a"
        ],
        "value": "512"
    },
    "texture_budget_panel_x": {
        "desc": "number of pixels from the left side of the game screen to draw the budget panel",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "texture_budget_panel_y": {
        "desc": "number of pixels from the top side of the game screen to draw the budget panel",
        "tags": [
            "a"
        ],
        "value": "450"
    },
    "tf_allow_player_use": {
        "desc": "Allow players to execute +use while playing.",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "0"
    },
    "tf_allow_taunt_switch": {
        "desc": "0 - players are not allowed to switch weapons while taunting, 1 - players can switch weapons at the start of a taunt (old bug b",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "0"
    },
    "tf_always_deathanim": {
        "desc": "Force death anims to always play.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "tf_always_loser": {
        "desc": "Force loserstate to true.",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "0"
    },
    "tf_archer_proxy_fire_rate": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "tf_arena_first_blood": {
        "desc": "Rewards the first player to get a kill each round.",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "1"
    },
    "tf_arena_max_streak": {
        "desc": "Teams will be scrambled if one team reaches this streak",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "3"
    },
    "tf_arena_override_cap_enable_time": {
        "desc": "Overrides the time (in seconds) it takes for the capture point to become enable, -1 uses the level designer specified time.",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "-1"
    },
    "tf_arena_override_team_size": {
        "desc": "Overrides the maximum team size in arena mode. Set to zero to keep the default behavior of 1/3 maxplayers.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "0"
    },
    "tf_arena_preround_time": {
        "desc": "Length of the Pre-Round time",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "10"
    },
    "tf_arena_round_time": {
        "desc": "",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "tf_arena_use_queue": {
        "desc": "Enables the spectator queue system for Arena.",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "1"
    },
    "tf_avoidteammates_pushaway": {
        "desc": "Whether or not teammates push each other away when occupying the same space",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "tf_backstab_detection_method": {
        "desc": "Which detection method to use for backstabs (0 = old, 1 = new).",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "tf_base_boss_max_turn_rate": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "25"
    },
    "tf_base_boss_speed": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "75"
    },
    "tf_birthday": {
        "desc": "",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "tf_birthday_ball_chance": {
        "desc": "Percent chance of a birthday beach ball spawning at each round start",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "100"
    },
    "tf_bot_add": {
        "desc": "Add a bot.",
        "tags": [],
        "value": "cmd"
    },
    "tf_bot_always_full_reload": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_ammo_search_range": {
        "desc": "How far bots will search to find ammo around them",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "5000"
    },
    "tf_bot_arrow_elevation_rate": {
        "desc": "When firing arrows at far away targets, this is the degree/range slope to raise our aim",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_auto_vacate": {
        "desc": "If nonzero, bots will automatically leave to make room for human players.",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "tf_bot_ballistic_elevation_rate": {
        "desc": "When lobbing grenades at far away targets, this is the degree/range slope to raise our aim",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_capture_seek_and_destroy_max_duration": {
        "desc": "If a capturing bot decides to go hunting, this is the max duration he will hunt for before reconsidering",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "30"
    },
    "tf_bot_capture_seek_and_destroy_min_duration": {
        "desc": "If a capturing bot decides to go hunting, this is the min duration he will hunt for before reconsidering",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "15"
    },
    "tf_bot_cart_push_radius": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "60"
    },
    "tf_bot_choose_target_interval": {
        "desc": "How often, in seconds, a TFBot can reselect his target",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_debug_ammo_scavenging": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_debug_destroy_enemy_sentry": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_debug_payload_guard_vantage_points": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_debug_retreat_to_cover": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_debug_seek_and_destroy": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_debug_sentry_placement": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_debug_sniper": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_debug_spy": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_debug_stuck_log": {
        "desc": "Given a server logfile, visually display bot stuck locations.",
        "tags": [],
        "value": "cmd"
    },
    "tf_bot_debug_stuck_log_clear": {
        "desc": "Clear currently loaded bot stuck data",
        "tags": [],
        "value": "cmd"
    },
    "tf_bot_debug_tags": {
        "desc": "ent_text will only show tags on bots",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_defend_owned_point_percent": {
        "desc": "Stay on the contested point we own until enemy cap percent falls below this",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_defense_debug": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_defense_must_defend_time": {
        "desc": "If timer is less than this, bots will stay near point and guard",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "300"
    },
    "tf_bot_difficulty": {
        "desc": "Defines the skill of bots joining the game.  Values are: 0=easy, 1=normal, 2=hard, 3=expert.",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "tf_bot_engineer_building_health_multiplier": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "2"
    },
    "tf_bot_engineer_exit_near_sentry_range": {
        "desc": "Maximum travel distance between a bot's Sentry gun and its Teleporter Exit",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "2500"
    },
    "tf_bot_engineer_max_sentry_travel_distance_to_point": {
        "desc": "Maximum travel distance between a bot's Sentry gun and the currently contested point",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "2500"
    },
    "tf_bot_engineer_mvm_hint_min_distance_from_bomb": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1300"
    },
    "tf_bot_engineer_mvm_sentry_hint_bomb_backward_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "3000"
    },
    "tf_bot_engineer_mvm_sentry_hint_bomb_forward_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_engineer_retaliate_range": {
        "desc": "If attacker who destroyed sentry is closer than this, attack. Otherwise, retreat",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "750"
    },
    "tf_bot_escort_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "300"
    },
    "tf_bot_fetch_lost_flag_time": {
        "desc": "How long busy TFBots will ignore the dropped flag before they give up what they are doing and go after it",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "10"
    },
    "tf_bot_fire_weapon_allowed": {
        "desc": "If zero, TFBots will not pull the trigger of their weapons (but will act like they did)",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "tf_bot_fire_weapon_min_time": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "tf_bot_flag_escort_give_up_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1000"
    },
    "tf_bot_flag_escort_max_count": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "4"
    },
    "tf_bot_flag_escort_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "500"
    },
    "tf_bot_flag_kill_on_touch": {
        "desc": "If nonzero, any bot that picks up the flag dies. For testing.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_force_class": {
        "desc": "If set to a class name, all TFBots will respawn as that class",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "tf_bot_force_jump": {
        "desc": "Force bots to continuously jump",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_formation_debug": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_health_critical_ratio": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_health_ok_ratio": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_health_search_far_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "2000"
    },
    "tf_bot_health_search_near_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1000"
    },
    "tf_bot_hitscan_range_limit": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1800"
    },
    "tf_bot_join_after_player": {
        "desc": "If nonzero, bots wait until a player joins before entering the game.",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "tf_bot_keep_class_after_death": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "tf_bot_kick": {
        "desc": "Remove a TFBot by name, or all bots ('all').",
        "tags": [],
        "value": "cmd"
    },
    "tf_bot_kill": {
        "desc": "Kill a TFBot by name, or all bots ('all').",
        "tags": [],
        "value": "cmd"
    },
    "tf_bot_max_grenade_launch_at_sentry_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1500"
    },
    "tf_bot_max_point_defend_range": {
        "desc": "How far (in travel distance) from the point defending bots will take up positions",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1250"
    },
    "tf_bot_max_setup_gate_defend_range": {
        "desc": "How far from the setup gate(s) defending bots can take up positions",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "2000"
    },
    "tf_bot_max_sticky_launch_at_sentry_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1500"
    },
    "tf_bot_max_teleport_entrance_travel": {
        "desc": "Don't plant teleport entrances farther than this travel distance from our spawn room",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1500"
    },
    "tf_bot_max_teleport_exit_travel_to_point": {
        "desc": "In an offensive engineer bot's tele exit is farther from the point than this, destroy it",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "2500"
    },
    "tf_bot_medic_cover_test_resolution": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "8"
    },
    "tf_bot_medic_debug": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_medic_max_call_response_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1000"
    },
    "tf_bot_medic_max_heal_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "600"
    },
    "tf_bot_medic_start_follow_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "250"
    },
    "tf_bot_medic_stop_follow_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "75"
    },
    "tf_bot_melee_attack_abandon_range": {
        "desc": "If threat is farther away than this, bot will switch back to its primary weapon and attack",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "500"
    },
    "tf_bot_melee_only": {
        "desc": "If nonzero, TFBots will only use melee weapons",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "tf_bot_min_setup_gate_defend_range": {
        "desc": "How close from the setup gate(s) defending bots can take up positions. Areas closer than this will be in cover to ambush.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "750"
    },
    "tf_bot_min_setup_gate_sniper_defend_range": {
        "desc": "How far from the setup gate(s) a defending sniper will take up position",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1500"
    },
    "tf_bot_min_teleport_travel": {
        "desc": "Minimum travel distance between teleporter entrance and exit before engineer bot will build one",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "3000"
    },
    "tf_bot_mvm_show_engineer_hint_region": {
        "desc": "Show the nav areas MvM engineer bots will consider when selecting sentry and teleporter hints",
        "tags": [],
        "value": "cmd"
    },
    "tf_bot_near_point_travel_distance": {
        "desc": "If within this travel distance to the current point, bot is 'near' it",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "750"
    },
    "tf_bot_notice_backstab_chance": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "25"
    },
    "tf_bot_notice_backstab_max_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "750"
    },
    "tf_bot_notice_backstab_min_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "100"
    },
    "tf_bot_notice_gunfire_range": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "3000"
    },
    "tf_bot_notice_quiet_gunfire_range": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "500"
    },
    "tf_bot_npc_archer_arrow_damage": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "75"
    },
    "tf_bot_npc_archer_health": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "100"
    },
    "tf_bot_npc_archer_shoot_interval": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "2"
    },
    "tf_bot_npc_archer_speed": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "100"
    },
    "tf_bot_offense_must_push_time": {
        "desc": "If timer is less than this, bots will push hard to cap",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "120"
    },
    "tf_bot_offline_practice": {
        "desc": "Tells the server that it is in offline practice mode.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "tf_bot_path_lookahead_range": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "300"
    },
    "tf_bot_payload_guard_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1000"
    },
    "tf_bot_prefix_name_with_difficulty": {
        "desc": "Append the skill level of the bot to the bot's name",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "tf_bot_pyro_always_reflect": {
        "desc": "Pyro bots will always reflect projectiles fired at them. For tesing/debugging purposes.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_pyro_deflect_tolerance": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_pyro_shove_away_range": {
        "desc": "If a Pyro bot's target is closer than this, compression blast them away",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "250"
    },
    "tf_bot_quota": {
        "desc": "Determines the total number of tf bots in the game.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "tf_bot_quota_mode": {
        "desc": "Determines the type of quota. Allowed values: 'normal', 'fill', and 'match'. If 'fill', the server will adjust bots to keep N p",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "tf_bot_retreat_to_cover_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1000"
    },
    "tf_bot_sniper_aim_error": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_sniper_aim_steady_rate": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "10"
    },
    "tf_bot_sniper_allow_opportunistic": {
        "desc": "If set, Snipers will stop on their way to their preferred lurking spot to snipe at opportunistic targets",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "tf_bot_sniper_choose_target_interval": {
        "desc": "How often, in seconds, a zoomed-in Sniper can reselect his target",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "3"
    },
    "tf_bot_sniper_flee_range": {
        "desc": "If threat is closer than this, retreat",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "400"
    },
    "tf_bot_sniper_goal_entity_move_tolerance": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "500"
    },
    "tf_bot_sniper_linger_time": {
        "desc": "How long Sniper will wait around after losing his target before giving up",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "5"
    },
    "tf_bot_sniper_melee_range": {
        "desc": "If threat is closer than this, attack with melee weapon",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "200"
    },
    "tf_bot_sniper_patience_duration": {
        "desc": "How long a Sniper bot will wait without seeing an enemy before picking a new spot",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "10"
    },
    "tf_bot_sniper_personal_space_range": {
        "desc": "Enemies beyond this range don't worry the Sniper",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1000"
    },
    "tf_bot_sniper_spot_epsilon": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "100"
    },
    "tf_bot_sniper_spot_max_count": {
        "desc": "Stop searching for sniper spots when each side has found this many",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "10"
    },
    "tf_bot_sniper_spot_min_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1000"
    },
    "tf_bot_sniper_spot_point_tolerance": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "750"
    },
    "tf_bot_sniper_spot_search_count": {
        "desc": "Search this many times per behavior update frame",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "10"
    },
    "tf_bot_sniper_target_linger_duration": {
        "desc": "How long a Sniper bot will keep toward at a target it just lost sight of",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "2"
    },
    "tf_bot_spy_change_target_range_threshold": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "300"
    },
    "tf_bot_spy_knife_range": {
        "desc": "If threat is closer than this, prefer our knife",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "300"
    },
    "tf_bot_squad_escort_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "500"
    },
    "tf_bot_sticky_base_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "800"
    },
    "tf_bot_sticky_charge_rate": {
        "desc": "Seconds of charge per unit range beyond base",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_stickybomb_density": {
        "desc": "Number of stickies to place per square inch",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_suicide_bomb_friendly_fire": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "tf_bot_suicide_bomb_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "300"
    },
    "tf_bot_suspect_spy_forget_cooldown": {
        "desc": "How long to consider a suspicious spy as suspicious",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "5"
    },
    "tf_bot_suspect_spy_touch_interval": {
        "desc": "How many seconds back to look for touches against suspicious spies",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "5"
    },
    "tf_bot_taunt_victim_chance": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "20"
    },
    "tf_bot_teleport_build_surface_normal_limit": {
        "desc": "If the ground normal Z component is less that this value, Engineer bots won't place their entrance teleporter",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_bot_wait_in_cover_max_time": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "2"
    },
    "tf_bot_wait_in_cover_min_time": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "tf_bot_warp_team_to_me": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "tf_build_menu_controller_mode": {
        "desc": "Use console controller build menus. 1 = ON, 0 = OFF.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "tf_cart_spell_drop_rate": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "4"
    },
    "tf_chargedfriends": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "66654256"
    },
    "tf_clamp_airducks": {
        "desc": "",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "tf_clear_attribute": {
        "desc": "Remove given attribute from all areas in the selected set.",
        "tags": [],
        "value": "cmd"
    },
    "tf_clientsideeye_lookats": {
        "desc": "When on, players will turn their pupils to look at nearby players.",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "tf_colorblindassist": {
        "desc": "Setting this to 1 turns on colorblind mode.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_ctf_bonus_time": {
        "desc": "Length of team crit time for CTF capture.",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "10"
    },
    "tf_damage_disablespread": {
        "desc": "Toggles the random damage spread applied to all player damage.",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "tf_damage_multiplier_blue": {
        "desc": "All incoming damage to a blue player is multiplied by this value",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "tf_damage_multiplier_red": {
        "desc": "All incoming damage to a red player is multiplied by this value",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "tf_debug_damage": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_debug_flamethrower": {
        "desc": "Visualize the flamethrower damage.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_debug_placement_failure": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_decoy_lifetime": {
        "desc": "The lifetime of a decoy, in seconds",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "5"
    },
    "tf_dingaling_pitchmaxdmg": {
        "desc": "Desired pitch of the hit sound when a maximum damage hit (>= 150 health) is done.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "50"
    },
    "tf_dingaling_pitchmindmg": {
        "desc": "Desired pitch of the hit sound when a minimal damage hit (<= 10 health) is done.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "220"
    },
    "tf_dingaling_volume": {
        "desc": "Desired volume of the hit sound.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_dingalingaling": {
        "desc": "If set to 1, play a sound everytime you injure an enemy. The sound can be customized by replacing the 'tf/sound/ui/hitsound.wav",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_dingalingaling_repeat_delay": {
        "desc": "Desired repeat delay of the hit sound.  Set to 0 to play a sound for every instance of damage dealt.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "tf_disguise_menu_controller_mode": {
        "desc": "Use console controller disguise menus. 1 = ON, 0 = OFF.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "tf_escort_recede_time": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "30"
    },
    "tf_escort_recede_time_overtime": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "5"
    },
    "tf_escort_score_rate": {
        "desc": "Score for escorting the train, in points per second",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "tf_explanations_backpackpanel": {
        "desc": "Whether the user has seen explanations for this panel.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_explanations_charinfo_armory_panel": {
        "desc": "Whether the user has seen explanations for this panel.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_explanations_charinfopanel": {
        "desc": "Whether the user has seen explanations for this panel.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_explanations_craftingpanel": {
        "desc": "Whether the user has seen explanations for this panel.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_explanations_discardpanel": {
        "desc": "Whether the user has seen explanations for this panel.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_explanations_store": {
        "desc": "Whether the user has seen explanations for this panel.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_explanations_tradingpanel": {
        "desc": "Whether the user has seen explanations for this panel.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_eyeball_boss_acceleration": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "500"
    },
    "tf_eyeball_boss_attack_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "750"
    },
    "tf_eyeball_boss_debug": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_eyeball_boss_debug_orientation": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_eyeball_boss_health_at_level_2": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "17000"
    },
    "tf_eyeball_boss_health_base": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "8000"
    },
    "tf_eyeball_boss_health_per_level": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "3000"
    },
    "tf_eyeball_boss_health_per_player": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "400"
    },
    "tf_eyeball_boss_horiz_damping": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "2"
    },
    "tf_eyeball_boss_hover_height": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "200"
    },
    "tf_eyeball_boss_lifetime": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "120"
    },
    "tf_eyeball_boss_lifetime_spell": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "15"
    },
    "tf_eyeball_boss_speed": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "250"
    },
    "tf_eyeball_boss_vert_damping": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "tf_flag_caps_per_round": {
        "desc": "Number of flag captures per round on CTF maps. Set to 0 to disable.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "3"
    },
    "tf_flamethrower_boxsize": {
        "desc": "Size of flame damage entities.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "12"
    },
    "tf_forced_holiday": {
        "desc": "Forced holiday,     Birthday = 1    Halloween = 2",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "0"
    },
    "tf_halloween_boss_spawn_interval": {
        "desc": "Average interval between boss spawns, in seconds",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "480"
    },
    "tf_halloween_boss_spawn_interval_variation": {
        "desc": "Variation of spawn interval +/-",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "60"
    },
    "tf_halloween_bot_attack_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "200"
    },
    "tf_halloween_bot_chase_duration": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "30"
    },
    "tf_halloween_bot_chase_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1500"
    },
    "tf_halloween_bot_health_base": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "3000"
    },
    "tf_halloween_bot_health_per_player": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "200"
    },
    "tf_halloween_bot_min_player_count": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "10"
    },
    "tf_halloween_bot_quit_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "2000"
    },
    "tf_halloween_bot_speed": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "400"
    },
    "tf_halloween_bot_speed_recovery_rate": {
        "desc": "Movement units/second",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "100"
    },
    "tf_halloween_bot_terrify_radius": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "500"
    },
    "tf_halloween_eyeball_boss_spawn_interval": {
        "desc": "Average interval between boss spawns, in seconds",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "180"
    },
    "tf_halloween_eyeball_boss_spawn_interval_variation": {
        "desc": "Variation of spawn interval +/-",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "30"
    },
    "tf_halloween_force_boss_spawn": {
        "desc": "For testing.",
        "tags": [],
        "value": "cmd"
    },
    "tf_halloween_giant_health_scale": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "10"
    },
    "tf_halloween_zombie_damage": {
        "desc": "How much damage a zombie melee hit does.",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "10"
    },
    "tf_halloween_zombie_mob_enabled": {
        "desc": "If set to 1, spawn zombie mobs on non-Halloween Valve maps",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_halloween_zombie_mob_spawn_count": {
        "desc": "How many zombies to spawn",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "20"
    },
    "tf_halloween_zombie_mob_spawn_interval": {
        "desc": "Average interval between zombie mob spawns, in seconds",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "180"
    },
    "tf_highfive_debug": {
        "desc": "Turns on some console spew for debugging high five issues.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "tf_highfive_hintcount": {
        "desc": "Counts the number of times the high five hint has been displayed",
        "tags": [
            "a",
            "norecord",
            "cl"
        ],
        "value": "3"
    },
    "tf_hud_no_crosshair_on_scope_zoom": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "tf_hud_notification_duration": {
        "desc": "How long to display hud notification panels before fading them",
        "tags": [
            "cl"
        ],
        "value": "3"
    },
    "tf_hud_num_building_alert_beeps": {
        "desc": "Number of times to play warning sound when a new alert displays on building hud objects",
        "tags": [
            "a",
            "cl"
        ],
        "value": "2"
    },
    "tf_hud_show_servertimelimit": {
        "desc": "Display time left before the current map ends.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_impactwatertime": {
        "desc": "Draw impact debris effects.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "1"
    },
    "tf_impactwatertimeenable": {
        "desc": "Draw impact debris effects.",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "tf_invite_debug": {
        "desc": "Prints local invite objects",
        "tags": [],
        "value": "cmd"
    },
    "tf_item_based_forced_holiday": {
        "desc": "",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "0"
    },
    "tf_lobby_debug": {
        "desc": "Prints local lobby objects",
        "tags": [],
        "value": "cmd"
    },
    "tf_mark": {
        "desc": "Set attribute of selected area.",
        "tags": [],
        "value": "cmd"
    },
    "tf_matchgroups": {
        "desc": "Bit masks of match groups to search in for matchmaking",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "tf_matchmaking_goodenough_count_end": {
        "desc": "Good enough count at end of search",
        "tags": [
            "cl"
        ],
        "value": "5"
    },
    "tf_matchmaking_goodenough_count_start": {
        "desc": "Good enough count at start of search",
        "tags": [
            "cl"
        ],
        "value": "20"
    },
    "tf_matchmaking_goodenough_score_end": {
        "desc": "Good enough score at end of search",
        "tags": [
            "cl"
        ],
        "value": "7"
    },
    "tf_matchmaking_goodenough_score_start": {
        "desc": "Good enough score at start of search",
        "tags": [
            "cl"
        ],
        "value": "8"
    },
    "tf_matchmaking_join_in_progress": {
        "desc": "Saved preference for if the player wants to join games in progress.",
        "tags": [
            "a",
            "norecord",
            "cl"
        ],
        "value": "1"
    },
    "tf_matchmaking_max_search_time": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "45"
    },
    "tf_matchmaking_noob_hours_played": {
        "desc": "Number of hours played to determine 'noob' status for quickplay scoring purposes",
        "tags": [
            "cl"
        ],
        "value": "8"
    },
    "tf_matchmaking_noob_map_score_boost": {
        "desc": "Boost added for quick-plaay scoring purposes if you are a noob and the map is considered noob-friendly",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "tf_matchmaking_numbers_increase_maxplayers_penalty": {
        "desc": "Max scoring penalty to servers that have increased the max number of players",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "tf_matchmaking_numbers_serverfull_headroom": {
        "desc": "Scoring will consider the server 'full' when this many slots are available",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "tf_matchmaking_numbers_valve_bonus_hrs_a": {
        "desc": "Valve server scoring bonus: hours played A",
        "tags": [
            "cl"
        ],
        "value": "8"
    },
    "tf_matchmaking_numbers_valve_bonus_hrs_b": {
        "desc": "Valve server scoring bonus: hours played B",
        "tags": [
            "cl"
        ],
        "value": "16"
    },
    "tf_matchmaking_numbers_valve_bonus_pts_a": {
        "desc": "Valve server scoring bonus: bonus points A",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "tf_matchmaking_numbers_valve_bonus_pts_b": {
        "desc": "Valve server scoring bonus: bonus points B",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "tf_matchmaking_ping_a": {
        "desc": "Quickplay scoring ping time data point A",
        "tags": [
            "cl"
        ],
        "value": "50"
    },
    "tf_matchmaking_ping_a_score": {
        "desc": "Quickplay scoring ping score data point A",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "tf_matchmaking_ping_b": {
        "desc": "Quickplay scoring ping time data point B",
        "tags": [
            "cl"
        ],
        "value": "150"
    },
    "tf_matchmaking_ping_b_score": {
        "desc": "Quickplay scoring ping score data point B",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "tf_matchmaking_ping_c": {
        "desc": "Quickplay scoring ping time data point C",
        "tags": [
            "cl"
        ],
        "value": "300"
    },
    "tf_matchmaking_ping_c_score": {
        "desc": "Quickplay scoring ping score data point C",
        "tags": [
            "cl"
        ],
        "value": "-1"
    },
    "tf_matchmaking_retry_cooldown_seconds": {
        "desc": "Time to remember quickplay join attempt, and apply scoring penalty to rejoin the same server",
        "tags": [
            "cl"
        ],
        "value": "300"
    },
    "tf_matchmaking_retry_max_penalty": {
        "desc": "Max scoring penalty to rejoin a server previously matched.  (Decays linearly over the cooldown period)",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "tf_matchmaking_spew_level": {
        "desc": "Set to 1 for basic console spew of quickplay-related decisions.  4 for maximum verbosity.",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "tf_max_active_zombie": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "30"
    },
    "tf_medieval": {
        "desc": "Enable Medieval Mode.",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "tf_medieval_autorp": {
        "desc": "Enable Medieval Mode auto-roleplaying.",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "1"
    },
    "tf_medieval_cam_idealdist": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "125"
    },
    "tf_medieval_cam_idealdistright": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "25"
    },
    "tf_medieval_cam_idealdistup": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "-10"
    },
    "tf_medieval_cam_idealpitch": {
        "desc": "",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "tf_medieval_thirdperson": {
        "desc": "Turns on third-person camera in medieval mode.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "tf_medigun_autoheal": {
        "desc": "Setting this to 1 will cause the Medigun's primary attack to be a toggle instead of needing to be held down.",
        "tags": [
            "a",
            "user",
            "cl"
        ],
        "value": "0"
    },
    "tf_merasmus_attack_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "200"
    },
    "tf_merasmus_bomb_head_duration": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "15"
    },
    "tf_merasmus_bomb_head_per_team": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "tf_merasmus_chase_duration": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "7"
    },
    "tf_merasmus_chase_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "2000"
    },
    "tf_merasmus_disguise_debug": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_merasmus_health_base": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "33750"
    },
    "tf_merasmus_health_per_player": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "2500"
    },
    "tf_merasmus_health_regen_rate": {
        "desc": "Percentage of Max HP per sec that Merasmus will regenerate while in disguise",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_merasmus_lifetime": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "120"
    },
    "tf_merasmus_min_player_count": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "10"
    },
    "tf_merasmus_min_props_to_reveal": {
        "desc": "Percentage of total fake props players have to destroy before Merasmus reveals himself",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_merasmus_prop_health": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "150"
    },
    "tf_merasmus_should_disguise_threshold": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_merasmus_spawn_interval": {
        "desc": "Average interval between boss spawns, in seconds",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "180"
    },
    "tf_merasmus_spawn_interval_variation": {
        "desc": "Variation of spawn interval +/-",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "30"
    },
    "tf_merasmus_speed": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "600"
    },
    "tf_merasmus_speed_recovery_rate": {
        "desc": "Movement units/second",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "100"
    },
    "tf_merasmus_stun_duration": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "2"
    },
    "tf_mm_player_reservation_timeout_seconds": {
        "desc": "Max duration the server will wait for a player to join, after notification from the backend that we should expect him.",
        "tags": [
            "sv"
        ],
        "value": "30"
    },
    "tf_mm_servermode": {
        "desc": "Activates / deactivates Lobby-based hosting mode.    0 = not active    1 = Put in quickplay pool (based on current map)    2 =",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "0"
    },
    "tf_mm_strict": {
        "desc": "0 = Show in server browser, and allow ad-hoc joins    1 = Hide from server browser and only allow joins coordinated through",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "0"
    },
    "tf_mvm_bot_allow_flag_carrier_to_fight": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1"
    },
    "tf_mvm_bot_flag_carrier_health_regen": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "45"
    },
    "tf_mvm_bot_flag_carrier_interval_to_1st_upgrade": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "5"
    },
    "tf_mvm_bot_flag_carrier_interval_to_2nd_upgrade": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "15"
    },
    "tf_mvm_bot_flag_carrier_interval_to_3rd_upgrade": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "15"
    },
    "tf_mvm_bot_flag_carrier_movement_penalty": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "0"
    },
    "tf_mvm_checkpoint": {
        "desc": "Save a checkpoint snapshot",
        "tags": [],
        "value": "cmd"
    },
    "tf_mvm_checkpoint_clear": {
        "desc": "Clear the saved checkpoint",
        "tags": [],
        "value": "cmd"
    },
    "tf_mvm_debugstats": {
        "desc": "Dumpout MvM Data",
        "tags": [],
        "value": "cmd"
    },
    "tf_mvm_disconnect_on_victory": {
        "desc": "Enable to Disconnect Players after completing MvM",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "tf_mvm_engineer_teleporter_uber_duration": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "5"
    },
    "tf_mvm_force_victory": {
        "desc": "Force immediate victory.",
        "tags": [],
        "value": "cmd"
    },
    "tf_mvm_jump_to_wave": {
        "desc": "Jumps directly to the given Mann Vs Machine wave number",
        "tags": [],
        "value": "cmd"
    },
    "tf_mvm_min_players_to_start": {
        "desc": "Minimum number of players connected to start a countdown timer",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "3"
    },
    "tf_mvm_miniboss_scale": {
        "desc": "Full body scale for minibosses.",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "1"
    },
    "tf_mvm_missioncyclefile": {
        "desc": "Name of the .res file used to cycle mvm misisons",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "tf_mvm_nextmission": {
        "desc": "Load the next mission",
        "tags": [],
        "value": "cmd"
    },
    "tf_mvm_popfile": {
        "desc": "Change to a target popfile for MvM",
        "tags": [],
        "value": "cmd"
    },
    "tf_mvm_respec_credit_goal": {
        "desc": "Total amount of money the team must collect to earn a respec.",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "2800"
    },
    "tf_mvm_respec_limit": {
        "desc": "The total number of respecs a player can earn.",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "1"
    },
    "tf_mvm_skill": {
        "desc": "Sets the challenge level of the invading bot army. 1 = easiest, 3 = normal, 5 = hardest",
        "tags": [
            "sv",
            "cheat",
            "rep",
            "norecord"
        ],
        "value": "3"
    },
    "tf_mvm_tabs_discovered": {
        "desc": "Remember how many times players have clicked tabs.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "3"
    },
    "tf_mvm_tank_health": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "tf_mvm_tank_kill": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "tf_mvm_victory_disconnect_time": {
        "desc": "Seconds to wait after MvM victory before kicking players.  (Only used if tf_mvm_disconnect_on_victory is true.)",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "180"
    },
    "tf_mvm_victory_reset_time": {
        "desc": "Seconds to wait after MvM victory before cycling to the next mission.  (Only used if tf_mvm_disconnect_on_victory is false.)",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "60"
    },
    "tf_nav_combat_build_rate": {
        "desc": "Gunfire/second increase (combat caps at 1.0)",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_nav_combat_decay_rate": {
        "desc": "Decay/second toward zero",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_nav_in_combat_duration": {
        "desc": "How long after gunfire occurs is this area still considered to be 'in combat'",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "30"
    },
    "tf_nav_in_combat_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1000"
    },
    "tf_nav_show_bomb_target_distance": {
        "desc": "Display travel distances to bomb target (MvM mode)",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_nav_show_incursion_distance": {
        "desc": "Display travel distances from current spawn room (1=red, 2=blue)",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_nav_show_turf_ownership": {
        "desc": "Color nav area by smallest incursion distance",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_overtime_nag": {
        "desc": "Announcer overtime nag.",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "0"
    },
    "tf_particles_disable_weather": {
        "desc": "Disable particles related to weather effects.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_party_debug": {
        "desc": "Prints local party objects",
        "tags": [],
        "value": "cmd"
    },
    "tf_player_spell_drop_on_death_rate": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_playergib": {
        "desc": "Allow player gibbing. 0: never, 1: normal, 2: always",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "1"
    },
    "tf_populator_active_buffer_range": {
        "desc": "Populate the world this far ahead of lead raider, and this far behind last raider",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "3000"
    },
    "tf_populator_damage_multiplier": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "rep",
            "norecord"
        ],
        "value": "1"
    },
    "tf_populator_debug": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_populator_health_multiplier": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "rep",
            "norecord"
        ],
        "value": "1"
    },
    "tf_pressandhold_minduration": {
        "desc": "The minimum amount of time to spend in the press-and-hold taunt's pose.",
        "tags": [
            "sv"
        ],
        "value": "2"
    },
    "tf_quickplay_beta_ask_percentage": {
        "desc": "Percentage of people who will be prompted to participate in beta quickplay.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "tf_quickplay_beta_preference": {
        "desc": "Preference to participate in beta quickplay: -1 = no preference, 0 = opt out, 1 = opt in",
        "tags": [
            "cl"
        ],
        "value": "-1"
    },
    "tf_quickplay_lastviewedmode": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_recent_achievements": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "2352"
    },
    "tf_remember_activeweapon": {
        "desc": "Setting this to 1 will make the active weapon persist between lives.",
        "tags": [
            "a",
            "user",
            "cl"
        ],
        "value": "0"
    },
    "tf_remember_lastswitched": {
        "desc": "Setting this to 1 will make the 'last weapon' persist between lives.",
        "tags": [
            "a",
            "user",
            "cl"
        ],
        "value": "0"
    },
    "tf_replay_pyrovision": {
        "desc": "When on, replays will be seen with Pyrovision active",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "tf_resolve_stuck_players": {
        "desc": "",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "tf_respawn_on_loadoutchanges": {
        "desc": "When set to 1, you will automatically respawn whenever you change loadouts inside a respawn zone.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_romevision_opt_in": {
        "desc": "Enable Romevision in Mann vs. Machine mode when available.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "tf_romevision_skip_prompt": {
        "desc": "If nonzero, skip the prompt about sharing Romevision.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "tf_select_ambush_areas": {
        "desc": "Add good ambush spots to the selected set. For debugging.",
        "tags": [],
        "value": "cmd"
    },
    "tf_select_ambush_areas_close_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "300"
    },
    "tf_select_ambush_areas_max_enemy_exposure_area": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "500000"
    },
    "tf_select_ambush_areas_radius": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "750"
    },
    "tf_select_with_attribute": {
        "desc": "Selects areas with the given attribute.",
        "tags": [],
        "value": "cmd"
    },
    "tf_server_identity_account_id": {
        "desc": "Server identity account id, used to authenticate with the TF2 Game Coordinator.",
        "tags": [
            "a",
            "sv"
        ],
        "value": "0"
    },
    "tf_server_identity_disable_quickplay": {
        "desc": "Disable this server from being chosen by the quickplay matchmaking.",
        "tags": [
            "a",
            "sv",
            "nf"
        ],
        "value": "0"
    },
    "tf_server_identity_token": {
        "desc": "Server identity token, used to authenticate with the TF2 Game Coordinator.",
        "tags": [
            "a",
            "sv",
            "prot"
        ],
        "value": "0"
    },
    "tf_server_lobby_debug": {
        "desc": "Prints server lobby object",
        "tags": [],
        "value": "cmd"
    },
    "tf_sheen_alpha_firstperson": {
        "desc": "Set the Alpha Value for first person sheens",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "tf_show_actor_potential_visibility": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_show_blocked_areas": {
        "desc": "Highlight areas that are considered blocked for TF-specific reasons",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_show_bomb_drop_areas": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_show_control_points": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_show_enemy_invasion_areas": {
        "desc": "Highlight areas where the enemy team enters the visible environment of the local player",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_show_gate_defense_areas": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_show_in_combat_areas": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_show_incursion_flow": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_show_incursion_flow_gradient": {
        "desc": "1 = red, 2 = blue",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_show_incursion_flow_range": {
        "desc": "1 = red, 2 = blue",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "150"
    },
    "tf_show_incursion_range": {
        "desc": "1 = red, 2 = blue",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_show_incursion_range_max": {
        "desc": "Highlight areas with incursion distances between min and max cvar values",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_show_incursion_range_min": {
        "desc": "Highlight areas with incursion distances between min and max cvar values",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_show_mesh_decoration": {
        "desc": "Highlight special areas",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_show_mesh_decoration_manual": {
        "desc": "Highlight special areas marked by hand",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_show_point_defense_areas": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_show_sentry_danger": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_show_sniper_areas": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_show_sniper_areas_safety_range": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "1000"
    },
    "tf_show_train_path": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_simple_disguise_menu": {
        "desc": "Use a more concise disguise selection menu.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "tf_sniper_fullcharge_bell": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "tf_spectate_pyrovision": {
        "desc": "When on, spectator will see the world with Pyrovision active",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "tf_spectator_target_location": {
        "desc": "Determines the location of the spectator targetID panel.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "2"
    },
    "tf_stats_nogameplaycheck": {
        "desc": "Disable normal check for valid gameplay, send stats regardless.",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "tf_steam_workshop_import_icon_path": {
        "desc": "Default location to load backpack icons from",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "tf_steam_workshop_import_material_path": {
        "desc": "Default location to load materials from",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "tf_steam_workshop_import_model_path": {
        "desc": "Default location to load models from",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "tf_steam_workshop_query_timeout": {
        "desc": "Time in seconds to allow communication with the Steam Workshop server.",
        "tags": [
            "cl"
        ],
        "value": "10"
    },
    "tf_taunt_first_person": {
        "desc": "1 = taunts remain first-person",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "tf_teamtalk": {
        "desc": "Teammates can always chat with each other while alive or dead.",
        "tags": [
            "sv",
            "nf"
        ],
        "value": "0"
    },
    "tf_test_hat_bodygroup": {
        "desc": "For testing bodygroups on hats.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "tf_test_spellindex": {
        "desc": "Set to index to always get a specific spell",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "-1"
    },
    "tf_test_teleport_home_fx": {
        "desc": "",
        "tags": [
            "sv",
            "cheat"
        ],
        "value": "0"
    },
    "tf_testitem_recent": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "tf_testrr": {
        "desc": "Force the player under your crosshair to speak a response rule concept. Format is tf_testrr <concept>, or tf_testrr <player nam",
        "tags": [],
        "value": "cmd"
    },
    "tf_testvcd": {
        "desc": "Run a vcd on the player currently under your crosshair. Optional parameter is the .vcd name (default is 'scenes/heavy_test.vcd'",
        "tags": [],
        "value": "cmd"
    },
    "tf_tournament_classlimit_demoman": {
        "desc": "Tournament mode per-team class limit for Demomenz.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "-1"
    },
    "tf_tournament_classlimit_engineer": {
        "desc": "Tournament mode per-team class limit for Engineers.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "-1"
    },
    "tf_tournament_classlimit_heavy": {
        "desc": "Tournament mode per-team class limit for Heavies.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "-1"
    },
    "tf_tournament_classlimit_medic": {
        "desc": "Tournament mode per-team class limit for Medics.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "-1"
    },
    "tf_tournament_classlimit_pyro": {
        "desc": "Tournament mode per-team class limit for Pyros.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "-1"
    },
    "tf_tournament_classlimit_scout": {
        "desc": "Tournament mode per-team class limit for Scouts.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "-1"
    },
    "tf_tournament_classlimit_sniper": {
        "desc": "Tournament mode per-team class limit for Snipers.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "-1"
    },
    "tf_tournament_classlimit_soldier": {
        "desc": "Tournament mode per-team class limit for Soldiers.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "-1"
    },
    "tf_tournament_classlimit_spy": {
        "desc": "Tournament mode per-team class limit for Spies.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "-1"
    },
    "tf_tournament_hide_domination_icons": {
        "desc": "Tournament mode server convar that forces clients to not display the domination icons above players dominating them.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "0"
    },
    "tf_training_client_message": {
        "desc": "A simple way for the training client to communicate with the server.",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "0"
    },
    "tf_training_has_prompted_for_forums": {
        "desc": "Whether the user has been prompted to view the new user forums.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_training_has_prompted_for_loadout": {
        "desc": "Whether the user has been prompted to equip something in their loadout.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_training_has_prompted_for_offline_practice": {
        "desc": "Whether the user has been prompted to try offline practice.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_training_has_prompted_for_options": {
        "desc": "Whether the user has been prompted to view the TF2 advanced options.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_training_has_prompted_for_training": {
        "desc": "Whether the user has been prompted for training",
        "tags": [
            "a",
            "cl"
        ],
        "value": "2"
    },
    "tf_use_fixed_weaponspreads": {
        "desc": "If set to 1, weapons that fire multiple pellets per shot will use a non-random pellet distribution.",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "0"
    },
    "tf_weapon_criticals": {
        "desc": "",
        "tags": [
            "sv",
            "nf",
            "rep"
        ],
        "value": "1"
    },
    "tf_weapon_criticals_bucket_bottom": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "-250"
    },
    "tf_weapon_criticals_bucket_cap": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "1000"
    },
    "tf_weapon_criticals_bucket_default": {
        "desc": "",
        "tags": [
            "sv",
            "cheat",
            "rep"
        ],
        "value": "300"
    },
    "tf_weapon_select_demo_start_delay": {
        "desc": "Delay after spawning to start the weapon bucket demo.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "tf_weapon_select_demo_time": {
        "desc": "Time to pulse each weapon bucket upon spawning as a new class. 0 to turn off.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "tf_wipe_attributes": {
        "desc": "Clear all TF-specific attributes of selected area.",
        "tags": [],
        "value": "cmd"
    },
    "think_limit": {
        "desc": "Maximum think time in milliseconds, warning is printed if this is exceeded.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "0"
    },
    "thirdperson": {
        "desc": "Switch to thirdperson camera.",
        "tags": [],
        "value": "cmd"
    },
    "thirdperson_mayamode": {
        "desc": "Switch to thirdperson Maya-like camera controls.",
        "tags": [],
        "value": "cmd"
    },
    "thirdperson_platformer": {
        "desc": "Player will aim in the direction they are moving.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "thirdperson_screenspace": {
        "desc": "Movement will be relative to the camera, eg: left means screen-left",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "threadpool_affinity": {
        "desc": "Enable setting affinity",
        "tags": [],
        "value": "1"
    },
    "timedemo": {
        "desc": "Play a demo and report performance info.",
        "tags": [],
        "value": "cmd"
    },
    "timedemo_runcount": {
        "desc": "Runs time demo X number of times.",
        "tags": [],
        "value": "0"
    },
    "timedemoquit": {
        "desc": "Play a demo, report performance info, and then exit",
        "tags": [],
        "value": "cmd"
    },
    "timerefresh": {
        "desc": "Profile the renderer.",
        "tags": [],
        "value": "cmd"
    },
    "toggle": {
        "desc": "Toggles a convar on or off, or cycles through a set of values.",
        "tags": [],
        "value": "cmd"
    },
    "toggle_duck": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "toggleconsole": {
        "desc": "Show/hide the console.",
        "tags": [],
        "value": "cmd"
    },
    "togglescores": {
        "desc": "Toggles score panel",
        "tags": [],
        "value": "cmd"
    },
    "trace_report": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "tracer_extra": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "training_can_build_dispenser": {
        "desc": "Player can build dispenser as engineer.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "training_can_build_sentry": {
        "desc": "Player can build sentry as engineer.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "training_can_build_tele_entrance": {
        "desc": "Player can build teleporter entrance as engineer.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "training_can_build_tele_exit": {
        "desc": "Player can build teleporter exit as engineer.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "training_can_destroy_buildings": {
        "desc": "Player can destroy buildings as engineer.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "training_can_pickup_dispenser": {
        "desc": "Player can pickup dispenser as engineer.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "training_can_pickup_sentry": {
        "desc": "Player can pickup sentry gun as engineer.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "training_can_pickup_tele_entrance": {
        "desc": "Player can pickup teleporter entrance as engineer.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "training_can_pickup_tele_exit": {
        "desc": "Player can pickup teleporter entrance as engineer.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "training_can_select_weapon_building": {
        "desc": "In training player select building tool.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "training_can_select_weapon_item1": {
        "desc": "In training player select item 1.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "training_can_select_weapon_item2": {
        "desc": "In training player select item 2.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "training_can_select_weapon_melee": {
        "desc": "In training player select melee weapon.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "training_can_select_weapon_pda": {
        "desc": "In training player select pda.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "training_can_select_weapon_primary": {
        "desc": "In training player select primary weapon.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "training_can_select_weapon_secondary": {
        "desc": "In training player select secondary weapon.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "1"
    },
    "training_class": {
        "desc": "Class to use in training.",
        "tags": [
            "sv",
            "rep"
        ],
        "value": "3"
    },
    "training_continue": {
        "desc": "Tells training that it should continue.",
        "tags": [],
        "value": "cmd"
    },
    "training_map_video": {
        "desc": "Video to show for training",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "training_showdlg": {
        "desc": "Displays the training dialog.",
        "tags": [],
        "value": "cmd"
    },
    "tv_allow_camera_man": {
        "desc": "Auto director allows spectators to become camera man",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "tv_allow_static_shots": {
        "desc": "Auto director uses fixed level cameras for shots",
        "tags": [
            "sv"
        ],
        "value": "1"
    },
    "tv_autorecord": {
        "desc": "Automatically records all games as SourceTV demos.",
        "tags": [],
        "value": "0"
    },
    "tv_autoretry": {
        "desc": "Relay proxies retry connection after network timeout",
        "tags": [],
        "value": "1"
    },
    "tv_chatgroupsize": {
        "desc": "Set the default chat group size",
        "tags": [],
        "value": "0"
    },
    "tv_chattimelimit": {
        "desc": "Limits spectators to chat only every n seconds",
        "tags": [],
        "value": "8"
    },
    "tv_clients": {
        "desc": "Shows list of connected SourceTV clients.",
        "tags": [],
        "value": "cmd"
    },
    "tv_debug": {
        "desc": "SourceTV debug info.",
        "tags": [],
        "value": "0"
    },
    "tv_delay": {
        "desc": "SourceTV broadcast delay in seconds",
        "tags": [
            "sv"
        ],
        "value": "30"
    },
    "tv_delaymapchange": {
        "desc": "Delays map change until broadcast is complete",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "tv_deltacache": {
        "desc": "Enable delta entity bit stream cache",
        "tags": [],
        "value": "2"
    },
    "tv_dispatchmode": {
        "desc": "Dispatch clients to relay proxies: 0=never, 1=if appropriate, 2=always",
        "tags": [],
        "value": "1"
    },
    "tv_enable": {
        "desc": "Activates SourceTV on server.",
        "tags": [
            "nf"
        ],
        "value": "0"
    },
    "tv_maxclients": {
        "desc": "Maximum client number on SourceTV server.",
        "tags": [],
        "value": "128"
    },
    "tv_maxrate": {
        "desc": "Max SourceTV spectator bandwidth rate allowed, 0 == unlimited",
        "tags": [],
        "value": "8000"
    },
    "tv_msg": {
        "desc": "Send a screen message to all clients.",
        "tags": [],
        "value": "cmd"
    },
    "tv_name": {
        "desc": "SourceTV host name",
        "tags": [],
        "value": "0"
    },
    "tv_nochat": {
        "desc": "Don't receive chat messages from other SourceTV spectators",
        "tags": [
            "a",
            "user"
        ],
        "value": "0"
    },
    "tv_overridemaster": {
        "desc": "Overrides the SourceTV master root address.",
        "tags": [],
        "value": "0"
    },
    "tv_password": {
        "desc": "SourceTV password for all clients",
        "tags": [
            "nf",
            "prot",
            "norecord"
        ],
        "value": "0"
    },
    "tv_port": {
        "desc": "Host SourceTV port",
        "tags": [],
        "value": "27020"
    },
    "tv_record": {
        "desc": "Starts SourceTV demo recording.",
        "tags": [],
        "value": "cmd"
    },
    "tv_relay": {
        "desc": "Connect to SourceTV server and relay broadcast.",
        "tags": [],
        "value": "cmd"
    },
    "tv_relaypassword": {
        "desc": "SourceTV password for relay proxies",
        "tags": [
            "nf",
            "prot",
            "norecord"
        ],
        "value": "0"
    },
    "tv_relayvoice": {
        "desc": "Relay voice data: 0=off, 1=on",
        "tags": [],
        "value": "1"
    },
    "tv_retry": {
        "desc": "Reconnects the SourceTV relay proxy.",
        "tags": [],
        "value": "cmd"
    },
    "tv_snapshotrate": {
        "desc": "Snapshots broadcasted per second",
        "tags": [],
        "value": "16"
    },
    "tv_status": {
        "desc": "Show SourceTV server status.",
        "tags": [],
        "value": "cmd"
    },
    "tv_stop": {
        "desc": "Stops the SourceTV broadcast.",
        "tags": [],
        "value": "cmd"
    },
    "tv_stoprecord": {
        "desc": "Stops SourceTV demo recording.",
        "tags": [],
        "value": "cmd"
    },
    "tv_timeout": {
        "desc": "SourceTV connection timeout in seconds.",
        "tags": [],
        "value": "30"
    },
    "tv_title": {
        "desc": "Set title for SourceTV spectator UI",
        "tags": [],
        "value": "0"
    },
    "tv_transmitall": {
        "desc": "Transmit all entities (not only director view)",
        "tags": [
            "rep"
        ],
        "value": "0"
    },
    "ui_posedebug_fade_in_time": {
        "desc": "Time during which a new pose activity layer is shown in green in +posedebug UI",
        "tags": [
            "cheat",
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "ui_posedebug_fade_out_time": {
        "desc": "Time to keep a no longer active pose activity layer in red until removing it from +posedebug UI",
        "tags": [
            "cheat",
            "norecord",
            "cl"
        ],
        "value": "0"
    },
    "unbind": {
        "desc": "Unbind a key.",
        "tags": [],
        "value": "cmd"
    },
    "unbind_mac": {
        "desc": "Unbind a key on the Mac only.",
        "tags": [],
        "value": "cmd"
    },
    "unbindall": {
        "desc": "Unbind all keys.",
        "tags": [],
        "value": "cmd"
    },
    "unpause": {
        "desc": "Unpause the game.",
        "tags": [],
        "value": "cmd"
    },
    "use": {
        "desc": "Use a particular weapon  Arguments: <weapon_name>",
        "tags": [],
        "value": "cmd"
    },
    "user": {
        "desc": "Show user data.",
        "tags": [],
        "value": "cmd"
    },
    "user_context": {
        "desc": "Set a Rich Presence Context: user_context <context id> <context value>",
        "tags": [],
        "value": "cmd"
    },
    "user_property": {
        "desc": "Set a Rich Presence Property: user_property <property id>",
        "tags": [],
        "value": "cmd"
    },
    "users": {
        "desc": "Show user info for players on server.",
        "tags": [],
        "value": "cmd"
    },
    "v_centermove": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "v_centerspeed": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "500"
    },
    "vcollide_wireframe": {
        "desc": "Render physics collision models in wireframe",
        "tags": [
            "cheat",
            "cl"
        ],
        "value": "0"
    },
    "vcr_verbose": {
        "desc": "Write extra information into .vcr file.",
        "tags": [],
        "value": "0"
    },
    "vehicle_flushscript": {
        "desc": "Flush and reload all vehicle scripts",
        "tags": [],
        "value": "cmd"
    },
    "version": {
        "desc": "Print version info string.",
        "tags": [],
        "value": "cmd"
    },
    "vgui_drawfocus": {
        "desc": "Report which panel is under the mouse.",
        "tags": [],
        "value": "0"
    },
    "vgui_drawtree": {
        "desc": "Draws the vgui panel hiearchy to the specified depth level.",
        "tags": [
            "cheat"
        ],
        "value": "0"
    },
    "vgui_drawtree_bounds": {
        "desc": "Show panel bounds.",
        "tags": [],
        "value": "0"
    },
    "vgui_drawtree_clear": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "vgui_drawtree_draw_selected": {
        "desc": "Highlight the selected panel",
        "tags": [],
        "value": "0"
    },
    "vgui_drawtree_freeze": {
        "desc": "Set to 1 to stop updating the vgui_drawtree view.",
        "tags": [],
        "value": "0"
    },
    "vgui_drawtree_hidden": {
        "desc": "Draw the hidden panels.",
        "tags": [],
        "value": "0"
    },
    "vgui_drawtree_panelalpha": {
        "desc": "Show the panel alpha values in the vgui_drawtree view.",
        "tags": [],
        "value": "0"
    },
    "vgui_drawtree_panelptr": {
        "desc": "Show the panel pointer values in the vgui_drawtree view.",
        "tags": [],
        "value": "0"
    },
    "vgui_drawtree_popupsonly": {
        "desc": "Draws the vgui popup list in hierarchy(1) or most recently used(2) order.",
        "tags": [],
        "value": "0"
    },
    "vgui_drawtree_render_order": {
        "desc": "List the vgui_drawtree panels in render order.",
        "tags": [],
        "value": "0"
    },
    "vgui_drawtree_visible": {
        "desc": "Draw the visible panels.",
        "tags": [],
        "value": "1"
    },
    "vgui_message_dialog_modal": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "1"
    },
    "vgui_spew_fonts": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "vgui_togglepanel": {
        "desc": "show/hide vgui panel by name.",
        "tags": [],
        "value": "cmd"
    },
    "video_quicktime_decode_gamma": {
        "desc": "QuickTime Video Playback Gamma Target- 0=no gamma adjust  1=platform default gamma  2 = gamma 1.8  3 = gamma 2.2  4 = gamma 2.5",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "video_quicktime_encode_gamma": {
        "desc": "QuickTime Video Encode Gamma Target- 0=no gamma adjust  1=platform default gamma  2 = gamma 1.8  3 = gamma 2.2  4 = gamma 2.5",
        "tags": [
            "a"
        ],
        "value": "3"
    },
    "viewanim_addkeyframe": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "viewanim_create": {
        "desc": "viewanim_create",
        "tags": [],
        "value": "cmd"
    },
    "viewanim_load": {
        "desc": "load animation from file",
        "tags": [],
        "value": "cmd"
    },
    "viewanim_reset": {
        "desc": "reset view angles!",
        "tags": [],
        "value": "cmd"
    },
    "viewanim_save": {
        "desc": "Save current animation to file",
        "tags": [],
        "value": "cmd"
    },
    "viewanim_test": {
        "desc": "test view animation",
        "tags": [],
        "value": "cmd"
    },
    "viewmodel_fov": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "105"
    },
    "viewmodel_fov_demo": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "54"
    },
    "violence_ablood": {
        "desc": "Draw alien blood",
        "tags": [],
        "value": "0"
    },
    "violence_agibs": {
        "desc": "Show alien gib entities",
        "tags": [],
        "value": "0"
    },
    "violence_hblood": {
        "desc": "Draw human blood",
        "tags": [],
        "value": "0"
    },
    "violence_hgibs": {
        "desc": "Show human gib entities",
        "tags": [],
        "value": "0"
    },
    "voice_avggain": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "voice_clientdebug": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "voice_debugfeedback": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "voice_debugfeedbackfrom": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "voice_enable": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "1"
    },
    "voice_fadeouttime": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "voice_forcemicrecord": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "voice_inputfromfile": {
        "desc": "Get voice input from 'voice_input.wav' rather than from the microphone.",
        "tags": [],
        "value": "0"
    },
    "voice_loopback": {
        "desc": "",
        "tags": [
            "user"
        ],
        "value": "0"
    },
    "voice_maxgain": {
        "desc": "",
        "tags": [],
        "value": "10"
    },
    "voice_menu_1": {
        "desc": "Opens voice menu 1",
        "tags": [],
        "value": "cmd"
    },
    "voice_menu_2": {
        "desc": "Opens voice menu 2",
        "tags": [],
        "value": "cmd"
    },
    "voice_menu_3": {
        "desc": "Opens voice menu 3",
        "tags": [],
        "value": "cmd"
    },
    "voice_modenable": {
        "desc": "Enable/disable voice in this mod.",
        "tags": [
            "a",
            "clientcmd_can_execute",
            "cl"
        ],
        "value": "1"
    },
    "voice_overdrive": {
        "desc": "",
        "tags": [],
        "value": "2"
    },
    "voice_overdrivefadetime": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "voice_printtalkers": {
        "desc": "voice debug.",
        "tags": [],
        "value": "cmd"
    },
    "voice_profile": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "voice_recordtofile": {
        "desc": "Record mic data and decompressed voice data into 'voice_micdata.wav' and 'voice_decompressed.wav'",
        "tags": [],
        "value": "0"
    },
    "voice_scale": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "voice_serverdebug": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "voice_showchannels": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "voice_showincoming": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "voice_steal": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "voice_writevoices": {
        "desc": "Saves each speaker's voice data into separate .wav files",
        "tags": [],
        "value": "0"
    },
    "volume": {
        "desc": "Sound volume",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "vox_reload": {
        "desc": "Reload sentences.txt file",
        "tags": [],
        "value": "cmd"
    },
    "voxeltree_box": {
        "desc": "View entities in the voxel-tree inside box <Vector(min), Vector(max)>.",
        "tags": [],
        "value": "cmd"
    },
    "voxeltree_playerview": {
        "desc": "View entities in the voxel-tree at the player position.",
        "tags": [],
        "value": "cmd"
    },
    "voxeltree_sphere": {
        "desc": "View entities in the voxel-tree inside sphere <Vector(center), float(radius)>.",
        "tags": [],
        "value": "cmd"
    },
    "voxeltree_view": {
        "desc": "View entities in the voxel-tree.",
        "tags": [],
        "value": "cmd"
    },
    "vprof": {
        "desc": "Toggle VProf profiler",
        "tags": [],
        "value": "cmd"
    },
    "vprof_adddebuggroup1": {
        "desc": "add a new budget group dynamically for debugging",
        "tags": [],
        "value": "cmd"
    },
    "vprof_cachemiss": {
        "desc": "Toggle VProf cache miss checking",
        "tags": [],
        "value": "cmd"
    },
    "vprof_cachemiss_off": {
        "desc": "Turn off VProf cache miss checking",
        "tags": [],
        "value": "cmd"
    },
    "vprof_cachemiss_on": {
        "desc": "Turn on VProf cache miss checking",
        "tags": [],
        "value": "cmd"
    },
    "vprof_child": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "vprof_collapse_all": {
        "desc": "Collapse the whole vprof tree",
        "tags": [],
        "value": "cmd"
    },
    "vprof_counters": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "vprof_dump_groupnames": {
        "desc": "Write the names of all of the vprof groups to the console.",
        "tags": [],
        "value": "cmd"
    },
    "vprof_dump_oninterval": {
        "desc": "Interval (in seconds) at which vprof will batch up data and dump it to the console.",
        "tags": [],
        "value": "0"
    },
    "vprof_dump_spikes": {
        "desc": "Framerate at which vprof will begin to dump spikes to the console. 0 = disabled, negative to reset after dump",
        "tags": [],
        "value": "0"
    },
    "vprof_dump_spikes_budget_group": {
        "desc": "Budget gtNode to start report from when doing a dump spikes",
        "tags": [],
        "value": "0"
    },
    "vprof_dump_spikes_node": {
        "desc": "Node to start report from when doing a dump spikes",
        "tags": [],
        "value": "0"
    },
    "vprof_expand_all": {
        "desc": "Expand the whole vprof tree",
        "tags": [],
        "value": "cmd"
    },
    "vprof_expand_group": {
        "desc": "Expand a budget group in the vprof tree by name",
        "tags": [],
        "value": "cmd"
    },
    "vprof_generate_report": {
        "desc": "Generate a report to the console.",
        "tags": [],
        "value": "cmd"
    },
    "vprof_generate_report_AI": {
        "desc": "Generate a report to the console.",
        "tags": [],
        "value": "cmd"
    },
    "vprof_generate_report_AI_only": {
        "desc": "Generate a report to the console.",
        "tags": [],
        "value": "cmd"
    },
    "vprof_generate_report_budget": {
        "desc": "Generate a report to the console based on budget group.",
        "tags": [],
        "value": "cmd"
    },
    "vprof_generate_report_hierarchy": {
        "desc": "Generate a report to the console.",
        "tags": [],
        "value": "cmd"
    },
    "vprof_generate_report_map_load": {
        "desc": "Generate a report to the console.",
        "tags": [],
        "value": "cmd"
    },
    "vprof_graph": {
        "desc": "Draw the vprof graph.",
        "tags": [],
        "value": "0"
    },
    "vprof_graphheight": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "256"
    },
    "vprof_graphwidth": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "512"
    },
    "vprof_nextsibling": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "vprof_off": {
        "desc": "Turn off VProf profiler",
        "tags": [],
        "value": "cmd"
    },
    "vprof_on": {
        "desc": "Turn on VProf profiler",
        "tags": [],
        "value": "cmd"
    },
    "vprof_parent": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "vprof_playback_average": {
        "desc": "Average the next N frames.",
        "tags": [],
        "value": "cmd"
    },
    "vprof_playback_start": {
        "desc": "Start playing back a recorded .vprof file.",
        "tags": [],
        "value": "cmd"
    },
    "vprof_playback_step": {
        "desc": "While playing back a .vprof file, step to the next tick.",
        "tags": [],
        "value": "cmd"
    },
    "vprof_playback_stepback": {
        "desc": "While playing back a .vprof file, step to the previous tick.",
        "tags": [],
        "value": "cmd"
    },
    "vprof_playback_stop": {
        "desc": "Stop playing back a recorded .vprof file.",
        "tags": [],
        "value": "cmd"
    },
    "vprof_prevsibling": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "vprof_record_start": {
        "desc": "Start recording vprof data for playback later.",
        "tags": [],
        "value": "cmd"
    },
    "vprof_record_stop": {
        "desc": "Stop recording vprof data",
        "tags": [],
        "value": "cmd"
    },
    "vprof_remote_start": {
        "desc": "Request a VProf data stream from the remote server (requires authentication)",
        "tags": [],
        "value": "cmd"
    },
    "vprof_remote_stop": {
        "desc": "Stop an existing remote VProf data request",
        "tags": [],
        "value": "cmd"
    },
    "vprof_report_oninterval": {
        "desc": "Interval (in seconds) at which vprof will batch up a full report to the console -- more detailed than vprof_dump_oninterval.",
        "tags": [],
        "value": "0"
    },
    "vprof_reset": {
        "desc": "Reset the stats in VProf profiler",
        "tags": [],
        "value": "cmd"
    },
    "vprof_reset_peaks": {
        "desc": "Reset just the peak time in VProf profiler",
        "tags": [],
        "value": "cmd"
    },
    "vprof_scope": {
        "desc": "Set a specific scope to start showing vprof tree",
        "tags": [],
        "value": "0"
    },
    "vprof_scope_entity_gamephys": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "vprof_scope_entity_thinks": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "vprof_unaccounted_limit": {
        "desc": "number of milliseconds that a node must exceed to turn red in the vprof panel",
        "tags": [
            "a"
        ],
        "value": "0"
    },
    "vprof_verbose": {
        "desc": "Set to one to show average and peak times",
        "tags": [
            "a"
        ],
        "value": "1"
    },
    "vprof_vtrace": {
        "desc": "Toggle whether vprof data is sent to VTrace",
        "tags": [],
        "value": "cmd"
    },
    "vprof_vtune_group": {
        "desc": "enable vtune for a particular vprof group ('disable' to disable)",
        "tags": [],
        "value": "cmd"
    },
    "vprof_warningmsec": {
        "desc": "Above this many milliseconds render the label red to indicate slow code.",
        "tags": [
            "a"
        ],
        "value": "10"
    },
    "vr_activate": {
        "desc": "Switch to VR mode",
        "tags": [],
        "value": "cmd"
    },
    "vr_activate_default": {
        "desc": "If this is true the game will switch to VR mode once startup is complete.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "vr_aim_yaw_offset": {
        "desc": "This value is added to Yaw when returning the vehicle aim angles to Source.",
        "tags": [
            "cl"
        ],
        "value": "90"
    },
    "vr_cycle_aim_move_mode": {
        "desc": "Cycle through the aim & move modes.",
        "tags": [],
        "value": "cmd"
    },
    "vr_deactivate": {
        "desc": "Switch from VR mode to normal mode",
        "tags": [],
        "value": "cmd"
    },
    "vr_debug_nochromatic": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "vr_debug_nodistortion": {
        "desc": "",
        "tags": [],
        "value": "0"
    },
    "vr_debug_remote_cam": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "vr_debug_remote_cam_pos_x": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "150"
    },
    "vr_debug_remote_cam_pos_y": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "vr_debug_remote_cam_pos_z": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "vr_debug_remote_cam_target_x": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "vr_debug_remote_cam_target_y": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "vr_debug_remote_cam_target_z": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "-50"
    },
    "vr_distortion_enable": {
        "desc": "",
        "tags": [],
        "value": "1"
    },
    "vr_first_person_uses_world_model": {
        "desc": "Causes the third person model to be drawn instead of the view model",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "vr_force_windowed": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "vr_hud_axis_lock_to_world": {
        "desc": "Bitfield - locks HUD axes to the world - 0=pitch, 1=yaw, 2=roll",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "vr_hud_display_ratio": {
        "desc": "",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "vr_hud_forward": {
        "desc": "Apparent distance of the HUD in inches",
        "tags": [
            "a",
            "cl"
        ],
        "value": "500"
    },
    "vr_hud_max_fov": {
        "desc": "Max FOV of the HUD",
        "tags": [
            "a",
            "cl"
        ],
        "value": "60"
    },
    "vr_hud_never_overlay": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "vr_moveaim_mode": {
        "desc": "0=move+shoot from face. 1=move with torso. 2,3,4=shoot with face+mouse cursor. 5+ are probably not that useful.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "3"
    },
    "vr_moveaim_mode_zoom": {
        "desc": "0=move+shoot from face. 1=move with torso. 2,3,4=shoot with face+mouse cursor. 5+ are probably not that useful.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "3"
    },
    "vr_moveaim_reticle_pitch_limit": {
        "desc": "Beyond this number of degrees, the mouse clamps",
        "tags": [
            "a",
            "cl"
        ],
        "value": "30"
    },
    "vr_moveaim_reticle_pitch_limit_zoom": {
        "desc": "Beyond this number of degrees, the mouse clamps",
        "tags": [
            "a",
            "cl"
        ],
        "value": "-1"
    },
    "vr_moveaim_reticle_yaw_limit": {
        "desc": "Beyond this number of degrees, the mouse drags the torso",
        "tags": [
            "a",
            "cl"
        ],
        "value": "10"
    },
    "vr_moveaim_reticle_yaw_limit_zoom": {
        "desc": "Beyond this number of degrees, the mouse drags the torso",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "vr_projection_znear_multiplier": {
        "desc": "Allows moving the ZNear plane to deal with body clipping",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "vr_refresh_distortion_texture": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "vr_render_hud_in_world": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "1"
    },
    "vr_reset_home_pos": {
        "desc": "Sets the current HMD position as the zero point",
        "tags": [],
        "value": "cmd"
    },
    "vr_stereo_mono_set_eye": {
        "desc": "0=off, Set all eyes to 1=left, 2=right, 3=middle eye",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "vr_stereo_swap_eyes": {
        "desc": "1=swap eyes.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "vr_toggle": {
        "desc": "Toggles VR mode",
        "tags": [],
        "value": "cmd"
    },
    "vr_track_reinit": {
        "desc": "Reinitializes HMD tracking",
        "tags": [],
        "value": "cmd"
    },
    "vr_translation_limit": {
        "desc": "How far the in-game head will translate before being clamped.",
        "tags": [
            "cl"
        ],
        "value": "10"
    },
    "vr_use_offscreen_render_target": {
        "desc": "Experimental: Use larger offscreen render target for pre-distorted scene in VR",
        "tags": [],
        "value": "0"
    },
    "vr_viewmodel_offset_forward": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "-8"
    },
    "vr_viewmodel_offset_forward_large": {
        "desc": "",
        "tags": [
            "cl"
        ],
        "value": "-15"
    },
    "vr_viewmodel_translate_with_head": {
        "desc": "1=translate the viewmodel with the head motion.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "vr_zoom_multiplier": {
        "desc": "When zoomed, how big is the scope on your HUD?",
        "tags": [
            "a",
            "cl"
        ],
        "value": "2"
    },
    "vr_zoom_scope_scale": {
        "desc": "Something to do with the default scope HUD overlay size.",
        "tags": [
            "cl"
        ],
        "value": "6"
    },
    "vtune": {
        "desc": "Controls VTune's sampling.",
        "tags": [],
        "value": "cmd"
    },
    "wc_air_edit_further": {
        "desc": "When in WC edit mode and editing air nodes,  moves position of air node crosshair and placement location further away from play",
        "tags": [],
        "value": "cmd"
    },
    "wc_air_edit_nearer": {
        "desc": "When in WC edit mode and editing air nodes,  moves position of air node crosshair and placement location nearer to from player",
        "tags": [],
        "value": "cmd"
    },
    "wc_air_node_edit": {
        "desc": "When in WC edit mode, toggles laying down or air nodes instead of ground nodes",
        "tags": [],
        "value": "cmd"
    },
    "wc_create": {
        "desc": "When in WC edit mode, creates a node where the player is looking if a node is allowed at that location for the currently select",
        "tags": [],
        "value": "cmd"
    },
    "wc_destroy": {
        "desc": "When in WC edit mode, destroys the node that the player is nearest to looking at.  (The node will be highlighted by a red box).",
        "tags": [],
        "value": "cmd"
    },
    "wc_destroy_undo": {
        "desc": "When in WC edit mode restores the last deleted node",
        "tags": [],
        "value": "cmd"
    },
    "wc_link_edit": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "weapon_showproficiency": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "windows_speaker_config": {
        "desc": "",
        "tags": [
            "a"
        ],
        "value": "1"
    },
    "wipe_nav_attributes": {
        "desc": "Clear all nav attributes of selected area.",
        "tags": [],
        "value": "cmd"
    },
    "writeid": {
        "desc": "Writes a list of permanently-banned user IDs to banned_user.cfg.",
        "tags": [],
        "value": "cmd"
    },
    "writeip": {
        "desc": "Save the ban list to banned_ip.cfg.",
        "tags": [],
        "value": "cmd"
    },
    "x360_audio_english": {
        "desc": "Keeps track of whether we're forcing english in a localized language.",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "x360_resolution_height": {
        "desc": "This is only used for reference. Changing this value does nothing",
        "tags": [
            "cl"
        ],
        "value": "480"
    },
    "x360_resolution_interlaced": {
        "desc": "This is only used for reference. Changing this value does nothing",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "x360_resolution_widescreen_mode": {
        "desc": "This is only used for reference. Changing this value does nothing",
        "tags": [
            "cl"
        ],
        "value": "0"
    },
    "x360_resolution_width": {
        "desc": "This is only used for reference. Changing this value does nothing",
        "tags": [
            "cl"
        ],
        "value": "640"
    },
    "xbox_autothrottle": {
        "desc": "",
        "tags": [
            "a",
            "sv"
        ],
        "value": "1"
    },
    "xbox_steering_deadzone": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "xbox_throttlebias": {
        "desc": "",
        "tags": [
            "a",
            "sv"
        ],
        "value": "100"
    },
    "xbox_throttlespoof": {
        "desc": "",
        "tags": [
            "a",
            "sv"
        ],
        "value": "200"
    },
    "xc_crouch_debounce": {
        "desc": "",
        "tags": [
            "sv"
        ],
        "value": "0"
    },
    "xload": {
        "desc": "Load a saved game from a 360 storage device.",
        "tags": [],
        "value": "cmd"
    },
    "xlook": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "xmove": {
        "desc": "",
        "tags": [],
        "value": "cmd"
    },
    "xsave": {
        "desc": "Saves current game to a 360 storage device.",
        "tags": [],
        "value": "cmd"
    },
    "youtube_http_proxy": {
        "desc": "HTTP proxy.  Specify if you have have problems uploading to YouTube.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "youtube_username": {
        "desc": "Username for YouTube.",
        "tags": [
            "a",
            "cl"
        ],
        "value": "0"
    },
    "zoom_sensitivity_ratio": {
        "desc": "Additional mouse sensitivity scale factor applied when FOV is zoomed in.",
        "tags": [
            "cl"
        ],
        "value": "1"
    }
}